"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _clsx = _interopRequireDefault(require("clsx"));
var _utils = require("@mui/utils");
var _PopperUnstyled = _interopRequireDefault(require("@mui/base/PopperUnstyled"));
var _SelectUnstyled = require("@mui/base/SelectUnstyled");
var _useSelect = _interopRequireDefault(require("@mui/base/useSelect"));
var _composeClasses = _interopRequireDefault(require("@mui/base/composeClasses"));
var _List = require("../List/List");
var _ListProvider = _interopRequireWildcard(require("../List/ListProvider"));
var _Unfold2 = _interopRequireDefault(require("../internal/svg-icons/Unfold"));
var _styles = require("../styles");
var _ColorInversion = _interopRequireWildcard(require("../styles/ColorInversion"));
var _useSlot = _interopRequireDefault(require("../utils/useSlot"));
var _selectClasses = _interopRequireWildcard(require("./selectClasses"));
var _FormControlContext = _interopRequireDefault(require("../FormControl/FormControlContext"));
var _jsxRuntime = require("react/jsx-runtime");
var _Unfold;
const _excluded = ["action", "autoFocus", "children", "defaultValue", "defaultListboxOpen", "disabled", "getSerializedValue", "placeholder", "listboxId", "listboxOpen", "onChange", "onListboxOpenChange", "onClose", "renderValue", "value", "size", "variant", "color", "startDecorator", "endDecorator", "indicator", "aria-describedby", "aria-label", "aria-labelledby", "id", "name"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function defaultRenderSingleValue(selectedOption) {
  var _selectedOption$label;
  return (_selectedOption$label = selectedOption == null ? void 0 : selectedOption.label) != null ? _selectedOption$label : '';
}
function defaultFormValueProvider(selectedOption) {
  if ((selectedOption == null ? void 0 : selectedOption.value) == null) {
    return '';
  }
  if (typeof selectedOption.value === 'string' || typeof selectedOption.value === 'number') {
    return selectedOption.value;
  }
  return JSON.stringify(selectedOption.value);
}
const defaultModifiers = [{
  name: 'offset',
  options: {
    offset: [0, 4]
  }
}, {
  // popper will have the same width as root element when open
  name: 'equalWidth',
  enabled: true,
  phase: 'beforeWrite',
  requires: ['computeStyles'],
  fn: ({
    state
  }) => {
    state.styles.popper.width = `${state.rects.reference.width}px`;
  }
}];
const useUtilityClasses = ownerState => {
  const {
    color,
    disabled,
    focusVisible,
    size,
    variant,
    open
  } = ownerState;
  const slots = {
    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', open && 'expanded', variant && `variant${(0, _utils.unstable_capitalize)(variant)}`, color && `color${(0, _utils.unstable_capitalize)(color)}`, size && `size${(0, _utils.unstable_capitalize)(size)}`],
    button: ['button'],
    startDecorator: ['startDecorator'],
    endDecorator: ['endDecorator'],
    indicator: ['indicator', open && 'expanded'],
    listbox: ['listbox', open && 'expanded', disabled && 'disabled']
  };
  return (0, _composeClasses.default)(slots, _selectClasses.getSelectUtilityClass, {});
};
const SelectRoot = (0, _styles.styled)('div', {
  name: 'JoySelect',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$vars$palette, _theme$variants2, _theme$variants3;
  const variantStyle = (_theme$variants = theme.variants[`${ownerState.variant}`]) == null ? void 0 : _theme$variants[ownerState.color];
  return [(0, _extends2.default)({
    '--Select-radius': theme.vars.radius.sm,
    '--Select-gap': '0.5rem',
    '--Select-placeholderOpacity': 0.5,
    '--Select-focusedThickness': theme.vars.focus.thickness
  }, ownerState.color === 'context' ? {
    '--Select-focusedHighlight': theme.vars.palette.focusVisible
  } : {
    '--Select-focusedHighlight': (_theme$vars$palette = theme.vars.palette[ownerState.color === 'neutral' ? 'primary' : ownerState.color]) == null ? void 0 : _theme$vars$palette[500]
  }, {
    '--Select-indicatorColor': variantStyle != null && variantStyle.backgroundColor ? variantStyle == null ? void 0 : variantStyle.color : theme.vars.palette.text.tertiary
  }, ownerState.size === 'sm' && {
    '--Select-minHeight': '2rem',
    '--Select-paddingInline': '0.5rem',
    '--Select-decoratorChildHeight': 'min(1.5rem, var(--Select-minHeight))',
    '--Icon-fontSize': '1.25rem'
  }, ownerState.size === 'md' && {
    '--Select-minHeight': '2.5rem',
    '--Select-paddingInline': '0.75rem',
    '--Select-decoratorChildHeight': 'min(2rem, var(--Select-minHeight))',
    '--Icon-fontSize': '1.5rem'
  }, ownerState.size === 'lg' && {
    '--Select-minHeight': '3rem',
    '--Select-paddingInline': '1rem',
    '--Select-decoratorChildHeight': 'min(2.375rem, var(--Select-minHeight))',
    '--Icon-fontSize': '1.75rem'
  }, {
    // variables for controlling child components
    '--Select-decoratorChildOffset': 'min(calc(var(--Select-paddingInline) - (var(--Select-minHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Select-decoratorChildHeight)) / 2), var(--Select-paddingInline))',
    '--_Select-paddingBlock': 'max((var(--Select-minHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Select-decoratorChildHeight)) / 2, 0px)',
    '--Select-decoratorChildRadius': 'max(var(--Select-radius) - var(--variant-borderWidth, 0px) - var(--_Select-paddingBlock), min(var(--_Select-paddingBlock) + var(--variant-borderWidth, 0px), var(--Select-radius) / 2))',
    '--Button-minHeight': 'var(--Select-decoratorChildHeight)',
    '--IconButton-size': 'var(--Select-decoratorChildHeight)',
    '--Button-radius': 'var(--Select-decoratorChildRadius)',
    '--IconButton-radius': 'var(--Select-decoratorChildRadius)',
    boxSizing: 'border-box',
    minWidth: 0,
    minHeight: 'var(--Select-minHeight)',
    position: 'relative',
    display: 'flex',
    alignItems: 'center',
    borderRadius: 'var(--Select-radius)',
    cursor: 'pointer'
  }, !variantStyle.backgroundColor && {
    backgroundColor: theme.vars.palette.background.surface
  }, ownerState.size && {
    paddingBlock: {
      sm: 2,
      md: 3,
      lg: 4
    }[ownerState.size] // the padding-block act as a minimum spacing between content and root element
  }, {
    paddingInline: `var(--Select-paddingInline)`,
    fontFamily: theme.vars.fontFamily.body,
    fontSize: theme.vars.fontSize.md
  }, ownerState.size === 'sm' && {
    fontSize: theme.vars.fontSize.sm
  }, {
    '&::before': {
      boxSizing: 'border-box',
      content: '""',
      display: 'block',
      position: 'absolute',
      pointerEvents: 'none',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      zIndex: 1,
      borderRadius: 'inherit',
      margin: 'calc(var(--variant-borderWidth, 0px) * -1)' // for outlined variant
    },

    [`&.${_selectClasses.default.focusVisible}`]: {
      '--Select-indicatorColor': variantStyle == null ? void 0 : variantStyle.color,
      '&::before': {
        boxShadow: `inset 0 0 0 var(--Select-focusedThickness) var(--Select-focusedHighlight)`
      }
    },
    [`&.${_selectClasses.default.disabled}`]: {
      '--Select-indicatorColor': 'inherit'
    }
  }), (0, _extends2.default)({}, variantStyle, {
    '&:hover': (_theme$variants2 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants2[ownerState.color],
    [`&.${_selectClasses.default.disabled}`]: (_theme$variants3 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants3[ownerState.color]
  })];
});
const SelectButton = (0, _styles.styled)('button', {
  name: 'JoySelect',
  slot: 'Button',
  overridesResolver: (props, styles) => styles.button
})(({
  ownerState
}) => (0, _extends2.default)({
  // reset user-agent button style
  border: 0,
  outline: 0,
  background: 'none',
  padding: 0,
  fontSize: 'inherit',
  color: 'inherit',
  alignSelf: 'stretch',
  // make children horizontally aligned
  display: 'flex',
  alignItems: 'center',
  flex: 1,
  fontFamily: 'inherit',
  cursor: 'pointer',
  whiteSpace: 'nowrap',
  overflow: 'auto'
}, (ownerState.value === null || ownerState.value === undefined) && {
  opacity: 'var(--Select-placeholderOpacity)'
}));
const SelectListbox = (0, _styles.styled)(_List.StyledList, {
  name: 'JoySelect',
  slot: 'Listbox',
  overridesResolver: (props, styles) => styles.listbox
})(({
  theme,
  ownerState
}) => {
  var _theme$variants4;
  const variantStyle = ownerState.color === 'context' ? undefined : (_theme$variants4 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants4[ownerState.color];
  return (0, _extends2.default)({
    '--focus-outline-offset': `calc(${theme.vars.focus.thickness} * -1)`,
    // to prevent the focus outline from being cut by overflow
    '--List-radius': theme.vars.radius.sm,
    '--ListItem-stickyBackground': (variantStyle == null ? void 0 : variantStyle.backgroundColor) || (variantStyle == null ? void 0 : variantStyle.background) || theme.vars.palette.background.popup,
    '--ListItem-stickyTop': 'calc(var(--List-padding, var(--ListDivider-gap)) * -1)'
  }, _ListProvider.scopedVariables, {
    minWidth: 'max-content',
    // prevent options from shrinking if some of them is wider than the Select's root.
    maxHeight: '44vh',
    // the best value from what I tried so far which does not cause screen flicker when listbox is open.
    overflow: 'auto',
    outline: 0,
    boxShadow: theme.shadow.md,
    zIndex: theme.vars.zIndex.popup
  }, !(variantStyle != null && variantStyle.backgroundColor) && {
    backgroundColor: theme.vars.palette.background.popup
  });
});
const SelectStartDecorator = (0, _styles.styled)('span', {
  name: 'JoySelect',
  slot: 'StartDecorator',
  overridesResolver: (props, styles) => styles.startDecorator
})(({
  theme,
  ownerState
}) => (0, _extends2.default)({
  '--Button-margin': '0 0 0 calc(var(--Select-decoratorChildOffset) * -1)',
  '--IconButton-margin': '0 0 0 calc(var(--Select-decoratorChildOffset) * -1)',
  '--Icon-margin': '0 0 0 calc(var(--Select-paddingInline) / -4)',
  display: 'inherit',
  alignItems: 'center',
  marginInlineEnd: 'var(--Select-gap)',
  color: theme.vars.palette.text.tertiary
}, ownerState.focusVisible && {
  color: 'var(--Select-focusedHighlight)'
}));
const SelectEndDecorator = (0, _styles.styled)('span', {
  name: 'JoySelect',
  slot: 'EndDecorator',
  overridesResolver: (props, styles) => styles.endDecorator
})(({
  theme,
  ownerState
}) => {
  var _theme$variants5;
  const variantStyle = (_theme$variants5 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants5[ownerState.color];
  return {
    '--Button-margin': '0 calc(var(--Select-decoratorChildOffset) * -1) 0 0',
    '--IconButton-margin': '0 calc(var(--Select-decoratorChildOffset) * -1) 0 0',
    '--Icon-margin': '0 calc(var(--Select-paddingInline) / -4) 0 0',
    display: 'inherit',
    alignItems: 'center',
    marginInlineStart: 'var(--Select-gap)',
    color: variantStyle == null ? void 0 : variantStyle.color
  };
});
const SelectIndicator = (0, _styles.styled)('span', {
  name: 'JoySelect',
  slot: 'Indicator'
})(({
  ownerState
}) => (0, _extends2.default)({}, ownerState.size === 'sm' && {
  '--Icon-fontSize': '1.125rem'
}, ownerState.size === 'md' && {
  '--Icon-fontSize': '1.25rem'
}, ownerState.size === 'lg' && {
  '--Icon-fontSize': '1.5rem'
}, {
  color: 'var(--Select-indicatorColor)',
  display: 'inherit',
  alignItems: 'center',
  marginInlineStart: 'var(--Select-gap)',
  marginInlineEnd: 'calc(var(--Select-paddingInline) / -4)',
  [`.${_selectClasses.default.endDecorator} + &`]: {
    marginInlineStart: 'calc(var(--Select-gap) / 2)'
  }
}));
/**
 *
 * Demos:
 *
 * - [Select](https://mui.com/joy-ui/react-select/)
 *
 * API:
 *
 * - [Select API](https://mui.com/joy-ui/api/select/)
 */
const Select = /*#__PURE__*/React.forwardRef(function Select(inProps, ref) {
  var _ref2, _inProps$disabled, _ref3, _inProps$size, _formControl$color;
  const props = (0, _styles.useThemeProps)({
    props: inProps,
    name: 'JoySelect'
  });
  const _ref = props,
    {
      action,
      autoFocus,
      children,
      defaultValue,
      defaultListboxOpen = false,
      disabled: disabledExternalProp,
      getSerializedValue = defaultFormValueProvider,
      placeholder,
      listboxId,
      listboxOpen: listboxOpenProp,
      onChange,
      onListboxOpenChange,
      onClose,
      renderValue: renderValueProp,
      value: valueProp,
      size: sizeProp = 'md',
      variant = 'outlined',
      color: colorProp = 'neutral',
      startDecorator,
      endDecorator,
      indicator = _Unfold || (_Unfold = /*#__PURE__*/(0, _jsxRuntime.jsx)(_Unfold2.default, {})),
      // props to forward to the button (all handlers should go through slotProps.button)
      'aria-describedby': ariaDescribedby,
      'aria-label': ariaLabel,
      'aria-labelledby': ariaLabelledby,
      id,
      name
    } = _ref,
    other = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);
  const formControl = React.useContext(_FormControlContext.default);
  if (process.env.NODE_ENV !== 'production') {
    const registerEffect = formControl == null ? void 0 : formControl.registerEffect;
    // eslint-disable-next-line react-hooks/rules-of-hooks
    React.useEffect(() => {
      if (registerEffect) {
        return registerEffect();
      }
      return undefined;
    }, [registerEffect]);
  }
  const disabledProp = (_ref2 = (_inProps$disabled = inProps.disabled) != null ? _inProps$disabled : formControl == null ? void 0 : formControl.disabled) != null ? _ref2 : disabledExternalProp;
  const size = (_ref3 = (_inProps$size = inProps.size) != null ? _inProps$size : formControl == null ? void 0 : formControl.size) != null ? _ref3 : sizeProp;
  const {
    getColor
  } = (0, _ColorInversion.useColorInversion)(variant);
  const color = getColor(inProps.color, formControl != null && formControl.error ? 'danger' : (_formControl$color = formControl == null ? void 0 : formControl.color) != null ? _formControl$color : colorProp);
  const renderValue = renderValueProp != null ? renderValueProp : defaultRenderSingleValue;
  const [anchorEl, setAnchorEl] = React.useState(null);
  const [groupedOptions, setGroupedOptions] = React.useState([]);
  const options = React.useMemo(() => (0, _SelectUnstyled.flattenOptionGroups)(groupedOptions), [groupedOptions]);
  const [listboxOpen, setListboxOpen] = (0, _utils.unstable_useControlled)({
    controlled: listboxOpenProp,
    default: defaultListboxOpen,
    name: 'SelectUnstyled',
    state: 'listboxOpen'
  });
  const rootRef = React.useRef(null);
  const buttonRef = React.useRef(null);
  const listboxRef = React.useRef(null);
  const handleRef = (0, _utils.unstable_useForkRef)(ref, rootRef);
  React.useImperativeHandle(action, () => ({
    focusVisible: () => {
      var _buttonRef$current;
      (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();
    }
  }), []);
  React.useEffect(() => {
    setGroupedOptions((0, _SelectUnstyled.getOptionsFromChildren)(children));
  }, [children]);
  React.useEffect(() => {
    setAnchorEl(rootRef.current);
  }, []);
  React.useEffect(() => {
    if (autoFocus) {
      buttonRef.current.focus();
    }
  }, [autoFocus]);
  const handleOpenChange = React.useCallback(isOpen => {
    setListboxOpen(isOpen);
    onListboxOpenChange == null ? void 0 : onListboxOpenChange(isOpen);
    if (!isOpen) {
      onClose == null ? void 0 : onClose();
    }
  }, [onClose, onListboxOpenChange, setListboxOpen]);
  const {
    buttonActive,
    buttonFocusVisible,
    contextValue,
    disabled,
    getButtonProps,
    getListboxProps,
    value
  } = (0, _useSelect.default)({
    buttonRef,
    defaultValue,
    disabled: disabledProp,
    listboxId,
    multiple: false,
    onChange,
    onOpenChange: handleOpenChange,
    open: listboxOpen,
    options,
    value: valueProp
  });
  const ownerState = (0, _extends2.default)({}, props, {
    active: buttonActive,
    defaultListboxOpen,
    disabled,
    focusVisible: buttonFocusVisible,
    open: listboxOpen,
    renderValue,
    value,
    size,
    variant,
    color
  });
  const classes = useUtilityClasses(ownerState);
  const selectedOption = React.useMemo(() => {
    var _options$find;
    return (_options$find = options.find(o => value === o.value)) != null ? _options$find : null;
  }, [options, value]);
  const [SlotRoot, rootProps] = (0, _useSlot.default)('root', {
    ref: handleRef,
    className: classes.root,
    elementType: SelectRoot,
    externalForwardedProps: other,
    getSlotProps: handlers => ({
      onMouseDown: event => {
        var _buttonRef$current2, _handlers$onMouseDown;
        if (!listboxOpen && !((_buttonRef$current2 = buttonRef.current) != null && _buttonRef$current2.contains(event.target)) && !event.isPropagationStopped()) {
          // show the popup if user click outside of the button element.
          // the close action is already handled by blur event.
          handleOpenChange(true);
        }
        (_handlers$onMouseDown = handlers.onMouseDown) == null ? void 0 : _handlers$onMouseDown.call(handlers, event);
      }
    }),
    ownerState
  });
  const [SlotButton, buttonProps] = (0, _useSlot.default)('button', {
    additionalProps: {
      'aria-describedby': ariaDescribedby != null ? ariaDescribedby : formControl == null ? void 0 : formControl['aria-describedby'],
      'aria-label': ariaLabel,
      'aria-labelledby': ariaLabelledby != null ? ariaLabelledby : formControl == null ? void 0 : formControl.labelId,
      id: id != null ? id : formControl == null ? void 0 : formControl.htmlFor,
      name
    },
    className: classes.button,
    elementType: SelectButton,
    externalForwardedProps: other,
    getSlotProps: getButtonProps,
    ownerState
  });
  const [SlotListbox, listboxProps] = (0, _useSlot.default)('listbox', {
    additionalProps: {
      ref: listboxRef,
      anchorEl,
      disablePortal: true,
      open: listboxOpen,
      placement: 'bottom'
    },
    className: classes.listbox,
    elementType: _PopperUnstyled.default,
    externalForwardedProps: other,
    getSlotProps: getListboxProps,
    ownerState: (0, _extends2.default)({}, ownerState, {
      nesting: false,
      row: false,
      wrap: false
    }),
    getSlotOwnerState: mergedProps => ({
      size: mergedProps.size || size,
      variant: mergedProps.variant || 'outlined',
      color: mergedProps.color || 'neutral',
      disableColorInversion: !mergedProps.disablePortal
    }),
    internalForwardedProps: {
      component: SelectListbox
    }
  });
  const [SlotStartDecorator, startDecoratorProps] = (0, _useSlot.default)('startDecorator', {
    className: classes.startDecorator,
    elementType: SelectStartDecorator,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = (0, _useSlot.default)('endDecorator', {
    className: classes.endDecorator,
    elementType: SelectEndDecorator,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotIndicator, indicatorProps] = (0, _useSlot.default)('indicator', {
    className: classes.indicator,
    elementType: SelectIndicator,
    externalForwardedProps: other,
    ownerState
  });
  const context = React.useMemo(() => (0, _extends2.default)({}, contextValue, {
    color
  }), [color, contextValue]);
  const modifiers = React.useMemo(() => [...defaultModifiers, ...(listboxProps.modifiers || [])], [listboxProps.modifiers]);
  let result = null;
  if (anchorEl) {
    var _listboxProps$ownerSt;
    result = /*#__PURE__*/(0, _jsxRuntime.jsx)(SlotListbox, (0, _extends2.default)({}, listboxProps, {
      className: (0, _clsx.default)(listboxProps.className, ((_listboxProps$ownerSt = listboxProps.ownerState) == null ? void 0 : _listboxProps$ownerSt.color) === 'context' && _selectClasses.default.colorContext),
      modifiers: modifiers,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_SelectUnstyled.SelectUnstyledContext.Provider, {
        value: context,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_ListProvider.default, {
          nested: true,
          children: children
        })
      })
    }));
    if (!listboxProps.disablePortal) {
      result =
      /*#__PURE__*/
      // For portal popup, the children should not inherit color inversion from the upper parent.
      (0, _jsxRuntime.jsx)(_ColorInversion.default.Provider, {
        value: undefined,
        children: result
      });
    }
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(React.Fragment, {
    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(SlotRoot, (0, _extends2.default)({}, rootProps, {
      children: [startDecorator && /*#__PURE__*/(0, _jsxRuntime.jsx)(SlotStartDecorator, (0, _extends2.default)({}, startDecoratorProps, {
        children: startDecorator
      })), /*#__PURE__*/(0, _jsxRuntime.jsx)(SlotButton, (0, _extends2.default)({}, buttonProps, {
        children: selectedOption ? renderValue(selectedOption) : placeholder
      })), endDecorator && /*#__PURE__*/(0, _jsxRuntime.jsx)(SlotEndDecorator, (0, _extends2.default)({}, endDecoratorProps, {
        children: endDecorator
      })), indicator && /*#__PURE__*/(0, _jsxRuntime.jsx)(SlotIndicator, (0, _extends2.default)({}, indicatorProps, {
        children: indicator
      }))]
    })), result, name && /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
      type: "hidden",
      name: name,
      value: getSerializedValue(selectedOption)
    })]
  });
});
process.env.NODE_ENV !== "production" ? Select.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * A ref for imperative actions. It currently only supports `focusVisible()` action.
   */
  action: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.shape({
    current: _propTypes.default.shape({
      focusVisible: _propTypes.default.func.isRequired
    })
  })]),
  /**
   * If `true`, the select element is focused during the first mount
   * @default false
   */
  autoFocus: _propTypes.default.bool,
  /**
   * @ignore
   */
  children: _propTypes.default.node,
  /**
   * @ignore
   */
  className: _propTypes.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['danger', 'info', 'neutral', 'primary', 'success', 'warning']), _propTypes.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: _propTypes.default.elementType,
  /**
   * If `true`, the select will be initially open.
   * @default false
   */
  defaultListboxOpen: _propTypes.default.bool,
  /**
   * The default selected value. Use when the component is not controlled.
   */
  defaultValue: _propTypes.default.any,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: _propTypes.default.bool,
  /**
   * Trailing adornment for the select.
   */
  endDecorator: _propTypes.default.node,
  /**
   * A function to convert the currently selected value to a string.
   * Used to set a value of a hidden input associated with the select,
   * so that the selected value can be posted with a form.
   */
  getSerializedValue: _propTypes.default.func,
  /**
   * The indicator(*) for the select.
   *    ________________
   *   [ value        * ]
   *    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   */
  indicator: _propTypes.default.node,
  /**
   * `id` attribute of the listbox element.
   * Also used to derive the `id` attributes of options.
   */
  listboxId: _propTypes.default.string,
  /**
   * Controls the open state of the select's listbox.
   * @default undefined
   */
  listboxOpen: _propTypes.default.bool,
  /**
   * Name of the element. For example used by the server to identify the fields in form submits.
   * If the name is provided, the component will render a hidden input element that can be submitted to a server.
   */
  name: _propTypes.default.string,
  /**
   * Callback fired when an option is selected.
   */
  onChange: _propTypes.default.func,
  /**
   * Triggered when focus leaves the menu and the menu should close.
   */
  onClose: _propTypes.default.func,
  /**
   * Callback fired when the component requests to be opened.
   * Use in controlled mode (see listboxOpen).
   */
  onListboxOpenChange: _propTypes.default.func,
  /**
   * Text to show when there is no selected value.
   */
  placeholder: _propTypes.default.node,
  /**
   * Function that customizes the rendering of the selected value.
   */
  renderValue: _propTypes.default.func,
  /**
   * The size of the component.
   */
  size: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['sm', 'md', 'lg']), _propTypes.default.string]),
  /**
   * Leading adornment for the select.
   */
  startDecorator: _propTypes.default.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
  /**
   * The selected value.
   * Set to `null` to deselect all options.
   */
  value: _propTypes.default.any,
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['outlined', 'plain', 'soft', 'solid']), _propTypes.default.string])
} : void 0;
var _default = Select;
exports.default = _default;