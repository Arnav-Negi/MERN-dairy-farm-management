import {
  ModalDialogSizeContext_default,
  ModalDialogVariantColorContext_default
} from "./chunk-3GOQBL2B.js";
import {
  StyledIconButton
} from "./chunk-EGRNOTNR.js";
import {
  CloseModalContext_default
} from "./chunk-ITHDNIXE.js";
import {
  createSvgIcon
} from "./chunk-CU2YQ2QE.js";
import {
  useButton
} from "./chunk-X6B3RTZ7.js";
import {
  useSlotProps
} from "./chunk-IQAHMJWP.js";
import {
  styled_default,
  useColorInversion,
  useThemeProps
} from "./chunk-JY7DKDII.js";
import {
  generateUtilityClass,
  generateUtilityClasses
} from "./chunk-WB6GU6HE.js";
import {
  _extends,
  _objectWithoutPropertiesLoose,
  capitalize,
  composeClasses,
  init_esm,
  init_extends,
  init_objectWithoutPropertiesLoose,
  require_prop_types
} from "./chunk-5VTSBEOX.js";
import {
  require_jsx_runtime
} from "./chunk-TNQUW4IY.js";
import {
  require_react
} from "./chunk-JFTBQ7A7.js";
import {
  __toESM
} from "./chunk-AC2VUBZ6.js";

// node_modules/@mui/joy/ModalClose/ModalClose.js
init_objectWithoutPropertiesLoose();
init_extends();
var React2 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
init_esm();

// node_modules/@mui/joy/ModalClose/modalCloseClasses.js
function getModalCloseUtilityClass(slot) {
  return generateUtilityClass("MuiModalClose", slot);
}
var modalCloseClasses = generateUtilityClasses("MuiModalClose", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg"]);
var modalCloseClasses_default = modalCloseClasses;

// node_modules/@mui/joy/internal/svg-icons/Close.js
var React = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var Close_default = createSvgIcon((0, import_jsx_runtime.jsx)("path", {
  d: "M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
}), "Close");

// node_modules/@mui/joy/ModalClose/ModalClose.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var _CloseIcon;
var _excluded = ["component", "color", "variant", "size", "onClick"];
var useUtilityClasses = (ownerState) => {
  const {
    variant,
    color,
    disabled,
    focusVisible,
    size
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", focusVisible && "focusVisible", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getModalCloseUtilityClass, {});
};
var ModalCloseRoot = styled_default(StyledIconButton, {
  name: "JoyModalClose",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState,
  theme
}) => {
  var _theme$variants, _theme$variants2;
  return _extends({}, ownerState.size === "sm" && {
    "--IconButton-size": "28px"
  }, ownerState.size === "md" && {
    "--IconButton-size": "36px"
  }, ownerState.size === "lg" && {
    "--IconButton-size": "40px"
  }, {
    position: "absolute",
    top: `var(--ModalClose-inset, ${theme.spacing(1)})`,
    right: `var(--ModalClose-inset, ${theme.spacing(1)})`,
    borderRadius: `var(--ModalClose-radius, ${theme.vars.radius.sm})`
  }, !((_theme$variants = theme.variants[ownerState.variant]) != null && (_theme$variants2 = _theme$variants[ownerState.color]) != null && _theme$variants2.backgroundColor) && {
    color: theme.vars.palette.text.secondary
  });
});
var modalDialogVariantMapping = {
  plain: "plain",
  outlined: "plain",
  soft: "soft",
  solid: "solid"
};
var ModalClose = React2.forwardRef(function ModalClose2(inProps, ref) {
  var _ref, _inProps$variant, _modalDialogVariantCo, _ref2, _inProps$size;
  const props = useThemeProps({
    props: inProps,
    name: "JoyModalClose"
  });
  const {
    component = "button",
    color: colorProp = "neutral",
    variant: variantProp = "plain",
    size: sizeProp = "md",
    onClick
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const closeModalContext = React2.useContext(CloseModalContext_default);
  const modalDialogVariantColor = React2.useContext(ModalDialogVariantColorContext_default);
  const variant = (_ref = (_inProps$variant = inProps.variant) != null ? _inProps$variant : modalDialogVariantMapping[modalDialogVariantColor == null ? void 0 : modalDialogVariantColor.variant]) != null ? _ref : variantProp;
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, (_modalDialogVariantCo = modalDialogVariantColor == null ? void 0 : modalDialogVariantColor.color) != null ? _modalDialogVariantCo : colorProp);
  const modalDialogSize = React2.useContext(ModalDialogSizeContext_default);
  const size = (_ref2 = (_inProps$size = inProps.size) != null ? _inProps$size : modalDialogSize) != null ? _ref2 : sizeProp;
  const {
    focusVisible,
    getRootProps
  } = useButton(_extends({}, props, {
    ref
  }));
  const ownerState = _extends({}, props, {
    color,
    component,
    variant,
    size,
    focusVisible
  });
  const classes = useUtilityClasses(ownerState);
  const rootProps = useSlotProps({
    elementType: ModalCloseRoot,
    getSlotProps: getRootProps,
    externalSlotProps: _extends({
      onClick: (event) => {
        closeModalContext == null ? void 0 : closeModalContext(event, "closeClick");
        onClick == null ? void 0 : onClick(event);
      }
    }, other),
    additionalProps: {
      as: component
    },
    className: classes.root,
    ownerState
  });
  return (0, import_jsx_runtime2.jsx)(ModalCloseRoot, _extends({}, rootProps, {
    children: _CloseIcon || (_CloseIcon = (0, import_jsx_runtime2.jsx)(Close_default, {}))
  }));
});
true ? ModalClose.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * @ignore
   */
  children: import_prop_types.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types.default.elementType,
  /**
   * @ignore
   */
  onClick: import_prop_types.default.func,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["sm", "md", "lg"]), import_prop_types.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types.default.string])
} : void 0;
var ModalClose_default = ModalClose;

export {
  Close_default,
  getModalCloseUtilityClass,
  modalCloseClasses_default,
  ModalClose_default
};
//# sourceMappingURL=chunk-QKHZPEWB.js.map
