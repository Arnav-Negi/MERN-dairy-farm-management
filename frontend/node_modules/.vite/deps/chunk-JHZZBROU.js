import {
  ModalDialogSizeContext_default,
  ModalDialogVariantColorContext_default
} from "./chunk-3GOQBL2B.js";
import {
  SheetRoot
} from "./chunk-Z6UIMA6N.js";
import {
  styled_default,
  useColorInversion,
  useThemeProps
} from "./chunk-JY7DKDII.js";
import {
  generateUtilityClass,
  generateUtilityClasses
} from "./chunk-WB6GU6HE.js";
import {
  _extends,
  _objectWithoutPropertiesLoose,
  capitalize,
  clsx_m_default,
  composeClasses,
  init_clsx_m,
  init_esm,
  init_extends,
  init_objectWithoutPropertiesLoose,
  isMuiElement,
  require_prop_types
} from "./chunk-5VTSBEOX.js";
import {
  require_jsx_runtime
} from "./chunk-TNQUW4IY.js";
import {
  require_react
} from "./chunk-JFTBQ7A7.js";
import {
  __toESM
} from "./chunk-AC2VUBZ6.js";

// node_modules/@mui/joy/ModalDialog/ModalDialog.js
init_objectWithoutPropertiesLoose();
init_extends();
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
init_clsx_m();
init_esm();

// node_modules/@mui/joy/ModalDialog/modalDialogClasses.js
function getModalDialogUtilityClass(slot) {
  return generateUtilityClass("MuiModalDialog", slot);
}
var modalDialogClasses = generateUtilityClasses("MuiModalDialog", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg", "layoutCenter", "layoutFullscreen"]);
var modalDialogClasses_default = modalDialogClasses;

// node_modules/@mui/joy/ModalDialog/ModalDialog.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var _excluded = ["className", "children", "color", "component", "variant", "size", "layout"];
var useUtilityClasses = (ownerState) => {
  const {
    variant,
    color,
    size,
    layout
  } = ownerState;
  const slots = {
    root: ["root", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`, layout && `layout${capitalize(layout)}`]
  };
  return composeClasses(slots, getModalDialogUtilityClass, {});
};
var ModalDialogRoot = styled_default(SheetRoot, {
  name: "JoyModalDialog",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => _extends({
  // Divider integration
  "--Divider-inset": "calc(-1 * var(--ModalDialog-padding))",
  "--ModalClose-radius": "max((var(--ModalDialog-radius) - var(--variant-borderWidth, 0px)) - var(--ModalClose-inset), min(var(--ModalClose-inset) / 2, (var(--ModalDialog-radius) - var(--variant-borderWidth, 0px)) / 2))"
}, ownerState.size === "sm" && {
  "--ModalDialog-padding": theme.spacing(2),
  "--ModalDialog-radius": theme.vars.radius.sm,
  "--ModalDialog-gap": theme.spacing(0.75),
  "--ModalDialog-titleOffset": theme.spacing(0.25),
  "--ModalDialog-descriptionOffset": theme.spacing(0.25),
  "--ModalClose-inset": theme.spacing(1.25),
  fontSize: theme.vars.fontSize.sm
}, ownerState.size === "md" && {
  "--ModalDialog-padding": theme.spacing(2.5),
  "--ModalDialog-radius": theme.vars.radius.md,
  "--ModalDialog-gap": theme.spacing(1.5),
  "--ModalDialog-titleOffset": theme.spacing(0.25),
  "--ModalDialog-descriptionOffset": theme.spacing(0.75),
  "--ModalClose-inset": theme.spacing(1.5),
  fontSize: theme.vars.fontSize.md
}, ownerState.size === "lg" && {
  "--ModalDialog-padding": theme.spacing(3),
  "--ModalDialog-radius": theme.vars.radius.md,
  "--ModalDialog-gap": theme.spacing(2),
  "--ModalDialog-titleOffset": theme.spacing(0.75),
  "--ModalDialog-descriptionOffset": theme.spacing(1),
  "--ModalClose-inset": theme.spacing(1.5),
  fontSize: theme.vars.fontSize.lg
}, {
  boxSizing: "border-box",
  boxShadow: theme.shadow.md,
  borderRadius: "var(--ModalDialog-radius)",
  fontFamily: theme.vars.fontFamily.body,
  lineHeight: theme.vars.lineHeight.md,
  padding: "var(--ModalDialog-padding)",
  minWidth: "min(calc(100vw - 2 * var(--ModalDialog-padding)), var(--ModalDialog-minWidth, 300px))",
  outline: 0,
  position: "absolute",
  display: "flex",
  flexDirection: "column"
}, ownerState.layout === "fullscreen" && {
  top: 0,
  left: 0,
  right: 0,
  bottom: 0,
  border: 0,
  borderRadius: 0
}, ownerState.layout === "center" && {
  top: "50%",
  left: "50%",
  transform: "translate(-50%, -50%)",
  maxHeight: "calc(100% - 2 * var(--ModalDialog-padding))"
}, {
  [`& [id="${ownerState["aria-labelledby"]}"]`]: {
    "--Typography-margin": "calc(-1 * var(--ModalDialog-titleOffset)) 0 var(--ModalDialog-gap) 0",
    "--Typography-fontSize": "1.125em",
    [`& + [id="${ownerState["aria-describedby"]}"]`]: {
      "--private_ModalDialog-descriptionOffset": "calc(-1 * var(--ModalDialog-descriptionOffset))"
    }
  },
  [`& [id="${ownerState["aria-describedby"]}"]`]: {
    "--Typography-fontSize": "1em",
    "--Typography-margin": "var(--private_ModalDialog-descriptionOffset, var(--ModalDialog-gap)) 0 0 0",
    "&:not(:last-child)": {
      // create spacing between description and the next element.
      "--Typography-margin": "var(--private_ModalDialog-descriptionOffset, var(--ModalDialog-gap)) 0 var(--ModalDialog-gap) 0"
    }
  }
}));
var ModalDialog = React.forwardRef(function ModalDialog2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyModalDialog"
  });
  const {
    className,
    children,
    color: colorProp = "neutral",
    component = "div",
    variant = "outlined",
    size = "md",
    layout = "center"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const ownerState = _extends({}, props, {
    color,
    component,
    layout,
    size,
    variant
  });
  const classes = useUtilityClasses(ownerState);
  const contextValue = React.useMemo(() => ({
    variant,
    color: color === "context" ? void 0 : color
  }), [color, variant]);
  return (0, import_jsx_runtime.jsx)(ModalDialogSizeContext_default.Provider, {
    value: size,
    children: (0, import_jsx_runtime.jsx)(ModalDialogVariantColorContext_default.Provider, {
      value: contextValue,
      children: (0, import_jsx_runtime.jsx)(ModalDialogRoot, _extends({
        as: component,
        ownerState,
        className: clsx_m_default(classes.root, className),
        ref,
        role: "dialog",
        "aria-modal": "true"
      }, other, {
        children: React.Children.map(children, (child) => {
          if (!React.isValidElement(child)) {
            return child;
          }
          if (isMuiElement(child, ["Divider"])) {
            const extraProps = {};
            extraProps.inset = "inset" in child.props ? child.props.inset : "context";
            return React.cloneElement(child, extraProps);
          }
          return child;
        })
      }))
    })
  });
});
true ? ModalDialog.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: import_prop_types.default.node,
  /**
   * @ignore
   */
  className: import_prop_types.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types.default.elementType,
  /**
   * The layout of the dialog
   * @default 'center'
   */
  layout: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["center", "fullscreen"]), import_prop_types.default.string]),
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["sm", "md", "lg"]), import_prop_types.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types.default.string])
} : void 0;
var ModalDialog_default = ModalDialog;

export {
  getModalDialogUtilityClass,
  modalDialogClasses_default,
  ModalDialog_default
};
//# sourceMappingURL=chunk-JHZZBROU.js.map
