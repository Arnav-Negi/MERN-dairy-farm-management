import {
  FormControlContext_default
} from "./chunk-PSVXF2QT.js";
import {
  useInput
} from "./chunk-OLIBE7IJ.js";
import {
  useSlot
} from "./chunk-WWEB4ZTA.js";
import {
  styled_default,
  useColorInversion,
  useThemeProps
} from "./chunk-JY7DKDII.js";
import {
  generateUtilityClass,
  generateUtilityClasses
} from "./chunk-WB6GU6HE.js";
import {
  _extends,
  _objectWithoutPropertiesLoose,
  capitalize,
  composeClasses,
  init_esm,
  init_extends,
  init_objectWithoutPropertiesLoose,
  require_prop_types
} from "./chunk-5VTSBEOX.js";
import {
  require_jsx_runtime
} from "./chunk-TNQUW4IY.js";
import {
  require_react
} from "./chunk-JFTBQ7A7.js";
import {
  __toESM
} from "./chunk-AC2VUBZ6.js";

// node_modules/@mui/joy/Input/Input.js
init_objectWithoutPropertiesLoose();
init_extends();
var React2 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
init_esm();

// node_modules/@mui/joy/Input/inputClasses.js
function getInputUtilityClass(slot) {
  return generateUtilityClass("MuiInput", slot);
}
var inputClasses = generateUtilityClasses("MuiInput", ["root", "input", "formControl", "focused", "disabled", "error", "adornedStart", "adornedEnd", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "fullWidth", "startDecorator", "endDecorator"]);
var inputClasses_default = inputClasses;

// node_modules/@mui/joy/Input/useForwardedInput.js
init_extends();
init_objectWithoutPropertiesLoose();
var React = __toESM(require_react());
var _excluded = ["aria-describedby", "aria-label", "aria-labelledby", "autoComplete", "autoFocus", "className", "defaultValue", "disabled", "error", "id", "name", "onClick", "onChange", "onKeyDown", "onKeyUp", "onFocus", "onBlur", "placeholder", "readOnly", "required", "type", "value"];
function useForwardedInput(props, classes) {
  const formControl = React.useContext(FormControlContext_default);
  const {
    "aria-describedby": ariaDescribedby,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    autoComplete,
    autoFocus,
    className,
    defaultValue,
    disabled: disabledProp,
    error: errorProp,
    id,
    name,
    onClick,
    onChange,
    onKeyDown,
    onKeyUp,
    onFocus,
    onBlur,
    placeholder,
    readOnly,
    required,
    type,
    value
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const {
    getRootProps,
    getInputProps,
    focused,
    error,
    disabled
  } = useInput({
    disabled: disabledProp != null ? disabledProp : formControl == null ? void 0 : formControl.disabled,
    defaultValue,
    error: errorProp,
    onBlur,
    onClick,
    onChange,
    onFocus,
    required: required != null ? required : formControl == null ? void 0 : formControl.required,
    value
  });
  const rootStateClasses = {
    [classes.disabled]: disabled,
    [classes.error]: error,
    [classes.focused]: focused,
    [classes.formControl]: Boolean(formControl),
    [className]: className
  };
  const inputStateClasses = {
    [classes.disabled]: disabled
  };
  const propsToForward = {
    "aria-describedby": ariaDescribedby,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    autoComplete,
    autoFocus,
    disabled,
    id,
    onKeyDown,
    onKeyUp,
    name,
    placeholder,
    readOnly,
    type
  };
  return _extends({
    formControl,
    propsToForward,
    rootStateClasses,
    inputStateClasses,
    getRootProps,
    getInputProps,
    focused,
    error,
    disabled
  }, other);
}

// node_modules/@mui/joy/Input/Input.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var _excluded2 = ["propsToForward", "rootStateClasses", "inputStateClasses", "getRootProps", "getInputProps", "formControl", "focused", "error", "disabled", "fullWidth", "size", "color", "variant", "startDecorator", "endDecorator"];
var useUtilityClasses = (ownerState) => {
  const {
    disabled,
    fullWidth,
    variant,
    color,
    size
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", fullWidth && "fullWidth", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`],
    input: ["input"],
    startDecorator: ["startDecorator"],
    endDecorator: ["endDecorator"]
  };
  return composeClasses(slots, getInputUtilityClass, {});
};
var StyledInputRoot = styled_default("div")(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$vars$palette, _variantStyle$backgro, _theme$variants2, _theme$variants3;
  const variantStyle = (_theme$variants = theme.variants[`${ownerState.variant}`]) == null ? void 0 : _theme$variants[ownerState.color];
  return [_extends({
    "--Input-radius": theme.vars.radius.sm,
    "--Input-gap": "0.5rem",
    "--Input-placeholderColor": "inherit",
    "--Input-placeholderOpacity": 0.5,
    "--Input-focusedThickness": theme.vars.focus.thickness
  }, ownerState.color === "context" ? {
    "--Input-focusedHighlight": theme.vars.palette.focusVisible
  } : {
    "--Input-focusedHighlight": (_theme$vars$palette = theme.vars.palette[ownerState.color === "neutral" ? "primary" : ownerState.color]) == null ? void 0 : _theme$vars$palette[500]
  }, ownerState.size === "sm" && {
    "--Input-minHeight": "2rem",
    "--Input-paddingInline": "0.5rem",
    "--Input-decoratorChildHeight": "min(1.5rem, var(--Input-minHeight))",
    "--Icon-fontSize": "1.25rem"
  }, ownerState.size === "md" && {
    "--Input-minHeight": "2.5rem",
    "--Input-paddingInline": "0.75rem",
    "--Input-decoratorChildHeight": "min(2rem, var(--Input-minHeight))",
    "--Icon-fontSize": "1.5rem"
  }, ownerState.size === "lg" && {
    "--Input-minHeight": "3rem",
    "--Input-paddingInline": "1rem",
    "--Input-gap": "0.75rem",
    "--Input-decoratorChildHeight": "min(2.375rem, var(--Input-minHeight))",
    "--Icon-fontSize": "1.75rem"
  }, {
    // variables for controlling child components
    "--Input-decoratorChildOffset": "min(calc(var(--Input-paddingInline) - (var(--Input-minHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Input-decoratorChildHeight)) / 2), var(--Input-paddingInline))",
    "--_Input-paddingBlock": "max((var(--Input-minHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Input-decoratorChildHeight)) / 2, 0px)",
    "--Input-decoratorChildRadius": "max(var(--Input-radius) - var(--variant-borderWidth, 0px) - var(--_Input-paddingBlock), min(var(--_Input-paddingBlock) + var(--variant-borderWidth, 0px), var(--Input-radius) / 2))",
    "--Button-minHeight": "var(--Input-decoratorChildHeight)",
    "--IconButton-size": "var(--Input-decoratorChildHeight)",
    "--Button-radius": "var(--Input-decoratorChildRadius)",
    "--IconButton-radius": "var(--Input-decoratorChildRadius)",
    boxSizing: "border-box",
    minWidth: 0,
    minHeight: "var(--Input-minHeight)"
  }, ownerState.fullWidth && {
    width: "100%"
  }, {
    cursor: "text",
    position: "relative",
    display: "flex",
    alignItems: "center",
    paddingInline: `var(--Input-paddingInline)`,
    borderRadius: "var(--Input-radius)",
    fontFamily: theme.vars.fontFamily.body,
    fontSize: theme.vars.fontSize.md
  }, ownerState.size === "sm" && {
    fontSize: theme.vars.fontSize.sm
  }, {
    "&:before": {
      boxSizing: "border-box",
      content: '""',
      display: "block",
      position: "absolute",
      pointerEvents: "none",
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      zIndex: 1,
      borderRadius: "inherit",
      margin: "calc(var(--variant-borderWidth, 0px) * -1)"
      // for outlined variant
    }
  }), _extends({}, variantStyle, {
    backgroundColor: (_variantStyle$backgro = variantStyle == null ? void 0 : variantStyle.backgroundColor) != null ? _variantStyle$backgro : theme.vars.palette.background.surface,
    [`&:hover:not(.${inputClasses_default.focused})`]: _extends({}, (_theme$variants2 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants2[ownerState.color], {
      backgroundColor: null
      // it is not common to change background on hover for Input
    }),
    [`&.${inputClasses_default.disabled}`]: (_theme$variants3 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants3[ownerState.color],
    [`&.${inputClasses_default.focused}`]: {
      "&:before": {
        boxShadow: `inset 0 0 0 var(--Input-focusedThickness) var(--Input-focusedHighlight)`
      }
    }
  })];
});
var StyledInputHtml = styled_default("input")(({
  ownerState
}) => ({
  border: "none",
  // remove the native input width
  minWidth: 0,
  // remove the native input width
  outline: 0,
  // remove the native input outline
  padding: 0,
  // remove the native input padding
  flex: 1,
  alignSelf: "stretch",
  color: "inherit",
  backgroundColor: "transparent",
  fontFamily: "inherit",
  fontSize: "inherit",
  fontStyle: "inherit",
  fontWeight: "inherit",
  lineHeight: "inherit",
  textOverflow: "ellipsis",
  "&:-webkit-autofill": _extends({
    paddingInline: "var(--Input-paddingInline)"
  }, !ownerState.startDecorator && {
    marginInlineStart: "calc(-1 * var(--Input-paddingInline))",
    paddingInlineStart: "var(--Input-paddingInline)",
    borderTopLeftRadius: "calc(var(--Input-radius) - var(--variant-borderWidth, 0px))",
    borderBottomLeftRadius: "calc(var(--Input-radius) - var(--variant-borderWidth, 0px))"
  }, !ownerState.endDecorator && {
    marginInlineEnd: "calc(-1 * var(--Input-paddingInline))",
    paddingInlineEnd: "var(--Input-paddingInline)",
    borderTopRightRadius: "calc(var(--Input-radius) - var(--variant-borderWidth, 0px))",
    borderBottomRightRadius: "calc(var(--Input-radius) - var(--variant-borderWidth, 0px))"
  }),
  "&::-webkit-input-placeholder": {
    color: "var(--Input-placeholderColor)",
    opacity: "var(--Input-placeholderOpacity)"
  },
  "&::-moz-placeholder": {
    // Firefox 19+
    color: "var(--Input-placeholderColor)",
    opacity: "var(--Input-placeholderOpacity)"
  },
  "&:-ms-input-placeholder": {
    // IE11
    color: "var(--Input-placeholderColor)",
    opacity: "var(--Input-placeholderOpacity)"
  },
  "&::-ms-input-placeholder": {
    // Edge
    color: "var(--Input-placeholderColor)",
    opacity: "var(--Input-placeholderOpacity)"
  }
}));
var StyledInputStartDecorator = styled_default("span")(({
  theme,
  ownerState
}) => {
  var _theme$variants4, _theme$variants5, _theme$variants6, _theme$variants7;
  return _extends({
    "--Button-margin": "0 0 0 calc(var(--Input-decoratorChildOffset) * -1)",
    "--IconButton-margin": "0 0 0 calc(var(--Input-decoratorChildOffset) * -1)",
    "--Icon-margin": "0 0 0 calc(var(--Input-paddingInline) / -4)",
    display: "inherit",
    alignItems: "center",
    paddingBlock: "var(--unstable_InputPaddingBlock)",
    // for wrapping Autocomplete's tags
    flexWrap: "wrap",
    // for wrapping Autocomplete's tags
    marginInlineEnd: "var(--Input-gap)",
    color: theme.vars.palette.text.tertiary,
    cursor: "initial"
  }, ownerState.focused && {
    color: (_theme$variants4 = theme.variants[ownerState.variant]) == null ? void 0 : (_theme$variants5 = _theme$variants4[ownerState.color]) == null ? void 0 : _theme$variants5.color
  }, ownerState.disabled && {
    color: (_theme$variants6 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : (_theme$variants7 = _theme$variants6[ownerState.color]) == null ? void 0 : _theme$variants7.color
  });
});
var StyledInputEndDecorator = styled_default("span")(({
  theme,
  ownerState
}) => {
  var _theme$variants8, _theme$variants9, _theme$variants10, _theme$variants11;
  return _extends({
    "--Button-margin": "0 calc(var(--Input-decoratorChildOffset) * -1) 0 0",
    "--IconButton-margin": "0 calc(var(--Input-decoratorChildOffset) * -1) 0 0",
    "--Icon-margin": "0 calc(var(--Input-paddingInline) / -4) 0 0",
    display: "inherit",
    alignItems: "center",
    marginInlineStart: "var(--Input-gap)",
    color: (_theme$variants8 = theme.variants[ownerState.variant]) == null ? void 0 : (_theme$variants9 = _theme$variants8[ownerState.color]) == null ? void 0 : _theme$variants9.color,
    cursor: "initial"
  }, ownerState.disabled && {
    color: (_theme$variants10 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : (_theme$variants11 = _theme$variants10[ownerState.color]) == null ? void 0 : _theme$variants11.color
  });
});
var InputRoot = styled_default(StyledInputRoot, {
  name: "JoyInput",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({});
var InputInput = styled_default(StyledInputHtml, {
  name: "JoyInput",
  slot: "Input",
  overridesResolver: (props, styles) => styles.input
})({});
var InputStartDecorator = styled_default(StyledInputStartDecorator, {
  name: "JoyInput",
  slot: "StartDecorator",
  overridesResolver: (props, styles) => styles.startDecorator
})({});
var InputEndDecorator = styled_default(StyledInputEndDecorator, {
  name: "JoyInput",
  slot: "EndDecorator",
  overridesResolver: (props, styles) => styles.endDecorator
})({});
var Input = React2.forwardRef(function Input2(inProps, ref) {
  var _ref, _inProps$error, _ref2, _inProps$size, _formControl$color;
  const props = useThemeProps({
    props: inProps,
    name: "JoyInput"
  });
  const _useForwardedInput = useForwardedInput(props, inputClasses_default), {
    propsToForward,
    rootStateClasses,
    inputStateClasses,
    getRootProps,
    getInputProps,
    formControl,
    focused,
    error: errorProp = false,
    disabled,
    fullWidth = false,
    size: sizeProp = "md",
    color: colorProp = "neutral",
    variant = "outlined",
    startDecorator,
    endDecorator
  } = _useForwardedInput, other = _objectWithoutPropertiesLoose(_useForwardedInput, _excluded2);
  if (true) {
    const registerEffect = formControl == null ? void 0 : formControl.registerEffect;
    React2.useEffect(() => {
      if (registerEffect) {
        return registerEffect();
      }
      return void 0;
    }, [registerEffect]);
  }
  const error = (_ref = (_inProps$error = inProps.error) != null ? _inProps$error : formControl == null ? void 0 : formControl.error) != null ? _ref : errorProp;
  const size = (_ref2 = (_inProps$size = inProps.size) != null ? _inProps$size : formControl == null ? void 0 : formControl.size) != null ? _ref2 : sizeProp;
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, error ? "danger" : (_formControl$color = formControl == null ? void 0 : formControl.color) != null ? _formControl$color : colorProp);
  const ownerState = _extends({}, props, {
    fullWidth,
    color,
    disabled,
    error,
    focused,
    size,
    variant
  });
  const classes = useUtilityClasses(ownerState);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: [classes.root, rootStateClasses],
    elementType: InputRoot,
    getSlotProps: getRootProps,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotInput, inputProps] = useSlot("input", _extends({}, formControl && {
    additionalProps: {
      id: formControl.htmlFor,
      "aria-describedby": formControl["aria-describedby"]
    }
  }, {
    className: [classes.input, inputStateClasses],
    elementType: InputInput,
    getSlotProps: getInputProps,
    internalForwardedProps: propsToForward,
    externalForwardedProps: other,
    ownerState
  }));
  const [SlotStartDecorator, startDecoratorProps] = useSlot("startDecorator", {
    className: classes.startDecorator,
    elementType: InputStartDecorator,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot("endDecorator", {
    className: classes.endDecorator,
    elementType: InputEndDecorator,
    externalForwardedProps: other,
    ownerState
  });
  return (0, import_jsx_runtime2.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [startDecorator && (0, import_jsx_runtime.jsx)(SlotStartDecorator, _extends({}, startDecoratorProps, {
      children: startDecorator
    })), (0, import_jsx_runtime.jsx)(SlotInput, _extends({}, inputProps)), endDecorator && (0, import_jsx_runtime.jsx)(SlotEndDecorator, _extends({}, endDecoratorProps, {
      children: endDecorator
    }))]
  }));
});
true ? Input.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * @ignore
   */
  autoComplete: import_prop_types.default.string,
  /**
   * @ignore
   */
  autoFocus: import_prop_types.default.bool,
  /**
   * @ignore
   */
  children: import_prop_types.default.node,
  /**
   * Class name applied to the root element.
   */
  className: import_prop_types.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types.default.string]),
  /**
   * @ignore
   */
  defaultValue: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.string), import_prop_types.default.number, import_prop_types.default.string]),
  /**
   * @ignore
   */
  disabled: import_prop_types.default.bool,
  /**
   * Trailing adornment for this input.
   */
  endDecorator: import_prop_types.default.node,
  /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   * @default false
   */
  error: import_prop_types.default.bool,
  /**
   * If `true`, the button will take up the full width of its container.
   * @default false
   */
  fullWidth: import_prop_types.default.bool,
  /**
   * @ignore
   */
  id: import_prop_types.default.string,
  /**
   * @ignore
   */
  name: import_prop_types.default.string,
  /**
   * @ignore
   */
  onChange: import_prop_types.default.func,
  /**
   * @ignore
   */
  placeholder: import_prop_types.default.string,
  /**
   * @ignore
   */
  readOnly: import_prop_types.default.bool,
  /**
   * @ignore
   */
  required: import_prop_types.default.bool,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["sm", "md", "lg"]), import_prop_types.default.string]),
  /**
   * Leading adornment for this input.
   */
  startDecorator: import_prop_types.default.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
  /**
   * @ignore
   */
  value: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.string), import_prop_types.default.number, import_prop_types.default.string]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types.default.string])
} : void 0;
var Input_default = Input;

export {
  getInputUtilityClass,
  inputClasses_default,
  useForwardedInput,
  StyledInputRoot,
  StyledInputHtml,
  StyledInputStartDecorator,
  StyledInputEndDecorator,
  Input_default
};
//# sourceMappingURL=chunk-IRNCTHPL.js.map
