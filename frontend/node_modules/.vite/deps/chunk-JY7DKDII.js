import {
  defaultTheme_default
} from "./chunk-WB6GU6HE.js";
import {
  _extends,
  createStyled,
  init_esm2 as init_esm,
  init_extends,
  useThemeProps,
  useTheme_default
} from "./chunk-5VTSBEOX.js";
import {
  require_jsx_runtime
} from "./chunk-TNQUW4IY.js";
import {
  require_react
} from "./chunk-JFTBQ7A7.js";
import {
  __toESM
} from "./chunk-AC2VUBZ6.js";

// node_modules/@mui/joy/styles/styled.js
init_esm();
var styled = createStyled({
  defaultTheme: defaultTheme_default
});
var styled_default = styled;

// node_modules/@mui/joy/styles/useThemeProps.js
init_extends();
init_esm();
function useThemeProps2({
  props,
  name
}) {
  return useThemeProps({
    props,
    name,
    defaultTheme: _extends({}, defaultTheme_default, {
      components: {}
    })
  });
}

// node_modules/@mui/joy/styles/ColorInversion.js
var React = __toESM(require_react());
init_esm();
var import_jsx_runtime = __toESM(require_jsx_runtime());
var ColorInversion = React.createContext(void 0);
var useColorInversion = (childVariant) => {
  const overriableVariants = React.useContext(ColorInversion);
  return {
    /**
     * Resolve the `color` value for the component.
     * @param {ColorPaletteProp | 'inherit' | undefined} instanceColorProp The color defined on the instance.
     * @param {ColorPaletteProp | 'inherit' | undefined} defaultColorProp The default color to use when variant inversion is not enabled.
     */
    getColor: (instanceColorProp, defaultColorProp) => {
      if (overriableVariants && childVariant) {
        if (overriableVariants.includes(childVariant)) {
          return instanceColorProp || "context";
        }
      }
      return instanceColorProp || defaultColorProp;
    }
  };
};
function ColorInversionProvider({
  children,
  variant
}) {
  var _theme$colorInversion;
  const theme = useTheme_default(defaultTheme_default);
  return (0, import_jsx_runtime.jsx)(ColorInversion.Provider, {
    value: variant ? (
      // `theme` could come from other emotion/styled-components context.
      ((_theme$colorInversion = theme.colorInversionConfig) != null ? _theme$colorInversion : defaultTheme_default.colorInversionConfig)[variant]
    ) : void 0,
    children
  });
}
var ColorInversion_default = ColorInversion;

export {
  styled_default,
  useThemeProps2 as useThemeProps,
  useColorInversion,
  ColorInversionProvider,
  ColorInversion_default
};
//# sourceMappingURL=chunk-JY7DKDII.js.map
