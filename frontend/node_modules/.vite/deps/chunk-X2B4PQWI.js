import {
  createSvgIcon
} from "./chunk-CU2YQ2QE.js";
import {
  FormControlContext_default
} from "./chunk-PSVXF2QT.js";
import {
  TypographyNestedContext
} from "./chunk-ZMUUEFLB.js";
import {
  useSwitch
} from "./chunk-X7A2QJ3M.js";
import {
  useSlot
} from "./chunk-WWEB4ZTA.js";
import {
  styled_default,
  useColorInversion,
  useThemeProps
} from "./chunk-JY7DKDII.js";
import {
  generateUtilityClass,
  generateUtilityClasses
} from "./chunk-WB6GU6HE.js";
import {
  _extends,
  _objectWithoutPropertiesLoose,
  capitalize,
  composeClasses,
  init_esm,
  init_extends,
  init_objectWithoutPropertiesLoose,
  require_prop_types,
  useId
} from "./chunk-5VTSBEOX.js";
import {
  require_jsx_runtime
} from "./chunk-TNQUW4IY.js";
import {
  require_react
} from "./chunk-JFTBQ7A7.js";
import {
  __toESM
} from "./chunk-AC2VUBZ6.js";

// node_modules/@mui/joy/Checkbox/Checkbox.js
init_objectWithoutPropertiesLoose();
init_extends();
var React3 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
init_esm();

// node_modules/@mui/joy/Checkbox/checkboxClasses.js
function getCheckboxUtilityClass(slot) {
  return generateUtilityClass("MuiCheckbox", slot);
}
var checkboxClasses = generateUtilityClasses("MuiCheckbox", ["root", "checkbox", "action", "input", "label", "checked", "disabled", "focusVisible", "indeterminate", "colorPrimary", "colorDanger", "colorInfo", "colorNeutral", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantOutlined", "variantSoft", "variantSolid"]);
var checkboxClasses_default = checkboxClasses;

// node_modules/@mui/joy/internal/svg-icons/Check.js
var React = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var Check_default = createSvgIcon((0, import_jsx_runtime.jsx)("path", {
  d: "M9 16.17 5.53 12.7a.9959.9959 0 0 0-1.41 0c-.39.39-.39 1.02 0 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71c.39-.39.39-1.02 0-1.41a.9959.9959 0 0 0-1.41 0L9 16.17z"
}), "Check");

// node_modules/@mui/joy/internal/svg-icons/HorizontalRule.js
var React2 = __toESM(require_react());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var HorizontalRule_default = createSvgIcon((0, import_jsx_runtime2.jsx)("path", {
  d: "M19 13H5c-.55 0-1-.45-1-1s.45-1 1-1h14c.55 0 1 .45 1 1s-.45 1-1 1z"
}), "HorizontalRule");

// node_modules/@mui/joy/Checkbox/Checkbox.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var _excluded = ["checked", "uncheckedIcon", "checkedIcon", "label", "defaultChecked", "disabled", "disableIcon", "overlay", "id", "indeterminate", "indeterminateIcon", "name", "onBlur", "onChange", "onFocus", "onFocusVisible", "readOnly", "required", "value", "color", "variant", "size"];
var useUtilityClasses = (ownerState) => {
  const {
    checked,
    disabled,
    disableIcon,
    focusVisible,
    color,
    variant,
    size
  } = ownerState;
  const slots = {
    root: ["root", checked && "checked", disabled && "disabled", focusVisible && "focusVisible", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`],
    checkbox: ["checkbox", checked && "checked", disabled && "disabled"],
    // disabled class is necessary for displaying global variant
    action: [
      "action",
      checked && "checked",
      disableIcon && disabled && "disabled",
      // add disabled class to action element for displaying global variant
      focusVisible && "focusVisible"
    ],
    input: ["input"],
    label: ["label"]
  };
  return composeClasses(slots, getCheckboxUtilityClass, {});
};
var CheckboxRoot = styled_default("span", {
  name: "JoyCheckbox",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState,
  theme
}) => {
  var _theme$variants$plain, _theme$variants$plain2, _theme$variants, _theme$variants2, _theme$variants3, _theme$variants4;
  return _extends({
    "--Icon-fontSize": "var(--Checkbox-size)"
  }, ownerState.size === "sm" && {
    "--Checkbox-size": "1rem",
    "--Checkbox-gap": "0.375rem",
    "& ~ *": {
      "--FormHelperText-margin": "0.375rem 0 0 1.375rem"
    },
    fontSize: theme.vars.fontSize.sm
  }, ownerState.size === "md" && {
    "--Checkbox-size": "1.25rem",
    "--Checkbox-gap": "0.5rem",
    "& ~ *": {
      "--FormHelperText-margin": "0.375rem 0 0 1.75rem"
    },
    fontSize: theme.vars.fontSize.md
  }, ownerState.size === "lg" && {
    "--Checkbox-size": "1.5rem",
    "--Checkbox-gap": "0.625rem",
    "& ~ *": {
      "--FormHelperText-margin": "0.375rem 0 0 2.125rem"
    },
    fontSize: theme.vars.fontSize.lg
  }, {
    position: ownerState.overlay ? "initial" : "relative",
    display: "inline-flex",
    fontFamily: theme.vars.fontFamily.body,
    lineHeight: "var(--Checkbox-size)",
    color: theme.vars.palette.text.primary,
    [`&.${checkboxClasses_default.disabled}`]: {
      color: (_theme$variants$plain = theme.variants.plainDisabled) == null ? void 0 : (_theme$variants$plain2 = _theme$variants$plain[ownerState.color]) == null ? void 0 : _theme$variants$plain2.color
    }
  }, ownerState.disableIcon && {
    color: (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : (_theme$variants2 = _theme$variants[ownerState.color]) == null ? void 0 : _theme$variants2.color,
    [`&.${checkboxClasses_default.disabled}`]: {
      color: (_theme$variants3 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : (_theme$variants4 = _theme$variants3[ownerState.color]) == null ? void 0 : _theme$variants4.color
    }
  });
});
var CheckboxCheckbox = styled_default("span", {
  name: "JoyCheckbox",
  slot: "Checkbox",
  overridesResolver: (props, styles) => styles.checkbox
})(({
  theme,
  ownerState
}) => {
  var _theme$variants5, _variantStyle$backgro, _theme$variants6, _theme$variants7, _theme$variants8;
  const variantStyle = (_theme$variants5 = theme.variants[`${ownerState.variant}`]) == null ? void 0 : _theme$variants5[ownerState.color];
  return [_extends({
    boxSizing: "border-box",
    borderRadius: theme.vars.radius.xs,
    width: "var(--Checkbox-size)",
    height: "var(--Checkbox-size)",
    display: "inline-flex",
    justifyContent: "center",
    alignItems: "center",
    flexShrink: 0
  }, ownerState.disableIcon && {
    display: "contents"
  }), ...!ownerState.disableIcon ? [_extends({}, variantStyle, {
    backgroundColor: (_variantStyle$backgro = variantStyle == null ? void 0 : variantStyle.backgroundColor) != null ? _variantStyle$backgro : theme.vars.palette.background.surface
  }), {
    "&:hover": (_theme$variants6 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants6[ownerState.color]
  }, {
    "&:active": (_theme$variants7 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants7[ownerState.color]
  }, {
    [`&.${checkboxClasses_default.disabled}`]: (_theme$variants8 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants8[ownerState.color]
  }] : []];
});
var CheckboxAction = styled_default("span", {
  name: "JoyCheckbox",
  slot: "Action",
  overridesResolver: (props, styles) => styles.action
})(({
  theme,
  ownerState
}) => {
  var _theme$variants9, _theme$variants10, _theme$variants11, _theme$variants12;
  return [{
    borderRadius: `var(--Checkbox-actionRadius, ${ownerState.overlay ? "var(--unstable_actionRadius, inherit)" : "inherit"})`,
    textAlign: "left",
    // prevent text-align inheritance
    position: "absolute",
    top: "calc(-1 * var(--variant-borderWidth, 0px))",
    // clickable on the border and focus outline does not move when checked/unchecked
    left: "calc(-1 * var(--variant-borderWidth, 0px))",
    bottom: "calc(-1 * var(--variant-borderWidth, 0px))",
    right: "calc(-1 * var(--variant-borderWidth, 0px))",
    zIndex: 1,
    // The action element usually cover the area of nearest positioned parent
    [theme.focus.selector]: theme.focus.default
  }, ...ownerState.disableIcon ? [(_theme$variants9 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants9[ownerState.color], {
    "&:hover": (_theme$variants10 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants10[ownerState.color]
  }, {
    "&:active": (_theme$variants11 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants11[ownerState.color]
  }, {
    [`&.${checkboxClasses_default.disabled}`]: (_theme$variants12 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants12[ownerState.color]
  }] : []];
});
var CheckboxInput = styled_default("input", {
  name: "JoyCheckbox",
  slot: "Input",
  overridesResolver: (props, styles) => styles.input
})(() => ({
  margin: 0,
  opacity: 0,
  position: "absolute",
  width: "100%",
  height: "100%",
  cursor: "pointer"
}));
var CheckboxLabel = styled_default("label", {
  name: "JoyCheckbox",
  slot: "Label",
  overridesResolver: (props, styles) => styles.label
})(({
  ownerState
}) => _extends({
  flex: 1,
  minWidth: 0
}, ownerState.disableIcon ? {
  zIndex: 1,
  // label should stay on top of the action.
  pointerEvents: "none"
  // makes hover ineffect.
} : {
  marginInlineStart: "var(--Checkbox-gap)"
}));
var defaultCheckedIcon = (0, import_jsx_runtime3.jsx)(Check_default, {});
var defaultIndeterminateIcon = (0, import_jsx_runtime3.jsx)(HorizontalRule_default, {});
var Checkbox = React3.forwardRef(function Checkbox2(inProps, ref) {
  var _ref, _inProps$disabled, _ref2, _inProps$size, _formControl$color;
  const props = useThemeProps({
    props: inProps,
    name: "JoyCheckbox"
  });
  const {
    checked: checkedProp,
    uncheckedIcon,
    checkedIcon = defaultCheckedIcon,
    label,
    defaultChecked,
    disabled: disabledExternalProp,
    disableIcon = false,
    overlay,
    id: idOverride,
    indeterminate = false,
    indeterminateIcon = defaultIndeterminateIcon,
    name,
    onBlur,
    onChange,
    onFocus,
    onFocusVisible,
    readOnly,
    required,
    value,
    color: colorProp,
    variant: variantProp,
    size: sizeProp = "md"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const formControl = React3.useContext(FormControlContext_default);
  const disabledProp = (_ref = (_inProps$disabled = inProps.disabled) != null ? _inProps$disabled : formControl == null ? void 0 : formControl.disabled) != null ? _ref : disabledExternalProp;
  const size = (_ref2 = (_inProps$size = inProps.size) != null ? _inProps$size : formControl == null ? void 0 : formControl.size) != null ? _ref2 : sizeProp;
  if (true) {
    const registerEffect = formControl == null ? void 0 : formControl.registerEffect;
    React3.useEffect(() => {
      if (registerEffect) {
        return registerEffect();
      }
      return void 0;
    }, [registerEffect]);
  }
  const id = useId(idOverride != null ? idOverride : formControl == null ? void 0 : formControl.htmlFor);
  const useCheckboxProps = {
    checked: checkedProp,
    defaultChecked,
    disabled: disabledProp,
    onBlur,
    onChange,
    onFocus,
    onFocusVisible
  };
  const {
    getInputProps,
    checked,
    disabled,
    focusVisible
  } = useSwitch(useCheckboxProps);
  const isCheckboxActive = checked || indeterminate;
  const activeVariant = variantProp || "solid";
  const inactiveVariant = variantProp || "outlined";
  const variant = isCheckboxActive ? activeVariant : inactiveVariant;
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, formControl != null && formControl.error ? "danger" : (_formControl$color = formControl == null ? void 0 : formControl.color) != null ? _formControl$color : colorProp);
  const activeColor = color || "primary";
  const inactiveColor = color || "neutral";
  const ownerState = _extends({}, props, {
    checked,
    disabled,
    disableIcon,
    overlay,
    focusVisible,
    color: isCheckboxActive ? activeColor : inactiveColor,
    variant,
    size
  });
  const classes = useUtilityClasses(ownerState);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: CheckboxRoot,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotCheckbox, checkboxProps] = useSlot("checkbox", {
    className: classes.checkbox,
    elementType: CheckboxCheckbox,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotAction, actionProps] = useSlot("action", {
    className: classes.action,
    elementType: CheckboxAction,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotInput, inputProps] = useSlot("input", {
    additionalProps: _extends({
      id,
      name,
      value,
      readOnly,
      required: required != null ? required : formControl == null ? void 0 : formControl.required,
      "aria-describedby": formControl == null ? void 0 : formControl["aria-describedby"]
    }, indeterminate && {
      // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-checked#values
      "aria-checked": "mixed"
    }),
    className: classes.input,
    elementType: CheckboxInput,
    externalForwardedProps: other,
    getSlotProps: getInputProps,
    ownerState
  });
  const [SlotLabel, labelProps] = useSlot("label", {
    additionalProps: {
      htmlFor: id
    },
    className: classes.label,
    elementType: CheckboxLabel,
    externalForwardedProps: other,
    ownerState
  });
  let icon = uncheckedIcon;
  if (disableIcon) {
    icon = null;
  } else if (indeterminate) {
    icon = indeterminateIcon;
  } else if (checked) {
    icon = checkedIcon;
  }
  return (0, import_jsx_runtime4.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [(0, import_jsx_runtime4.jsxs)(SlotCheckbox, _extends({}, checkboxProps, {
      children: [(0, import_jsx_runtime3.jsx)(SlotAction, _extends({}, actionProps, {
        children: (0, import_jsx_runtime3.jsx)(SlotInput, _extends({}, inputProps))
      })), icon]
    })), label && (0, import_jsx_runtime3.jsx)(TypographyNestedContext.Provider, {
      value: true,
      children: (0, import_jsx_runtime3.jsx)(SlotLabel, _extends({}, labelProps, {
        children: label
      }))
    })]
  }));
});
true ? Checkbox.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * If `true`, the component is checked.
   */
  checked: import_prop_types.default.bool,
  /**
   * The icon to display when the component is checked.
   * @default <CheckIcon />
   */
  checkedIcon: import_prop_types.default.node,
  /**
   * @ignore
   */
  children: import_prop_types.default.node,
  /**
   * Class name applied to the root element.
   */
  className: import_prop_types.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]),
  /**
   * The default checked state. Use when the component is not controlled.
   */
  defaultChecked: import_prop_types.default.bool,
  /**
   * If `true`, the component is disabled.
   */
  disabled: import_prop_types.default.bool,
  /**
   * If `true`, the checked icon is removed and the selected variant is applied on the `action` element instead.
   * @default false
   */
  disableIcon: import_prop_types.default.bool,
  /**
   * @ignore
   */
  id: import_prop_types.default.string,
  /**
   * If `true`, the component appears indeterminate.
   * This does not set the native input element to indeterminate due
   * to inconsistent behavior across browsers.
   * However, we set a `data-indeterminate` attribute on the `input`.
   * @default false
   */
  indeterminate: import_prop_types.default.bool,
  /**
   * The icon to display when the component is indeterminate.
   * @default <IndeterminateIcon />
   */
  indeterminateIcon: import_prop_types.default.node,
  /**
   * The label element next to the checkbox.
   */
  label: import_prop_types.default.node,
  /**
   * The `name` attribute of the input.
   */
  name: import_prop_types.default.string,
  /**
   * @ignore
   */
  onBlur: import_prop_types.default.func,
  /**
   * Callback fired when the state is changed.
   *
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: import_prop_types.default.func,
  /**
   * @ignore
   */
  onFocus: import_prop_types.default.func,
  /**
   * @ignore
   */
  onFocusVisible: import_prop_types.default.func,
  /**
   * If `true`, the root element's position is set to initial which allows the action area to fill the nearest positioned parent.
   * This prop is useful for composing Checkbox with ListItem component.
   * @default false
   */
  overlay: import_prop_types.default.bool,
  /**
   * If `true`, the component is read only.
   */
  readOnly: import_prop_types.default.bool,
  /**
   * If `true`, the `input` element is required.
   */
  required: import_prop_types.default.bool,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types.default.oneOf(["sm", "md", "lg"]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
  /**
   * The icon when `checked` is false.
   */
  uncheckedIcon: import_prop_types.default.node,
  /**
   * The value of the component. The DOM API casts this to a string.
   * The browser uses "on" as the default value.
   */
  value: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.string), import_prop_types.default.number, import_prop_types.default.string]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'solid'
   */
  variant: import_prop_types.default.oneOf(["outlined", "plain", "soft", "solid"])
} : void 0;
var Checkbox_default = Checkbox;

export {
  getCheckboxUtilityClass,
  checkboxClasses_default,
  Checkbox_default
};
//# sourceMappingURL=chunk-X2B4PQWI.js.map
