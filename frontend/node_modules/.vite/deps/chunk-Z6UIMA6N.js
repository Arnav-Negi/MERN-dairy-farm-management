import {
  ColorInversionProvider,
  styled_default,
  useColorInversion,
  useThemeProps
} from "./chunk-JY7DKDII.js";
import {
  generateUtilityClass,
  generateUtilityClasses
} from "./chunk-WB6GU6HE.js";
import {
  _extends,
  _objectWithoutPropertiesLoose,
  capitalize,
  clsx_m_default,
  composeClasses,
  getPath,
  init_clsx_m,
  init_esm,
  init_esm2,
  init_extends,
  init_objectWithoutPropertiesLoose,
  require_prop_types
} from "./chunk-5VTSBEOX.js";
import {
  require_jsx_runtime
} from "./chunk-TNQUW4IY.js";
import {
  require_react
} from "./chunk-JFTBQ7A7.js";
import {
  __toESM
} from "./chunk-AC2VUBZ6.js";

// node_modules/@mui/joy/Sheet/sheetClasses.js
function getSheetUtilityClass(slot) {
  return generateUtilityClass("MuiSheet", slot);
}
var sheetClasses = generateUtilityClasses("MuiSheet", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var sheetClasses_default = sheetClasses;

// node_modules/@mui/joy/Sheet/Sheet.js
init_objectWithoutPropertiesLoose();
init_extends();
init_esm();
init_clsx_m();
var import_prop_types = __toESM(require_prop_types());
var React = __toESM(require_react());
init_esm2();

// node_modules/@mui/joy/styles/styleUtils.js
init_extends();
var resolveSxValue = ({
  theme,
  ownerState
}, key, defaultValue) => {
  let parsedValue;
  let sxObject = {};
  function resolveSx(sxProp) {
    if (typeof sxProp === "function") {
      const result = sxProp(theme);
      resolveSx(result);
    } else if (Array.isArray(sxProp)) {
      sxProp.forEach((sxItem) => {
        if (typeof sxItem !== "boolean") {
          resolveSx(sxItem);
        }
      });
    } else if (typeof sxProp === "object") {
      sxObject = _extends({}, sxObject, sxProp);
    }
  }
  if (ownerState.sx) {
    resolveSx(ownerState.sx);
    const value = sxObject[key];
    if (typeof value === "string" || typeof value === "number") {
      if (key === "borderRadius") {
        var _theme$vars;
        if (typeof value === "number") {
          return `${value}px`;
        }
        parsedValue = ((_theme$vars = theme.vars) == null ? void 0 : _theme$vars.radius[value]) || value;
      } else {
        parsedValue = value;
      }
    }
    if (typeof value === "function") {
      parsedValue = value(theme);
    }
  }
  return parsedValue || defaultValue;
};

// node_modules/@mui/joy/Sheet/Sheet.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var _excluded = ["className", "color", "component", "variant", "invertedColors"];
var useUtilityClasses = (ownerState) => {
  const {
    variant,
    color
  } = ownerState;
  const slots = {
    root: ["root", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`]
  };
  return composeClasses(slots, getSheetUtilityClass, {});
};
var SheetRoot = styled_default("div", {
  name: "JoySheet",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$colorInversion;
  const variantStyle = (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color];
  const childRadius = resolveSxValue({
    theme,
    ownerState
  }, "borderRadius");
  const bgcolor = resolveSxValue({
    theme,
    ownerState
  }, "bgcolor");
  const backgroundColor = resolveSxValue({
    theme,
    ownerState
  }, "backgroundColor");
  const background = resolveSxValue({
    theme,
    ownerState
  }, "background");
  const resolvedBg = getPath(theme, `palette.${bgcolor}`) || bgcolor || getPath(theme, `palette.${backgroundColor}`) || backgroundColor || background || (variantStyle == null ? void 0 : variantStyle.backgroundColor) || (variantStyle == null ? void 0 : variantStyle.background) || theme.vars.palette.background.surface;
  return [_extends({
    "--ListItem-stickyBackground": resolvedBg,
    // for sticky List
    "--Sheet-background": resolvedBg
  }, childRadius !== void 0 && {
    "--List-radius": `calc(${childRadius} - var(--variant-borderWidth, 0px))`,
    "--unstable_actionRadius": `calc(${childRadius} - var(--variant-borderWidth, 0px))`
  }, {
    backgroundColor: theme.vars.palette.background.surface,
    position: "relative"
  }), variantStyle, ownerState.color !== "context" && ownerState.invertedColors && ((_theme$colorInversion = theme.colorInversion[ownerState.variant]) == null ? void 0 : _theme$colorInversion[ownerState.color])];
});
var Sheet = React.forwardRef(function Sheet2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoySheet"
  });
  const {
    className,
    color: colorProp = "neutral",
    component = "div",
    variant = "plain",
    invertedColors = false
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const ownerState = _extends({}, props, {
    color,
    component,
    invertedColors,
    variant
  });
  const classes = useUtilityClasses(ownerState);
  const result = (0, import_jsx_runtime.jsx)(SheetRoot, _extends({
    as: component,
    ownerState,
    className: clsx_m_default(classes.root, className),
    ref
  }, other));
  if (invertedColors) {
    return (0, import_jsx_runtime.jsx)(ColorInversionProvider, {
      variant,
      children: result
    });
  }
  return result;
});
true ? Sheet.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: import_prop_types.default.node,
  /**
   * @ignore
   */
  className: import_prop_types.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types.default.elementType,
  /**
   * If `true`, the children with an implicit color prop invert their colors to match the component's variant and color.
   * @default false
   */
  invertedColors: import_prop_types.default.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types.default.string])
} : void 0;
var Sheet_default = Sheet;

export {
  resolveSxValue,
  getSheetUtilityClass,
  sheetClasses_default,
  SheetRoot,
  Sheet_default
};
//# sourceMappingURL=chunk-Z6UIMA6N.js.map
