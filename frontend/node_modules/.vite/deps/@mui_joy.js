import {
  Modal_default,
  getModalUtilityClass,
  modalClasses_default
} from "./chunk-D2UPKT3R.js";
import {
  Close_default,
  ModalClose_default,
  getModalCloseUtilityClass,
  modalCloseClasses_default
} from "./chunk-OROTI2DR.js";
import "./chunk-ITHDNIXE.js";
import {
  ModalDialog_default,
  getModalDialogUtilityClass,
  modalDialogClasses_default
} from "./chunk-PR7ZRIYL.js";
import "./chunk-3GOQBL2B.js";
import {
  Stack_default,
  getStackUtilityClass,
  stackClasses_default
} from "./chunk-Y5EW3TLV.js";
import "./chunk-XBSOS2R6.js";
import {
  FormLabel_default,
  formLabelClasses_default,
  getFormLabelUtilityClass
} from "./chunk-KGTAVN2N.js";
import {
  GlobalStyles_default
} from "./chunk-K4WL7CJA.js";
import {
  Grid_default,
  getGridUtilityClass,
  gridClasses_default
} from "./chunk-EEEKTEWS.js";
import "./chunk-PNOGJW63.js";
import {
  IconButton_default,
  StyledIconButton,
  getIconButtonUtilityClass,
  iconButtonClasses_default
} from "./chunk-YDDANPCM.js";
import {
  Input_default,
  StyledInputEndDecorator,
  StyledInputHtml,
  StyledInputRoot,
  StyledInputStartDecorator,
  getInputUtilityClass,
  inputClasses_default,
  useForwardedInput
} from "./chunk-B4FB6W4H.js";
import {
  Link_default,
  getLinkUtilityClass,
  linkClasses_default
} from "./chunk-7B7ELQE2.js";
import "./chunk-KS2GVVHE.js";
import {
  SheetRoot,
  Sheet_default,
  getSheetUtilityClass,
  resolveSxValue,
  sheetClasses_default
} from "./chunk-X2B3PX7T.js";
import {
  Box_default
} from "./chunk-FAAHKTF2.js";
import {
  Button_default,
  CircularProgress_default,
  buttonClasses_default,
  circularProgressClasses_default,
  getButtonUtilityClass,
  getCircularProgressUtilityClass
} from "./chunk-U2UONJYN.js";
import {
  Checkbox_default,
  checkboxClasses_default,
  getCheckboxUtilityClass
} from "./chunk-ABXXUITD.js";
import {
  SvgIcon_default,
  createSvgIcon,
  getSvgIconUtilityClass,
  svgIconClasses_default
} from "./chunk-6X4CPU2R.js";
import {
  TypographyInheritContext,
  TypographyNestedContext,
  Typography_default,
  getTypographyUtilityClass,
  typographyClasses_default
} from "./chunk-LGCKEEC2.js";
import {
  useSlot
} from "./chunk-K6UVAR7P.js";
import {
  MenuUnstyledContext_default,
  PopperUnstyled_default,
  SelectUnstyledContext,
  TabsContext_default,
  TextareaAutosize_default,
  createFilterOptions,
  flattenOptionGroups,
  getOptionsFromChildren,
  useAutocomplete,
  useMenu,
  useMenuItem,
  useOption,
  useSelect_default,
  useSlider,
  useSwitch,
  useTabContext,
  useTabPanel_default,
  useTab_default,
  useTabsList_default,
  useTabs_default,
  valueToPercent
} from "./chunk-VTBNBCUP.js";
import "./chunk-PPM6DHGU.js";
import {
  useButton
} from "./chunk-RTTWHHJX.js";
import "./chunk-JLSM2GOB.js";
import "./chunk-ZPRNKHRI.js";
import {
  isHostComponent,
  useSlotProps
} from "./chunk-KUZMRIDF.js";
import {
  CssBaseline_default
} from "./chunk-5ZBNNAAJ.js";
import {
  FormControl_default,
  formControlClasses_default,
  getFormControlUtilityClass
} from "./chunk-B3GE6ADI.js";
import {
  FormControlContext_default
} from "./chunk-PSVXF2QT.js";
import "./chunk-JNY6AOSB.js";
import {
  CssVarsProvider,
  ThemeProvider,
  getInitColorSchemeScript,
  useColorScheme,
  useTheme
} from "./chunk-UUU5K6CW.js";
import {
  ColorInversionProvider,
  ColorInversion_default,
  styled_default,
  useColorInversion,
  useThemeProps
} from "./chunk-FYCXGVGN.js";
import {
  colors_default,
  createGetCssVar,
  extendTheme,
  generateUtilityClass as generateUtilityClass2,
  generateUtilityClasses as generateUtilityClasses2,
  shouldSkipGeneratingVar
} from "./chunk-PL44A7A3.js";
import "./chunk-7PYF26PA.js";
import "./chunk-QJV3R4PZ.js";
import {
  HTMLElementType,
  StyledEngineProvider,
  _extends,
  _objectWithoutPropertiesLoose,
  capitalize,
  chainPropTypes,
  clsx_m_default,
  composeClasses,
  createContainer,
  css,
  generateUtilityClass,
  generateUtilityClasses,
  init_clsx_m,
  init_esm,
  init_esm2,
  init_extends,
  init_objectWithoutPropertiesLoose,
  integerPropType_default,
  isMuiElement,
  keyframes,
  refType_default,
  require_prop_types,
  useControlled,
  useEventCallback,
  useForkRef,
  useId,
  useIsFocusVisible,
  usePreviousProps_default
} from "./chunk-5VTSBEOX.js";
import {
  require_jsx_runtime
} from "./chunk-TNQUW4IY.js";
import {
  require_react
} from "./chunk-JFTBQ7A7.js";
import {
  __toESM
} from "./chunk-AC2VUBZ6.js";

// node_modules/@mui/joy/Alert/Alert.js
init_objectWithoutPropertiesLoose();
init_extends();
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
init_clsx_m();
init_esm();

// node_modules/@mui/joy/Alert/alertClasses.js
function getAlertUtilityClass(slot) {
  return generateUtilityClass2("MuiAlert", slot);
}
var alertClasses = generateUtilityClasses2("MuiAlert", ["root", "startDecorator", "endDecorator", "colorPrimary", "colorDanger", "colorInfo", "colorNeutral", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var alertClasses_default = alertClasses;

// node_modules/@mui/joy/Alert/Alert.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var _excluded = ["children", "className", "color", "role", "variant", "size", "startDecorator", "endDecorator"];
var useUtilityClasses = (ownerState) => {
  const {
    variant,
    color,
    size
  } = ownerState;
  const slots = {
    root: ["root", size && `size${capitalize(size)}`, color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`],
    startDecorator: ["startDecorator"],
    endDecorator: ["endDecorator"]
  };
  return composeClasses(slots, getAlertUtilityClass, {});
};
var AlertRoot = styled_default("div", {
  name: "JoyAlert",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  return _extends({
    "--Alert-radius": theme.vars.radius.sm,
    "--Alert-decoratorChildRadius": "max((var(--Alert-radius) - var(--variant-borderWidth, 0px)) - var(--Alert-padding), min(var(--Alert-padding) + var(--variant-borderWidth, 0px), var(--Alert-radius) / 2))",
    "--Button-minHeight": "var(--Alert-decoratorChildHeight)",
    "--IconButton-size": "var(--Alert-decoratorChildHeight)",
    "--Button-radius": "var(--Alert-decoratorChildRadius)",
    "--IconButton-radius": "var(--Alert-decoratorChildRadius)"
  }, ownerState.size === "sm" && {
    "--Alert-padding": "0.5rem",
    "--Alert-gap": "0.375rem",
    "--Alert-decoratorChildHeight": "1.5rem",
    "--Icon-fontSize": "1.125rem",
    fontSize: theme.vars.fontSize.sm
  }, ownerState.size === "md" && {
    "--Alert-padding": "0.75rem",
    "--Alert-gap": "0.5rem",
    "--Alert-decoratorChildHeight": "2rem",
    "--Icon-fontSize": "1.25rem",
    fontSize: theme.vars.fontSize.sm,
    fontWeight: theme.vars.fontWeight.md
  }, ownerState.size === "lg" && {
    "--Alert-padding": "1rem",
    "--Alert-gap": "0.75rem",
    "--Alert-decoratorChildHeight": "2.375rem",
    "--Icon-fontSize": "1.5rem",
    fontSize: theme.vars.fontSize.md,
    fontWeight: theme.vars.fontWeight.md
  }, {
    fontFamily: theme.vars.fontFamily.body,
    lineHeight: theme.vars.lineHeight.md,
    backgroundColor: "transparent",
    display: "flex",
    alignItems: "center",
    padding: `var(--Alert-padding)`,
    borderRadius: "var(--Alert-radius)"
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]);
});
var AlertStartDecorator = styled_default("span", {
  name: "JoyAlert",
  slot: "StartDecorator",
  overridesResolver: (props, styles) => styles.startDecorator
})(({
  theme,
  ownerState
}) => {
  var _theme$vars$palette;
  return _extends({
    display: "inherit",
    flex: "none",
    marginInlineEnd: "var(--Alert-gap)"
  }, ownerState.color !== "context" && {
    color: (_theme$vars$palette = theme.vars.palette[ownerState.color]) == null ? void 0 : _theme$vars$palette[`${ownerState.variant}Color`]
  });
});
var AlertEndDecorator = styled_default("span", {
  name: "JoyAlert",
  slot: "EndDecorator",
  overridesResolver: (props, styles) => styles.endDecorator
})(({
  theme,
  ownerState
}) => {
  var _theme$vars$palette2;
  return _extends({
    display: "inherit",
    flex: "none",
    marginInlineStart: "var(--Alert-gap)",
    marginLeft: "auto"
  }, ownerState.color !== "context" && {
    color: (_theme$vars$palette2 = theme.vars.palette[ownerState.color]) == null ? void 0 : _theme$vars$palette2[`${ownerState.variant}Color`]
  });
});
var Alert = React.forwardRef(function Alert2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyAlert"
  });
  const {
    children,
    className,
    color: colorProp = "primary",
    role = "alert",
    variant = "soft",
    size = "md",
    startDecorator,
    endDecorator
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const ownerState = _extends({}, props, {
    color,
    variant,
    size
  });
  const classes = useUtilityClasses(ownerState);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: AlertRoot,
    externalForwardedProps: other,
    ownerState,
    additionalProps: {
      role
    }
  });
  const [SlotStartDecorator, startDecoratorProps] = useSlot("startDecorator", {
    className: classes.startDecorator,
    elementType: AlertStartDecorator,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot("endDecorator", {
    className: classes.endDecorator,
    elementType: AlertEndDecorator,
    externalForwardedProps: other,
    ownerState
  });
  return (0, import_jsx_runtime2.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [startDecorator && (0, import_jsx_runtime.jsx)(SlotStartDecorator, _extends({}, startDecoratorProps, {
      children: startDecorator
    })), children, endDecorator && (0, import_jsx_runtime.jsx)(SlotEndDecorator, _extends({}, endDecoratorProps, {
      children: endDecorator
    }))]
  }));
});
true ? Alert.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * @ignore
   */
  children: import_prop_types.default.node,
  /**
   * @ignore
   */
  className: import_prop_types.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'primary'
   */
  color: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types.default.string]),
  /**
   * Element placed after the children.
   */
  endDecorator: import_prop_types.default.node,
  /**
   * The ARIA role attribute of the element.
   * @default 'alert'
   */
  role: import_prop_types.default.string,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["sm", "md", "lg"]), import_prop_types.default.string]),
  /**
   * Element placed before the children.
   */
  startDecorator: import_prop_types.default.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'soft'
   */
  variant: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types.default.string])
} : void 0;
var Alert_default = Alert;

// node_modules/@mui/joy/AspectRatio/AspectRatio.js
init_extends();
init_objectWithoutPropertiesLoose();
var React2 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());
init_esm();

// node_modules/@mui/joy/AspectRatio/aspectRatioClasses.js
function getAspectRatioUtilityClass(slot) {
  return generateUtilityClass2("MuiAspectRatio", slot);
}
var aspectRatioClasses = generateUtilityClasses2("MuiAspectRatio", ["root", "content", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var aspectRatioClasses_default = aspectRatioClasses;

// node_modules/@mui/joy/AspectRatio/AspectRatio.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var _excluded2 = ["children", "ratio", "minHeight", "maxHeight", "objectFit", "color", "variant"];
var useUtilityClasses2 = (ownerState) => {
  const {
    variant,
    color
  } = ownerState;
  const slots = {
    root: ["root"],
    content: ["content", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`]
  };
  return composeClasses(slots, getAspectRatioUtilityClass, {});
};
var AspectRatioRoot = styled_default("div", {
  name: "JoyAspectRatio",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState
}) => {
  const minHeight = typeof ownerState.minHeight === "number" ? `${ownerState.minHeight}px` : ownerState.minHeight;
  const maxHeight = typeof ownerState.maxHeight === "number" ? `${ownerState.maxHeight}px` : ownerState.maxHeight;
  return {
    // a context variable for any child component
    "--AspectRatio-paddingBottom": minHeight || maxHeight ? `clamp(${minHeight || "0px"}, calc(100% / (${ownerState.ratio})), ${maxHeight || "9999px"})` : `calc(100% / (${ownerState.ratio}))`,
    borderRadius: "var(--AspectRatio-radius)",
    flexDirection: "column",
    margin: "var(--AspectRatio-margin)"
  };
});
var AspectRatioContent = styled_default("div", {
  name: "JoyAspectRatio",
  slot: "Content",
  overridesResolver: (props, styles) => styles.content
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  return [{
    flex: 1,
    position: "relative",
    borderRadius: "inherit",
    height: 0,
    paddingBottom: "var(--AspectRatio-paddingBottom)",
    overflow: "hidden",
    // use data-attribute instead of :first-child to support zero config SSR (emotion)
    // use nested selector for integrating with nextjs image `fill` layout (spans are inserted on top of the img)
    "& [data-first-child]": {
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      boxSizing: "border-box",
      position: "absolute",
      width: "100%",
      height: "100%",
      objectFit: ownerState.objectFit,
      margin: 0,
      padding: 0,
      "& > img": {
        // support art-direction that uses <picture><img /></picture>
        width: "100%",
        height: "100%",
        objectFit: ownerState.objectFit
      }
    }
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]];
});
var AspectRatio = React2.forwardRef(function AspectRatio2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyAspectRatio"
  });
  const {
    children,
    ratio = "16 / 9",
    minHeight,
    maxHeight,
    objectFit = "cover",
    color: colorProp = "neutral",
    variant = "soft"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded2);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const ownerState = _extends({}, props, {
    minHeight,
    maxHeight,
    objectFit,
    ratio,
    color,
    variant
  });
  const classes = useUtilityClasses2(ownerState);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: AspectRatioRoot,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotContent, contentProps] = useSlot("content", {
    className: classes.content,
    elementType: AspectRatioContent,
    externalForwardedProps: other,
    ownerState
  });
  return (0, import_jsx_runtime3.jsx)(SlotRoot, _extends({}, rootProps, {
    children: (0, import_jsx_runtime3.jsx)(SlotContent, _extends({}, contentProps, {
      children: React2.Children.map(children, (child, index) => index === 0 && React2.isValidElement(child) ? React2.cloneElement(child, {
        "data-first-child": ""
      }) : child)
    }))
  }));
});
true ? AspectRatio.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Used to render icon or text elements inside the AspectRatio if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types2.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types2.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]),
  /**
   * The maximum calculated height of the element (not the CSS height).
   */
  maxHeight: import_prop_types2.default.oneOfType([import_prop_types2.default.number, import_prop_types2.default.string]),
  /**
   * The minimum calculated height of the element (not the CSS height).
   */
  minHeight: import_prop_types2.default.oneOfType([import_prop_types2.default.number, import_prop_types2.default.string]),
  /**
   * The CSS object-fit value of the first-child.
   * @default 'cover'
   */
  objectFit: import_prop_types2.default.oneOf(["-moz-initial", "contain", "cover", "fill", "inherit", "initial", "none", "revert-layer", "revert", "scale-down", "unset"]),
  /**
   * The aspect-ratio of the element. The current implementation uses padding instead of the CSS aspect-ratio due to browser support.
   * https://caniuse.com/?search=aspect-ratio
   * @default '16 / 9'
   */
  ratio: import_prop_types2.default.oneOfType([import_prop_types2.default.number, import_prop_types2.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types2.default.oneOfType([import_prop_types2.default.arrayOf(import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.object, import_prop_types2.default.bool])), import_prop_types2.default.func, import_prop_types2.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'soft'
   */
  variant: import_prop_types2.default.oneOfType([import_prop_types2.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types2.default.string])
} : void 0;
var AspectRatio_default = AspectRatio;

// node_modules/@mui/joy/Autocomplete/Autocomplete.js
init_objectWithoutPropertiesLoose();
init_extends();
var React22 = __toESM(require_react());
var import_prop_types11 = __toESM(require_prop_types());
init_clsx_m();
init_esm();

// node_modules/@mui/joy/internal/svg-icons/ArrowDropDown.js
var React3 = __toESM(require_react());
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var ArrowDropDown_default = createSvgIcon((0, import_jsx_runtime4.jsx)("path", {
  d: "M7 10l5 5 5-5z"
}), "ArrowDropDown");

// node_modules/@mui/joy/Chip/Chip.js
init_objectWithoutPropertiesLoose();
init_extends();
var React5 = __toESM(require_react());
init_clsx_m();
var import_prop_types3 = __toESM(require_prop_types());
init_esm();

// node_modules/@mui/joy/Chip/chipClasses.js
function getChipUtilityClass(slot) {
  return generateUtilityClass2("MuiChip", slot);
}
var chipClasses = generateUtilityClasses2("MuiChip", ["root", "clickable", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "disabled", "endDecorator", "focusVisible", "label", "labelSm", "labelMd", "labelLg", "sizeSm", "sizeMd", "sizeLg", "startDecorator", "variantPlain", "variantSolid", "variantSoft", "variantOutlined"]);
var chipClasses_default = chipClasses;

// node_modules/@mui/joy/Chip/ChipContext.js
var React4 = __toESM(require_react());
var ChipColorContext = React4.createContext({
  disabled: void 0,
  variant: void 0,
  color: void 0
});
var ChipContext_default = ChipColorContext;

// node_modules/@mui/joy/Chip/Chip.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var _excluded3 = ["children", "className", "color", "slotProps", "onClick", "disabled", "size", "variant", "startDecorator", "endDecorator"];
var useUtilityClasses3 = (ownerState) => {
  const {
    disabled,
    size,
    color,
    clickable,
    variant,
    focusVisible
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", color && `color${capitalize(color)}`, size && `size${capitalize(size)}`, variant && `variant${capitalize(variant)}`, clickable && "clickable"],
    action: ["action", disabled && "disabled", focusVisible && "focusVisible"],
    label: ["label", size && `label${capitalize(size)}`],
    startDecorator: ["startDecorator"],
    endDecorator: ["endDecorator"]
  };
  return composeClasses(slots, getChipUtilityClass, {});
};
var ChipRoot = styled_default("div", {
  name: "JoyChip",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$variants2, _theme$variants3, _theme$variants4, _theme$variants5, _theme$variants6;
  return [_extends({
    // for controlling chip delete margin offset
    "--Chip-decoratorChildOffset": "min(calc(var(--Chip-paddingInline) - (var(--_Chip-minHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Chip-decoratorChildHeight)) / 2), var(--Chip-paddingInline))",
    "--Chip-decoratorChildRadius": "max(var(--_Chip-radius) - var(--variant-borderWidth, 0px) - var(--_Chip-paddingBlock), min(var(--_Chip-paddingBlock) + var(--variant-borderWidth, 0px), var(--_Chip-radius) / 2))",
    "--Chip-deleteRadius": "var(--Chip-decoratorChildRadius)",
    "--Chip-deleteSize": "var(--Chip-decoratorChildHeight)",
    "--Avatar-radius": "var(--Chip-decoratorChildRadius)",
    "--Avatar-size": "var(--Chip-decoratorChildHeight)",
    "--Icon-margin": "initial",
    // reset the icon's margin.
    "--unstable_actionRadius": "var(--_Chip-radius)"
  }, ownerState.size === "sm" && {
    "--Chip-gap": "0.25rem",
    "--Chip-paddingInline": "0.5rem",
    "--Chip-decoratorChildHeight": "calc(min(1.125rem, var(--_Chip-minHeight)) - 2 * var(--variant-borderWidth, 0px))",
    "--Icon-fontSize": "calc(var(--_Chip-minHeight) / 1.714)",
    // 0.875rem by default
    "--_Chip-minHeight": "var(--Chip-minHeight, 1.5rem)",
    fontSize: theme.vars.fontSize.xs
  }, ownerState.size === "md" && {
    "--Chip-gap": "0.375rem",
    "--Chip-paddingInline": "0.75rem",
    "--Chip-decoratorChildHeight": "min(1.375rem, var(--_Chip-minHeight))",
    "--Icon-fontSize": "calc(var(--_Chip-minHeight) / 1.778)",
    // 1.125rem by default
    "--_Chip-minHeight": "var(--Chip-minHeight, 2rem)",
    fontSize: theme.vars.fontSize.sm
  }, ownerState.size === "lg" && {
    "--Chip-gap": "0.5rem",
    "--Chip-paddingInline": "1rem",
    "--Chip-decoratorChildHeight": "min(1.75rem, var(--_Chip-minHeight))",
    "--Icon-fontSize": "calc(var(--_Chip-minHeight) / 2)",
    // 1.25rem by default
    "--_Chip-minHeight": "var(--Chip-minHeight, 2.5rem)",
    fontSize: theme.vars.fontSize.md
  }, {
    "--_Chip-radius": "var(--Chip-radius, 1.5rem)",
    "--_Chip-paddingBlock": "max((var(--_Chip-minHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Chip-decoratorChildHeight)) / 2, 0px)",
    minHeight: "var(--_Chip-minHeight)",
    paddingInline: "var(--Chip-paddingInline)",
    borderRadius: "var(--_Chip-radius)",
    position: "relative",
    fontWeight: theme.vars.fontWeight.md,
    fontFamily: theme.vars.fontFamily.body,
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    whiteSpace: "nowrap",
    textDecoration: "none",
    verticalAlign: "middle",
    boxSizing: "border-box",
    [`&.${chipClasses_default.disabled}`]: {
      color: (_theme$variants = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : (_theme$variants2 = _theme$variants[ownerState.color]) == null ? void 0 : _theme$variants2.color
    }
  }), ...!ownerState.clickable ? [(_theme$variants3 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants3[ownerState.color], {
    [`&.${chipClasses_default.disabled}`]: (_theme$variants4 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants4[ownerState.color]
  }] : [{
    "--variant-borderWidth": "0px",
    color: (_theme$variants5 = theme.variants[ownerState.variant]) == null ? void 0 : (_theme$variants6 = _theme$variants5[ownerState.color]) == null ? void 0 : _theme$variants6.color
  }]];
});
var ChipLabel = styled_default("span", {
  name: "JoyChip",
  slot: "Label",
  overridesResolver: (props, styles) => styles.label
})(({
  ownerState
}) => _extends({
  display: "inline-block",
  overflow: "hidden",
  textOverflow: "ellipsis",
  order: 1,
  minInlineSize: 0,
  flexGrow: 1
}, ownerState.clickable && {
  zIndex: 1,
  pointerEvents: "none"
}));
var ChipAction = styled_default("button", {
  name: "JoyChip",
  slot: "Action",
  overridesResolver: (props, styles) => styles.action
})(({
  theme,
  ownerState
}) => {
  var _theme$variants7, _theme$variants8, _theme$variants9, _theme$variants10;
  return [{
    position: "absolute",
    zIndex: 0,
    top: 0,
    left: 0,
    bottom: 0,
    right: 0,
    border: "none",
    cursor: "pointer",
    padding: "initial",
    margin: "initial",
    backgroundColor: "initial",
    textDecoration: "none",
    borderRadius: "inherit",
    [theme.focus.selector]: theme.focus.default
  }, (_theme$variants7 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants7[ownerState.color], {
    "&:hover": (_theme$variants8 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants8[ownerState.color]
  }, {
    "&:active": (_theme$variants9 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants9[ownerState.color]
  }, {
    [`&.${chipClasses_default.disabled}`]: (_theme$variants10 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants10[ownerState.color]
  }];
});
var ChipStartDecorator = styled_default("span", {
  name: "JoyChip",
  slot: "StartDecorator",
  overridesResolver: (props, styles) => styles.startDecorator
})({
  "--Avatar-marginInlineStart": "calc(var(--Chip-decoratorChildOffset) * -1)",
  "--Chip-deleteMargin": "0 0 0 calc(var(--Chip-decoratorChildOffset) * -1)",
  "--Icon-margin": "0 0 0 calc(var(--Chip-paddingInline) / -4)",
  display: "inherit",
  marginInlineEnd: "var(--Chip-gap)",
  // set zIndex to 1 with order to stay on top of other controls, eg. Checkbox, Radio
  order: 0,
  zIndex: 1,
  pointerEvents: "none"
});
var ChipEndDecorator = styled_default("span", {
  name: "JoyChip",
  slot: "EndDecorator",
  overridesResolver: (props, styles) => styles.endDecorator
})({
  "--Chip-deleteMargin": "0 calc(var(--Chip-decoratorChildOffset) * -1) 0 0",
  "--Icon-margin": "0 calc(var(--Chip-paddingInline) / -4) 0 0",
  display: "inherit",
  marginInlineStart: "var(--Chip-gap)",
  // set zIndex to 1 with order to stay on top of other controls, eg. Checkbox, Radio
  order: 2,
  zIndex: 1,
  pointerEvents: "none"
});
var Chip = React5.forwardRef(function Chip2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyChip"
  });
  const {
    children,
    className,
    color: colorProp = "primary",
    slotProps = {},
    onClick,
    disabled = false,
    size = "md",
    variant = "solid",
    startDecorator,
    endDecorator
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded3);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const clickable = !!onClick || !!slotProps.action;
  const ownerState = _extends({}, props, {
    disabled,
    size,
    color,
    variant,
    clickable,
    focusVisible: false
  });
  const resolvedActionProps = typeof slotProps.action === "function" ? slotProps.action(ownerState) : slotProps.action;
  const actionRef = React5.useRef(null);
  const {
    focusVisible,
    getRootProps
  } = useButton(_extends({}, resolvedActionProps, {
    disabled,
    ref: actionRef
  }));
  ownerState.focusVisible = focusVisible;
  const classes = useUtilityClasses3(ownerState);
  const externalForwardedProps = _extends({}, other, {
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: ChipRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotLabel, labelProps] = useSlot("label", {
    className: classes.label,
    elementType: ChipLabel,
    externalForwardedProps,
    ownerState
  });
  const id = useId(labelProps.id);
  const [SlotAction, actionProps] = useSlot("action", {
    className: classes.action,
    elementType: ChipAction,
    externalForwardedProps,
    ownerState,
    getSlotProps: getRootProps,
    additionalProps: {
      "aria-labelledby": id,
      as: resolvedActionProps == null ? void 0 : resolvedActionProps.component,
      onClick
    }
  });
  const [SlotStartDecorator, startDecoratorProps] = useSlot("startDecorator", {
    className: classes.startDecorator,
    elementType: ChipStartDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot("endDecorator", {
    className: classes.endDecorator,
    elementType: ChipEndDecorator,
    externalForwardedProps,
    ownerState
  });
  const chipContextValue = React5.useMemo(() => ({
    disabled,
    variant,
    color: color === "context" ? void 0 : color
  }), [color, disabled, variant]);
  return (0, import_jsx_runtime5.jsx)(ChipContext_default.Provider, {
    value: chipContextValue,
    children: (0, import_jsx_runtime6.jsxs)(SlotRoot, _extends({}, rootProps, {
      children: [clickable && (0, import_jsx_runtime5.jsx)(SlotAction, _extends({}, actionProps)), (0, import_jsx_runtime5.jsx)(SlotLabel, _extends({}, labelProps, {
        id,
        children
      })), startDecorator && (0, import_jsx_runtime5.jsx)(SlotStartDecorator, _extends({}, startDecoratorProps, {
        children: startDecorator
      })), endDecorator && (0, import_jsx_runtime5.jsx)(SlotEndDecorator, _extends({}, endDecoratorProps, {
        children: endDecorator
      }))]
    }))
  });
});
true ? Chip.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: import_prop_types3.default.node,
  /**
   * @ignore
   */
  className: import_prop_types3.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'primary'
   */
  color: import_prop_types3.default.oneOfType([import_prop_types3.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types3.default.string]),
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: import_prop_types3.default.bool,
  /**
   * Element placed after the children.
   */
  endDecorator: import_prop_types3.default.node,
  /**
   * Element action click handler.
   */
  onClick: import_prop_types3.default.func,
  /**
   * The size of the component.
   * It accepts theme values between 'sm' and 'lg'.
   * @default 'md'
   */
  size: import_prop_types3.default.oneOfType([import_prop_types3.default.oneOf(["lg", "md", "sm"]), import_prop_types3.default.string]),
  /**
   * @ignore
   */
  slotProps: import_prop_types3.default.shape({
    action: import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.object]),
    endDecorator: import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.object]),
    label: import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.object]),
    root: import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.object]),
    startDecorator: import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.object])
  }),
  /**
   * Element placed before the children.
   */
  startDecorator: import_prop_types3.default.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types3.default.oneOfType([import_prop_types3.default.arrayOf(import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.object, import_prop_types3.default.bool])), import_prop_types3.default.func, import_prop_types3.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'solid'
   */
  variant: import_prop_types3.default.oneOfType([import_prop_types3.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types3.default.string])
} : void 0;
var Chip_default = Chip;

// node_modules/@mui/joy/ChipDelete/ChipDelete.js
init_extends();
init_objectWithoutPropertiesLoose();
var React7 = __toESM(require_react());
var import_prop_types4 = __toESM(require_prop_types());
init_esm();

// node_modules/@mui/joy/internal/svg-icons/Cancel.js
var React6 = __toESM(require_react());
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
var Cancel_default = createSvgIcon((0, import_jsx_runtime7.jsx)("path", {
  d: "M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
}), "Cancel");

// node_modules/@mui/joy/ChipDelete/chipDeleteClasses.js
function getChipDeleteUtilityClass(slot) {
  return generateUtilityClass2("MuiChipDelete", slot);
}
var chipDeleteClasses = generateUtilityClasses2("MuiChipDelete", ["root", "disabled", "focusVisible", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantSolid", "variantSoft", "variantOutlined"]);
var chipDeleteClasses_default = chipDeleteClasses;

// node_modules/@mui/joy/ChipDelete/ChipDelete.js
var import_jsx_runtime8 = __toESM(require_jsx_runtime());
var _Cancel;
var _excluded4 = ["component", "children", "variant", "color", "disabled", "onKeyDown", "onDelete", "onClick"];
var _excluded22 = ["onDelete"];
var useUtilityClasses4 = (ownerState) => {
  const {
    focusVisible,
    variant,
    color,
    disabled
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", focusVisible && "focusVisible", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`]
  };
  return composeClasses(slots, getChipDeleteUtilityClass, {});
};
var ChipDeleteRoot = styled_default("button", {
  name: "JoyChipDelete",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$variants2, _theme$variants3, _theme$variants4;
  return [{
    "--Icon-margin": "initial",
    // prevent overrides from parent
    pointerEvents: "visible",
    // force the ChipDelete to be hoverable because the decorator can have pointerEvents 'none'
    cursor: "pointer",
    width: "var(--Chip-deleteSize, 2rem)",
    height: "var(--Chip-deleteSize, 2rem)",
    borderRadius: "var(--Chip-deleteRadius, 50%)",
    margin: "var(--Chip-deleteMargin)",
    display: "inline-flex",
    justifyContent: "center",
    alignItems: "center",
    zIndex: 1,
    // overflow above sibling button or anchor
    border: "none",
    // reset user agent stylesheet
    background: "none",
    // reset user agent stylesheet
    padding: "0px",
    // reset user agent stylesheet
    [theme.focus.selector]: theme.focus.default
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color], {
    "&:hover": (_theme$variants2 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants2[ownerState.color]
  }, {
    "&:active": (_theme$variants3 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants3[ownerState.color]
  }, {
    [`&.${chipDeleteClasses_default.disabled}`]: (_theme$variants4 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants4[ownerState.color]
  }];
});
var chipVariantMapping = {
  plain: "outlined",
  outlined: "soft",
  soft: "solid",
  solid: "solid"
};
var ChipDelete = React7.forwardRef(function ChipDelete2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyChipDelete"
  });
  const {
    component,
    children,
    variant: variantProp,
    color: colorProp,
    disabled: disabledProp,
    onKeyDown,
    onDelete,
    onClick
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded4);
  const chipContext = React7.useContext(ChipContext_default);
  const variant = variantProp || chipVariantMapping[chipContext.variant] || "solid";
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp || chipContext.color || "primary");
  const disabled = disabledProp != null ? disabledProp : chipContext.disabled;
  const buttonRef = React7.useRef(null);
  const handleRef = useForkRef(buttonRef, ref);
  const {
    focusVisible,
    getRootProps
  } = useButton(_extends({}, props, {
    disabled,
    ref: handleRef
  }));
  const ownerState = _extends({}, props, {
    disabled,
    variant,
    color,
    focusVisible
  });
  const classes = useUtilityClasses4(ownerState);
  const handleClickDelete = (event) => {
    if (!disabled && onDelete) {
      onDelete(event);
    }
    if (onClick) {
      onClick(event);
    }
  };
  const handleKeyDelete = (event) => {
    if (["Backspace", "Enter", "Delete"].includes(event.key)) {
      event.preventDefault();
      if (!disabled && onDelete) {
        onDelete(event);
      }
    }
    if (onKeyDown) {
      onKeyDown(event);
    }
  };
  const rootProps = useSlotProps({
    elementType: ChipDeleteRoot,
    getSlotProps: getRootProps,
    externalSlotProps: {},
    externalForwardedProps: other,
    ownerState,
    additionalProps: {
      as: component,
      onKeyDown: handleKeyDelete,
      onClick: handleClickDelete
    },
    className: classes.root
  });
  const restOfRootProps = _objectWithoutPropertiesLoose(rootProps, _excluded22);
  return (0, import_jsx_runtime8.jsx)(ChipDeleteRoot, _extends({}, restOfRootProps, {
    children: children != null ? children : _Cancel || (_Cancel = (0, import_jsx_runtime8.jsx)(Cancel_default, {}))
  }));
});
true ? ChipDelete.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * If provided, it will replace the default icon.
   */
  children: import_prop_types4.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'primary'
   */
  color: import_prop_types4.default.oneOfType([import_prop_types4.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types4.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types4.default.elementType,
  /**
   * If `true`, the component is disabled.
   * If `undefined`, the value inherits from the parent chip via a React context.
   */
  disabled: import_prop_types4.default.bool,
  /**
   * @ignore
   */
  onClick: import_prop_types4.default.func,
  /**
   * Callback fired when the component is not disabled and either:
   * - `Backspace`, `Enter` or `Delete` is pressed.
   * - The component is clicked.
   */
  onDelete: import_prop_types4.default.func,
  /**
   * @ignore
   */
  onKeyDown: import_prop_types4.default.func,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types4.default.oneOfType([import_prop_types4.default.arrayOf(import_prop_types4.default.oneOfType([import_prop_types4.default.func, import_prop_types4.default.object, import_prop_types4.default.bool])), import_prop_types4.default.func, import_prop_types4.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'solid'
   */
  variant: import_prop_types4.default.oneOfType([import_prop_types4.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types4.default.string])
} : void 0;
var ChipDelete_default = ChipDelete;

// node_modules/@mui/joy/List/List.js
init_objectWithoutPropertiesLoose();
init_extends();
var React14 = __toESM(require_react());
var import_prop_types5 = __toESM(require_prop_types());
init_clsx_m();
init_esm();

// node_modules/@mui/joy/List/listClasses.js
function getListUtilityClass(slot) {
  return generateUtilityClass2("MuiList", slot);
}
var listClasses = generateUtilityClasses2("MuiList", ["root", "nesting", "scoped", "sizeSm", "sizeMd", "sizeLg", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "horizontal", "vertical"]);
var listClasses_default = listClasses;

// node_modules/@mui/joy/List/NestedListContext.js
var React8 = __toESM(require_react());
var NestedListContext = React8.createContext(false);
var NestedListContext_default = NestedListContext;

// node_modules/@mui/joy/List/ComponentListContext.js
var React9 = __toESM(require_react());
var ComponentListContext = React9.createContext(void 0);
var ComponentListContext_default = ComponentListContext;

// node_modules/@mui/joy/List/ListProvider.js
init_extends();
var React12 = __toESM(require_react());

// node_modules/@mui/joy/List/RowListContext.js
var React10 = __toESM(require_react());
var RowListContext = React10.createContext(false);
var RowListContext_default = RowListContext;

// node_modules/@mui/joy/List/WrapListContext.js
var React11 = __toESM(require_react());
var WrapListContext = React11.createContext(false);
var WrapListContext_default = WrapListContext;

// node_modules/@mui/joy/List/ListProvider.js
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
var scopedVariables = {
  "--NestedList-marginRight": "0px",
  "--NestedList-marginLeft": "0px",
  "--NestedList-item-paddingLeft": "var(--ListItem-paddingX)",
  // reset ListItem, ListItemButton negative margin (caused by NestedListItem)
  "--List-itemButtonMarginBlock": "0px",
  "--List-itemButtonMarginInline": "0px",
  "--ListItem-marginBlock": "0px",
  "--ListItem-marginInline": "0px"
};
function ListProvider(props) {
  const {
    children,
    nested,
    row = false,
    wrap = false
  } = props;
  const baseProviders = (0, import_jsx_runtime9.jsx)(RowListContext_default.Provider, {
    value: row,
    children: (0, import_jsx_runtime9.jsx)(WrapListContext_default.Provider, {
      value: wrap,
      children: React12.Children.map(children, (child, index) => React12.isValidElement(child) ? React12.cloneElement(child, _extends({}, index === 0 && {
        "data-first-child": ""
      })) : child)
    })
  });
  if (nested === void 0) {
    return baseProviders;
  }
  return (0, import_jsx_runtime9.jsx)(NestedListContext_default.Provider, {
    value: nested,
    children: baseProviders
  });
}
var ListProvider_default = ListProvider;

// node_modules/@mui/joy/RadioGroup/RadioGroupContext.js
var React13 = __toESM(require_react());
var RadioGroupContext = React13.createContext(void 0);
if (true) {
  RadioGroupContext.displayName = "RadioGroupContext";
}
var RadioGroupContext_default = RadioGroupContext;

// node_modules/@mui/joy/List/List.js
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
var _excluded5 = ["component", "className", "children", "size", "orientation", "wrap", "variant", "color", "role"];
var useUtilityClasses5 = (ownerState) => {
  const {
    variant,
    color,
    size,
    nesting,
    orientation,
    instanceSize
  } = ownerState;
  const slots = {
    root: ["root", orientation, variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, !instanceSize && !nesting && size && `size${capitalize(size)}`, instanceSize && `size${capitalize(instanceSize)}`, nesting && "nesting"]
  };
  return composeClasses(slots, getListUtilityClass, {});
};
var StyledList = styled_default("ul")(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  function applySizeVars(size) {
    if (size === "sm") {
      return {
        "--ListDivider-gap": "0.25rem",
        "--ListItem-minHeight": "2rem",
        "--ListItem-paddingY": "0.25rem",
        "--ListItem-paddingX": "0.5rem",
        "--ListItem-fontSize": theme.vars.fontSize.sm,
        "--List-decoratorSize": ownerState.orientation === "horizontal" ? "1.5rem" : "2rem",
        "--Icon-fontSize": "1.125rem"
      };
    }
    if (size === "md") {
      return {
        "--ListDivider-gap": "0.375rem",
        "--ListItem-minHeight": "2.5rem",
        "--ListItem-paddingY": "0.375rem",
        "--ListItem-paddingX": "0.75rem",
        "--ListItem-fontSize": theme.vars.fontSize.md,
        "--List-decoratorSize": ownerState.orientation === "horizontal" ? "1.75rem" : "2.5rem",
        "--Icon-fontSize": "1.25rem"
      };
    }
    if (size === "lg") {
      return {
        "--ListDivider-gap": "0.5rem",
        "--ListItem-minHeight": "3rem",
        "--ListItem-paddingY": "0.5rem",
        "--ListItem-paddingX": "1rem",
        "--ListItem-fontSize": theme.vars.fontSize.md,
        "--List-decoratorSize": ownerState.orientation === "horizontal" ? "2.25rem" : "3rem",
        "--Icon-fontSize": "1.5rem"
      };
    }
    return {};
  }
  return [ownerState.nesting && _extends({}, applySizeVars(ownerState.instanceSize), {
    "--ListItem-paddingRight": "var(--ListItem-paddingX)",
    "--ListItem-paddingLeft": "var(--NestedList-item-paddingLeft)",
    // reset ListItem, ListItemButton negative margin (caused by NestedListItem)
    "--List-itemButtonMarginBlock": "0px",
    "--List-itemButtonMarginInline": "0px",
    "--ListItem-marginBlock": "0px",
    "--ListItem-marginInline": "0px",
    padding: 0,
    marginInlineStart: "var(--NestedList-marginLeft)",
    marginInlineEnd: "var(--NestedList-marginRight)",
    marginBlockStart: "var(--List-gap)",
    marginBlockEnd: "initial"
    // reset user agent stylesheet.
  }), !ownerState.nesting && _extends({}, applySizeVars(ownerState.size), {
    "--List-gap": "0px",
    "--List-decoratorColor": theme.vars.palette.text.tertiary,
    "--List-nestedInsetStart": "0px",
    "--ListItem-paddingLeft": "var(--ListItem-paddingX)",
    "--ListItem-paddingRight": "var(--ListItem-paddingX)",
    // Automatic radius adjustment kicks in only if '--List-padding' and '--List-radius' are provided.
    "--unstable_childRadius": "max(var(--List-radius) - var(--List-padding), min(var(--List-padding) / 2, var(--List-radius) / 2))",
    "--ListItem-radius": "var(--unstable_childRadius)",
    // by default, The ListItem & ListItemButton use automatic radius adjustment based on the parent List.
    "--ListItem-startActionTranslateX": "calc(0.5 * var(--ListItem-paddingLeft))",
    "--ListItem-endActionTranslateX": "calc(-0.5 * var(--ListItem-paddingRight))",
    margin: "initial"
  }, ownerState.orientation === "horizontal" ? _extends({}, ownerState.wrap ? {
    padding: "var(--List-padding)",
    // Fallback is not needed for row-wrap List
    marginInlineStart: "calc(-1 * var(--List-gap))",
    marginBlockStart: "calc(-1 * var(--List-gap))"
  } : {
    paddingInline: "var(--List-padding, var(--ListDivider-gap))",
    paddingBlock: "var(--List-padding)"
  }) : {
    paddingBlock: "var(--List-padding, var(--ListDivider-gap))",
    paddingInline: "var(--List-padding)"
  }), _extends({
    boxSizing: "border-box",
    borderRadius: "var(--List-radius)",
    listStyle: "none",
    display: "flex",
    flexDirection: ownerState.orientation === "horizontal" ? "row" : "column"
  }, ownerState.wrap && {
    flexWrap: "wrap"
  }, {
    flexGrow: 1,
    position: "relative"
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color])];
});
var ListRoot = styled_default(StyledList, {
  name: "JoyList",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({});
var List = React14.forwardRef(function List2(inProps, ref) {
  var _inProps$size;
  const nesting = React14.useContext(NestedListContext_default);
  const menuContext = React14.useContext(MenuUnstyledContext_default);
  const selectContext = React14.useContext(SelectUnstyledContext);
  const radioGroupContext = React14.useContext(RadioGroupContext_default);
  const props = useThemeProps({
    props: inProps,
    name: "JoyList"
  });
  const {
    component,
    className,
    children,
    size: sizeProp,
    orientation = "vertical",
    wrap = false,
    variant = "plain",
    color: colorProp = "neutral",
    role: roleProp
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded5);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const size = sizeProp || ((_inProps$size = inProps.size) != null ? _inProps$size : "md");
  let role;
  if (menuContext || selectContext) {
    role = "group";
  }
  if (radioGroupContext) {
    role = "presentation";
  }
  if (roleProp) {
    role = roleProp;
  }
  const ownerState = _extends({}, props, {
    instanceSize: inProps.size,
    size,
    nesting,
    orientation,
    wrap,
    variant,
    color,
    role
  });
  const classes = useUtilityClasses5(ownerState);
  return (0, import_jsx_runtime10.jsx)(ListRoot, _extends({
    ref,
    as: component,
    className: clsx_m_default(classes.root, className),
    ownerState,
    role,
    "aria-labelledby": typeof nesting === "string" ? nesting : void 0
  }, other, {
    children: (0, import_jsx_runtime10.jsx)(ComponentListContext_default.Provider, {
      value: `${typeof component === "string" ? component : ""}:${role || ""}`,
      children: (0, import_jsx_runtime10.jsx)(ListProvider_default, {
        row: orientation === "horizontal",
        wrap,
        children
      })
    })
  }));
});
true ? List.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: import_prop_types5.default.node,
  /**
   * @ignore
   */
  className: import_prop_types5.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types5.default.oneOfType([import_prop_types5.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types5.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types5.default.elementType,
  /**
   * The component orientation.
   * @default 'vertical'
   */
  orientation: import_prop_types5.default.oneOf(["horizontal", "vertical"]),
  /**
   * @ignore
   */
  role: import_prop_types5.default.string,
  /**
   * The size of the component (affect other nested list* components).
   * @default 'md'
   */
  size: import_prop_types5.default.oneOfType([import_prop_types5.default.oneOf(["sm", "md", "lg"]), import_prop_types5.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types5.default.oneOfType([import_prop_types5.default.arrayOf(import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object, import_prop_types5.default.bool])), import_prop_types5.default.func, import_prop_types5.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types5.default.oneOfType([import_prop_types5.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types5.default.string]),
  /**
   * Only for horizontal list.
   * If `true`, the list sets the flex-wrap to "wrap" and adjust margin to have gap-like behavior (will move to `gap` in the future).
   *
   * @default false
   */
  wrap: import_prop_types5.default.bool
} : void 0;
var List_default = List;

// node_modules/@mui/joy/ListSubheader/ListSubheader.js
init_objectWithoutPropertiesLoose();
init_extends();
var React16 = __toESM(require_react());
var import_prop_types6 = __toESM(require_prop_types());
init_clsx_m();
init_esm();

// node_modules/@mui/joy/ListSubheader/listSubheaderClasses.js
function getListSubheaderUtilityClass(slot) {
  return generateUtilityClass2("MuiListSubheader", slot);
}
var listSubheaderClasses = generateUtilityClasses2("MuiListSubheader", ["root", "sticky", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantSoft", "variantOutlined", "variantSolid"]);
var listSubheaderClasses_default = listSubheaderClasses;

// node_modules/@mui/joy/ListSubheader/ListSubheaderContext.js
var React15 = __toESM(require_react());
var ListSubheaderDispatch = React15.createContext(void 0);
var ListSubheaderContext_default = ListSubheaderDispatch;

// node_modules/@mui/joy/ListSubheader/ListSubheader.js
var import_jsx_runtime11 = __toESM(require_jsx_runtime());
var _excluded6 = ["component", "className", "children", "id", "sticky", "variant", "color"];
var useUtilityClasses6 = (ownerState) => {
  const {
    variant,
    color,
    sticky
  } = ownerState;
  const slots = {
    root: ["root", sticky && "sticky", color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`]
  };
  return composeClasses(slots, getListSubheaderUtilityClass, {});
};
var ListSubheaderRoot = styled_default("div", {
  name: "JoyListSubheader",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$vars$palette, _theme$variants;
  return _extends({
    boxSizing: "border-box",
    display: "flex",
    alignItems: "center",
    marginInline: "var(--ListItem-marginInline)",
    paddingBlock: "var(--ListItem-paddingY)",
    paddingInlineStart: "var(--ListItem-paddingLeft)",
    paddingInlineEnd: "var(--ListItem-paddingRight)",
    minBlockSize: "var(--ListItem-minHeight)",
    fontSize: "calc(var(--ListItem-fontSize) * 0.75)",
    fontWeight: theme.vars.fontWeight.lg,
    fontFamily: theme.vars.fontFamily.body,
    letterSpacing: theme.vars.letterSpacing.md,
    textTransform: "uppercase"
  }, ownerState.sticky && {
    position: "sticky",
    top: "var(--ListItem-stickyTop, 0px)",
    // integration with Menu and Select.
    zIndex: 1,
    background: "var(--ListItem-stickyBackground)"
  }, {
    color: ownerState.color && ownerState.color !== "context" ? `rgba(${(_theme$vars$palette = theme.vars.palette[ownerState.color]) == null ? void 0 : _theme$vars$palette.mainChannel} / 1)` : theme.vars.palette.text.tertiary
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]);
});
var ListSubheader = React16.forwardRef(function ListSubheader2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyListSubheader"
  });
  const {
    component,
    className,
    children,
    id: idOverride,
    sticky = false,
    variant,
    color: colorProp
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded6);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const id = useId(idOverride);
  const setSubheaderId = React16.useContext(ListSubheaderContext_default);
  React16.useEffect(() => {
    if (setSubheaderId) {
      setSubheaderId(id || "");
    }
  }, [setSubheaderId, id]);
  const ownerState = _extends({}, props, {
    id,
    sticky,
    variant,
    color: variant ? color != null ? color : "neutral" : color
  });
  const classes = useUtilityClasses6(ownerState);
  return (0, import_jsx_runtime11.jsx)(ListSubheaderRoot, _extends({
    ref,
    id,
    as: component,
    className: clsx_m_default(classes.root, className),
    ownerState
  }, other, {
    children
  }));
});
true ? ListSubheader.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: import_prop_types6.default.node,
  /**
   * @ignore
   */
  className: import_prop_types6.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   */
  color: import_prop_types6.default.oneOfType([import_prop_types6.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types6.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types6.default.elementType,
  /**
   * @ignore
   */
  id: import_prop_types6.default.string,
  /**
   * If `true`, the component has sticky position (with top = 0).
   * @default false
   */
  sticky: import_prop_types6.default.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types6.default.oneOfType([import_prop_types6.default.arrayOf(import_prop_types6.default.oneOfType([import_prop_types6.default.func, import_prop_types6.default.object, import_prop_types6.default.bool])), import_prop_types6.default.func, import_prop_types6.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   */
  variant: import_prop_types6.default.oneOfType([import_prop_types6.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types6.default.string])
} : void 0;
var ListSubheader_default = ListSubheader;

// node_modules/@mui/joy/ListItem/ListItem.js
init_objectWithoutPropertiesLoose();
init_extends();
var React17 = __toESM(require_react());
var import_prop_types7 = __toESM(require_prop_types());
init_clsx_m();
init_esm();

// node_modules/@mui/joy/ListItem/listItemClasses.js
function getListItemUtilityClass(slot) {
  return generateUtilityClass2("MuiListItem", slot);
}
var listItemClasses = generateUtilityClasses2("MuiListItem", ["root", "startAction", "endAction", "nested", "nesting", "sticky", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantSoft", "variantOutlined", "variantSolid"]);
var listItemClasses_default = listItemClasses;

// node_modules/@mui/joy/ListItem/ListItem.js
var import_jsx_runtime12 = __toESM(require_jsx_runtime());
var import_jsx_runtime13 = __toESM(require_jsx_runtime());
var _excluded7 = ["component", "className", "children", "nested", "sticky", "variant", "color", "startAction", "endAction", "role"];
var useUtilityClasses7 = (ownerState) => {
  const {
    sticky,
    nested,
    nesting,
    variant,
    color
  } = ownerState;
  const slots = {
    root: ["root", nested && "nested", nesting && "nesting", sticky && "sticky", color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`],
    startAction: ["startAction"],
    endAction: ["endAction"]
  };
  return composeClasses(slots, getListItemUtilityClass, {});
};
var ListItemRoot = styled_default("li", {
  name: "JoyListItem",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  return [
    !ownerState.nested && {
      // add negative margin to ListItemButton equal to this ListItem padding
      "--List-itemButtonMarginInline": `calc(-1 * var(--ListItem-paddingLeft)) calc(-1 * var(--ListItem-paddingRight))`,
      "--List-itemButtonMarginBlock": "calc(-1 * var(--ListItem-paddingY))",
      alignItems: "center",
      marginInline: "var(--ListItem-marginInline)"
    },
    ownerState.nested && {
      // add negative margin to NestedList equal to this ListItem padding
      "--NestedList-marginRight": "calc(-1 * var(--ListItem-paddingRight))",
      "--NestedList-marginLeft": "calc(-1 * var(--ListItem-paddingLeft))",
      "--NestedList-item-paddingLeft": `calc(var(--ListItem-paddingLeft) + var(--List-nestedInsetStart))`,
      // add negative margin to ListItem, ListItemButton to make them start from the edge.
      "--List-itemButtonMarginBlock": "0px",
      "--List-itemButtonMarginInline": "calc(-1 * var(--ListItem-paddingLeft)) calc(-1 * var(--ListItem-paddingRight))",
      "--ListItem-marginInline": "calc(-1 * var(--ListItem-paddingLeft)) calc(-1 * var(--ListItem-paddingRight))",
      flexDirection: "column"
    },
    // Base styles
    _extends({
      // Integration with control elements, eg. Checkbox, Radio.
      "--unstable_actionRadius": "calc(var(--ListItem-radius) - var(--variant-borderWidth, 0px))"
    }, ownerState.startAction && {
      "--unstable_startActionWidth": "2rem"
      // to add sufficient padding-left on ListItemButton
    }, ownerState.endAction && {
      "--unstable_endActionWidth": "2.5rem"
      // to add sufficient padding-right on ListItemButton
    }, {
      boxSizing: "border-box",
      borderRadius: "var(--ListItem-radius)",
      display: "flex",
      flex: "none",
      // prevent children from shrinking when the List's height is limited.
      position: "relative",
      paddingBlockStart: ownerState.nested ? 0 : "var(--ListItem-paddingY)",
      paddingBlockEnd: ownerState.nested ? 0 : "var(--ListItem-paddingY)",
      paddingInlineStart: "var(--ListItem-paddingLeft)",
      paddingInlineEnd: "var(--ListItem-paddingRight)"
    }, ownerState["data-first-child"] === void 0 && _extends({}, ownerState.row ? {
      marginInlineStart: "var(--List-gap)"
    } : {
      marginBlockStart: "var(--List-gap)"
    }), ownerState.row && ownerState.wrap && {
      marginInlineStart: "var(--List-gap)",
      marginBlockStart: "var(--List-gap)"
    }, {
      minBlockSize: "var(--ListItem-minHeight)",
      fontSize: "var(--ListItem-fontSize)",
      fontFamily: theme.vars.fontFamily.body
    }, ownerState.sticky && {
      // sticky in list item can be found in grouped options
      position: "sticky",
      top: "var(--ListItem-stickyTop, 0px)",
      // integration with Menu and Select.
      zIndex: 1,
      background: "var(--ListItem-stickyBackground)"
    }),
    (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]
  ];
});
var ListItemStartAction = styled_default("div", {
  name: "JoyListItem",
  slot: "StartAction",
  overridesResolver: (props, styles) => styles.startAction
})(({
  ownerState
}) => ({
  display: "inherit",
  position: "absolute",
  top: ownerState.nested ? "calc(var(--ListItem-minHeight) / 2)" : "50%",
  left: 0,
  transform: "translate(var(--ListItem-startActionTranslateX), -50%)",
  zIndex: 1
  // to stay on top of ListItemButton (default `position: relative`).
}));
var ListItemEndAction = styled_default("div", {
  name: "JoyListItem",
  slot: "StartAction",
  overridesResolver: (props, styles) => styles.startAction
})(({
  ownerState
}) => ({
  display: "inherit",
  position: "absolute",
  top: ownerState.nested ? "calc(var(--ListItem-minHeight) / 2)" : "50%",
  right: 0,
  transform: "translate(var(--ListItem-endActionTranslateX), -50%)"
}));
var ListItem = React17.forwardRef(function ListItem2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyListItem"
  });
  const menuContext = React17.useContext(MenuUnstyledContext_default);
  const listComponent = React17.useContext(ComponentListContext_default);
  const row = React17.useContext(RowListContext_default);
  const wrap = React17.useContext(WrapListContext_default);
  const nesting = React17.useContext(NestedListContext_default);
  const {
    component: componentProp,
    className,
    children,
    nested = false,
    sticky = false,
    variant = "plain",
    color: colorProp = "neutral",
    startAction,
    endAction,
    role: roleProp
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded7);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const [subheaderId, setSubheaderId] = React17.useState("");
  const [listElement, listRole] = (listComponent == null ? void 0 : listComponent.split(":")) || ["", ""];
  const component = componentProp || (listElement && !listElement.match(/^(ul|ol|menu)$/) ? "div" : void 0);
  let role = menuContext ? "none" : void 0;
  if (listComponent) {
    role = {
      menu: "none",
      menubar: "none",
      group: "presentation"
    }[listRole];
  }
  if (roleProp) {
    role = roleProp;
  }
  const ownerState = _extends({}, props, {
    sticky,
    startAction,
    endAction,
    row,
    wrap,
    variant,
    color,
    nesting,
    nested,
    component,
    role
  });
  const classes = useUtilityClasses7(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    additionalProps: {
      role
    },
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: ListItemRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotStartAction, startActionProps] = useSlot("startAction", {
    className: classes.startAction,
    elementType: ListItemStartAction,
    externalForwardedProps,
    ownerState
  });
  const [SlotEndAction, endActionProps] = useSlot("endAction", {
    className: classes.endAction,
    elementType: ListItemEndAction,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime12.jsx)(ListSubheaderContext_default.Provider, {
    value: setSubheaderId,
    children: (0, import_jsx_runtime12.jsx)(NestedListContext_default.Provider, {
      value: nested ? subheaderId || true : false,
      children: (0, import_jsx_runtime13.jsxs)(SlotRoot, _extends({}, rootProps, {
        children: [startAction && (0, import_jsx_runtime12.jsx)(SlotStartAction, _extends({}, startActionProps, {
          children: startAction
        })), React17.Children.map(children, (child, index) => React17.isValidElement(child) ? React17.cloneElement(child, _extends({}, index === 0 && {
          "data-first-child": ""
        }, isMuiElement(child, ["ListItem"]) && {
          // The ListItem of ListItem should not be 'li'
          component: child.props.component || "div"
        })) : child), endAction && (0, import_jsx_runtime12.jsx)(SlotEndAction, _extends({}, endActionProps, {
          children: endAction
        }))]
      }))
    })
  });
});
true ? ListItem.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: import_prop_types7.default.node,
  /**
   * @ignore
   */
  className: import_prop_types7.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types7.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types7.default.elementType,
  /**
   * The element to display at the end of ListItem.
   */
  endAction: import_prop_types7.default.node,
  /**
   * If `true`, the component can contain NestedList.
   * @default false
   */
  nested: import_prop_types7.default.bool,
  /**
   * @ignore
   */
  role: import_prop_types7.default.string,
  /**
   * The element to display at the start of ListItem.
   */
  startAction: import_prop_types7.default.node,
  /**
   * If `true`, the component has sticky position (with top = 0).
   * @default false
   */
  sticky: import_prop_types7.default.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object, import_prop_types7.default.bool])), import_prop_types7.default.func, import_prop_types7.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types7.default.string])
} : void 0;
ListItem.muiName = "ListItem";
var ListItem_default = ListItem;

// node_modules/@mui/joy/Autocomplete/autocompleteClasses.js
function getAutocompleteUtilityClass(slot) {
  return generateUtilityClass2("MuiAutocomplete", slot);
}
var autocompleteClasses = generateUtilityClasses2("MuiAutocomplete", ["root", "wrapper", "input", "startDecorator", "endDecorator", "formControl", "focused", "disabled", "error", "multiple", "limitTag", "hasPopupIcon", "hasClearIcon", "clearIndicator", "popupIndicator", "popupIndicatorOpen", "listbox", "option", "loading", "noOptions", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var autocompleteClasses_default = autocompleteClasses;

// node_modules/@mui/joy/AutocompleteListbox/AutocompleteListbox.js
init_extends();
init_objectWithoutPropertiesLoose();
var React18 = __toESM(require_react());
init_clsx_m();
var import_prop_types8 = __toESM(require_prop_types());
init_esm();

// node_modules/@mui/joy/AutocompleteListbox/autocompleteListboxClasses.js
function getAutocompleteListboxUtilityClass(slot) {
  return generateUtilityClass2("MuiAutocompleteListbox", slot);
}
var autocompleteListboxClasses = generateUtilityClasses2("MuiAutocompleteListbox", ["root", "sizeSm", "sizeMd", "sizeLg", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var autocompleteListboxClasses_default = autocompleteListboxClasses;

// node_modules/@mui/joy/AutocompleteListbox/AutocompleteListbox.js
var import_jsx_runtime14 = __toESM(require_jsx_runtime());
var _excluded8 = ["anchorEl", "direction", "disablePortal", "modifiers", "open", "placement", "popperOptions", "popperRef", "TransitionProps"];
var _excluded23 = ["children", "className", "component", "color", "variant", "size"];
var useUtilityClasses8 = (ownerState) => {
  const {
    variant,
    color,
    size
  } = ownerState;
  const slots = {
    root: ["root", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getAutocompleteListboxUtilityClass, {});
};
var excludePopperProps = (_ref) => {
  let other = _objectWithoutPropertiesLoose(_ref, _excluded8);
  return other;
};
var StyledAutocompleteListbox = styled_default(StyledList)(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  const variantStyle = (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color];
  return _extends({
    "--focus-outline-offset": `calc(${theme.vars.focus.thickness} * -1)`,
    // to prevent the focus outline from being cut by overflow
    "--List-radius": theme.vars.radius.sm,
    "--ListItem-stickyBackground": (variantStyle == null ? void 0 : variantStyle.backgroundColor) || (variantStyle == null ? void 0 : variantStyle.background) || theme.vars.palette.background.popup,
    "--ListItem-stickyTop": "calc(var(--List-padding, var(--ListDivider-gap)) * -1)"
  }, scopedVariables, {
    boxShadow: theme.shadow.md
  }, !(variantStyle != null && variantStyle.backgroundColor) && {
    backgroundColor: theme.vars.palette.background.popup
  }, {
    zIndex: theme.vars.zIndex.popup,
    overflow: "auto",
    maxHeight: "40vh",
    position: "relative",
    // to make sure that the listbox is positioned for grouped options to work.
    "&:empty": {
      visibility: "hidden"
    },
    [`& .${listItemClasses_default.nested}, & .${listItemClasses_default.nested} .${listClasses_default.root}`]: {
      // For grouped options autocomplete:
      // Force the position to make the scroll into view logic works because the `element.offsetTop` should reference to the listbox, not the grouped list.
      // See the implementation of the `useAutocomplete` line:370
      //
      // Resource: https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetTop
      position: "initial"
    }
  });
});
var AutocompleteListboxRoot = styled_default(StyledAutocompleteListbox, {
  name: "JoyAutocompleteListbox",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({});
var AutocompleteListbox = React18.forwardRef(function AutocompleteListbox2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyAutocompleteListbox"
  });
  const {
    children,
    className,
    component,
    color: colorProp = "neutral",
    variant = "outlined",
    size = "md"
  } = props, otherProps = _objectWithoutPropertiesLoose(props, _excluded23);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const ownerState = _extends({}, props, {
    size,
    color,
    variant,
    nesting: false,
    row: false,
    wrap: false
  });
  const other = excludePopperProps(otherProps);
  const classes = useUtilityClasses8(ownerState);
  return (0, import_jsx_runtime14.jsx)(AutocompleteListboxRoot, _extends({
    ref,
    as: component,
    ownerState,
    className: clsx_m_default(classes.root, className),
    role: "listbox"
  }, other, {
    children
  }));
});
true ? AutocompleteListbox.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * @ignore
   */
  children: import_prop_types8.default.node,
  /**
   * @ignore
   */
  className: import_prop_types8.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types8.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types8.default.elementType,
  /**
   * The size of the component (affect other nested list* components).
   * @default 'md'
   */
  size: import_prop_types8.default.oneOf(["sm", "md", "lg"]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["contained", "light", "outlined", "text"]), import_prop_types8.default.string])
} : void 0;
var AutocompleteListbox_default = AutocompleteListbox;

// node_modules/@mui/joy/AutocompleteOption/AutocompleteOption.js
init_extends();
init_objectWithoutPropertiesLoose();
var React21 = __toESM(require_react());
init_clsx_m();
var import_prop_types10 = __toESM(require_prop_types());
init_esm();

// node_modules/@mui/joy/ListItemButton/ListItemButton.js
init_objectWithoutPropertiesLoose();
init_extends();
var React20 = __toESM(require_react());
var import_prop_types9 = __toESM(require_prop_types());
init_clsx_m();
init_esm();

// node_modules/@mui/joy/ListItemButton/listItemButtonClasses.js
function getListItemButtonUtilityClass(slot) {
  return generateUtilityClass2("MuiListItemButton", slot);
}
var listItemButtonClasses = generateUtilityClasses2("MuiListItemButton", ["root", "horizontal", "vertical", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "focusVisible", "disabled", "selected", "variantPlain", "variantSoft", "variantOutlined", "variantSolid"]);
var listItemButtonClasses_default = listItemButtonClasses;

// node_modules/@mui/joy/ListItemButton/ListItemButtonOrientationContext.js
var React19 = __toESM(require_react());
var ListItemButtonOrientationContext = React19.createContext("horizontal");
var ListItemButtonOrientationContext_default = ListItemButtonOrientationContext;

// node_modules/@mui/joy/ListItemButton/ListItemButton.js
var import_jsx_runtime15 = __toESM(require_jsx_runtime());
var _excluded9 = ["children", "className", "action", "component", "orientation", "role", "selected", "color", "variant"];
var useUtilityClasses9 = (ownerState) => {
  const {
    color,
    disabled,
    focusVisible,
    focusVisibleClassName,
    selected,
    variant
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", focusVisible && "focusVisible", color && `color${capitalize(color)}`, selected && "selected", variant && `variant${capitalize(variant)}`]
  };
  const composedClasses = composeClasses(slots, getListItemButtonUtilityClass, {});
  if (focusVisible && focusVisibleClassName) {
    composedClasses.root += ` ${focusVisibleClassName}`;
  }
  return composedClasses;
};
var StyledListItemButton = styled_default("div")(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$variants2, _theme$variants3, _theme$variants4, _theme$variants5, _theme$variants6, _theme$variants7;
  return [_extends({}, ownerState.selected && {
    "--List-decoratorColor": "initial"
  }, ownerState.disabled && {
    "--List-decoratorColor": (_theme$variants = theme.variants) == null ? void 0 : (_theme$variants2 = _theme$variants[`${ownerState.variant}Disabled`]) == null ? void 0 : (_theme$variants3 = _theme$variants2[ownerState.color]) == null ? void 0 : _theme$variants3.color
  }, {
    WebkitTapHighlightColor: "transparent",
    boxSizing: "border-box",
    position: "relative",
    display: "flex",
    flexDirection: ownerState.orientation === "vertical" ? "column" : "row",
    alignItems: "center",
    textAlign: "initial",
    textDecoration: "initial",
    // reset native anchor tag
    backgroundColor: "initial",
    // reset button background
    cursor: "pointer",
    // In some cases, ListItemButton is a child of ListItem so the margin needs to be controlled by the ListItem. The value is negative to account for the ListItem's padding
    marginInline: "var(--List-itemButtonMarginInline)",
    marginBlock: "var(--List-itemButtonMarginBlock)"
  }, ownerState["data-first-child"] === void 0 && {
    marginInlineStart: ownerState.row ? "var(--List-gap)" : void 0,
    marginBlockStart: ownerState.row ? void 0 : "var(--List-gap)"
  }, {
    // account for the border width, so that all of the ListItemButtons content aligned horizontally
    paddingBlock: "calc(var(--ListItem-paddingY) - var(--variant-borderWidth, 0px))",
    // account for the border width, so that all of the ListItemButtons content aligned vertically
    paddingInlineStart: "calc(var(--ListItem-paddingLeft) + var(--ListItem-startActionWidth, var(--unstable_startActionWidth, 0px)))",
    // --internal variable makes it possible to customize the actionWidth from the top List
    paddingInlineEnd: "calc(var(--ListItem-paddingRight) + var(--ListItem-endActionWidth, var(--unstable_endActionWidth, 0px)))",
    // --internal variable makes it possible to customize the actionWidth from the top List
    minBlockSize: "var(--ListItem-minHeight)",
    border: "none",
    borderRadius: "var(--ListItem-radius)",
    flexGrow: ownerState.row ? 0 : 1,
    flexBasis: ownerState.row ? "auto" : "0%",
    // for long text (in vertical), displays in multiple lines.
    flexShrink: 0,
    minInlineSize: 0,
    fontSize: "var(--ListItem-fontSize)",
    fontFamily: theme.vars.fontFamily.body
  }, ownerState.selected && {
    fontWeight: theme.vars.fontWeight.md
  }, {
    [theme.focus.selector]: theme.focus.default
  }), _extends({}, (_theme$variants4 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants4[ownerState.color], !ownerState.selected && {
    "&:hover": (_theme$variants5 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants5[ownerState.color],
    "&:active": (_theme$variants6 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants6[ownerState.color]
  }), {
    [`&.${listItemButtonClasses_default.disabled}`]: (_theme$variants7 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants7[ownerState.color]
  }];
});
var ListItemButtonRoot = styled_default(StyledListItemButton, {
  name: "JoyListItemButton",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({});
var ListItemButton = React20.forwardRef(function ListItemButton2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyListItemButton"
  });
  const row = React20.useContext(RowListContext_default);
  const {
    children,
    className,
    action,
    component = "div",
    orientation = "horizontal",
    role,
    selected = false,
    color: colorProp = selected ? "primary" : "neutral",
    variant = "plain"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded9);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const buttonRef = React20.useRef(null);
  const handleRef = useForkRef(buttonRef, ref);
  const {
    focusVisible,
    setFocusVisible,
    getRootProps
  } = useButton(_extends({}, props, {
    ref: handleRef
  }));
  React20.useImperativeHandle(action, () => ({
    focusVisible: () => {
      var _buttonRef$current;
      setFocusVisible(true);
      (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();
    }
  }), [setFocusVisible]);
  const ownerState = _extends({}, props, {
    component,
    color,
    focusVisible,
    orientation,
    row,
    selected,
    variant
  });
  const classes = useUtilityClasses9(ownerState);
  const rootProps = getRootProps();
  return (0, import_jsx_runtime15.jsx)(ListItemButtonOrientationContext_default.Provider, {
    value: orientation,
    children: (0, import_jsx_runtime15.jsx)(ListItemButtonRoot, _extends({
      as: component,
      className: clsx_m_default(classes.root, className),
      ownerState
    }, other, rootProps, {
      role: role != null ? role : rootProps.role,
      children
    }))
  });
});
true ? ListItemButton.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * A ref for imperative actions. It currently only supports `focusVisible()` action.
   */
  action: import_prop_types9.default.oneOfType([import_prop_types9.default.func, import_prop_types9.default.shape({
    current: import_prop_types9.default.shape({
      focusVisible: import_prop_types9.default.func.isRequired
    })
  })]),
  /**
   * If `true`, the list item is focused during the first mount.
   * Focus will also be triggered if the value changes from false to true.
   * @default false
   */
  autoFocus: import_prop_types9.default.bool,
  /**
   * The content of the component.
   */
  children: import_prop_types9.default.node,
  /**
   * @ignore
   */
  className: import_prop_types9.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default selected ? 'primary' : 'neutral'
   */
  color: import_prop_types9.default.oneOfType([import_prop_types9.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types9.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types9.default.elementType,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: import_prop_types9.default.bool,
  /**
   * This prop can help identify which element has keyboard focus.
   * The class name will be applied when the element gains the focus through keyboard interaction.
   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
   * if needed.
   */
  focusVisibleClassName: import_prop_types9.default.string,
  /**
   * The content direction flow.
   * @default 'horizontal'
   */
  orientation: import_prop_types9.default.oneOf(["horizontal", "vertical"]),
  /**
   * @ignore
   */
  role: import_prop_types9.default.string,
  /**
   * If `true`, the component is selected.
   * @default false
   */
  selected: import_prop_types9.default.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types9.default.oneOfType([import_prop_types9.default.arrayOf(import_prop_types9.default.oneOfType([import_prop_types9.default.func, import_prop_types9.default.object, import_prop_types9.default.bool])), import_prop_types9.default.func, import_prop_types9.default.object]),
  /**
   * @default 0
   */
  tabIndex: import_prop_types9.default.number,
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types9.default.oneOfType([import_prop_types9.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types9.default.string])
} : void 0;
var ListItemButton_default = ListItemButton;

// node_modules/@mui/joy/AutocompleteOption/autocompleteOptionClasses.js
function getAutocompleteOptionUtilityClass(slot) {
  return generateUtilityClass2("MuiAutocompleteOption", slot);
}
var autocompleteOptionClasses = generateUtilityClasses2("MuiAutocompleteOption", ["root", "focused", "focusVisible", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantSoft", "variantOutlined", "variantSolid"]);
var autocompleteOptionClasses_default = autocompleteOptionClasses;

// node_modules/@mui/joy/AutocompleteOption/AutocompleteOption.js
var import_jsx_runtime16 = __toESM(require_jsx_runtime());
var _excluded10 = ["children", "component", "color", "variant", "className"];
var useUtilityClasses10 = (ownerState) => {
  const {
    color,
    variant
  } = ownerState;
  const slots = {
    root: ["root", color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`]
  };
  return composeClasses(slots, getAutocompleteOptionUtilityClass, {});
};
var StyledAutocompleteOption = styled_default(StyledListItemButton)(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$variants$soft, _theme$variants$soft2, _theme$variants$soft3, _theme$variants$soft4, _theme$variants2, _theme$variants3;
  return {
    '&[aria-disabled="true"]': (_theme$variants = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants[ownerState.color],
    '&[aria-selected="true"]': {
      color: (_theme$variants$soft = theme.variants.soft) == null ? void 0 : (_theme$variants$soft2 = _theme$variants$soft[ownerState.color === "context" ? "context" : "primary"]) == null ? void 0 : _theme$variants$soft2.color,
      backgroundColor: (_theme$variants$soft3 = theme.variants.soft) == null ? void 0 : (_theme$variants$soft4 = _theme$variants$soft3[ownerState.color === "context" ? "context" : "primary"]) == null ? void 0 : _theme$variants$soft4.backgroundColor,
      fontWeight: theme.vars.fontWeight.md
    },
    [`&.${autocompleteOptionClasses_default.focused}:not([aria-selected="true"]):not(:hover)`]: {
      // create the focused style similar to the hover state
      backgroundColor: (_theme$variants2 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : (_theme$variants3 = _theme$variants2[ownerState.color]) == null ? void 0 : _theme$variants3.backgroundColor
    }
  };
});
var AutocompleteOptionRoot = styled_default(StyledAutocompleteOption, {
  name: "JoyAutocompleteOption",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({});
var AutocompleteOption = React21.forwardRef(function AutocompleteOption2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyAutocompleteOption"
  });
  const {
    children,
    component = "li",
    color: colorProp = "neutral",
    variant = "plain",
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded10);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const ownerState = _extends({}, props, {
    component,
    color,
    variant
  });
  const classes = useUtilityClasses10(ownerState);
  return (0, import_jsx_runtime16.jsx)(AutocompleteOptionRoot, _extends({
    ref,
    as: component,
    ownerState,
    className: clsx_m_default(classes.root, className),
    role: "option"
  }, other, {
    children
  }));
});
true ? AutocompleteOption.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * @ignore
   */
  children: import_prop_types10.default.node,
  /**
   * @ignore
   */
  className: import_prop_types10.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types10.default.oneOfType([import_prop_types10.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types10.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types10.default.elementType,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types10.default.oneOfType([import_prop_types10.default.arrayOf(import_prop_types10.default.oneOfType([import_prop_types10.default.func, import_prop_types10.default.object, import_prop_types10.default.bool])), import_prop_types10.default.func, import_prop_types10.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types10.default.oneOfType([import_prop_types10.default.oneOf(["contained", "light", "outlined", "text"]), import_prop_types10.default.string])
} : void 0;
var AutocompleteOption_default = AutocompleteOption;

// node_modules/@mui/joy/Autocomplete/Autocomplete.js
var import_jsx_runtime17 = __toESM(require_jsx_runtime());
var import_jsx_runtime18 = __toESM(require_jsx_runtime());
var _ClearIcon;
var _ArrowDropDownIcon;
var _excluded11 = ["autoComplete", "autoHighlight", "autoSelect", "blurOnSelect", "clearOnBlur", "clearOnEscape", "defaultValue", "disableCloseOnSelect", "disabledItemsFocusable", "disableListWrap", "filterSelectedOptions", "handleHomeEndKeys", "includeInputInList", "openOnFocus", "selectOnFocus"];
var _excluded24 = ["aria-describedby", "aria-label", "aria-labelledby", "autoFocus", "clearIcon", "clearText", "closeText", "disableClearable", "disabled", "endDecorator", "error", "filterOptions", "forcePopupIcon", "freeSolo", "getLimitTagsText", "getOptionDisabled", "getOptionLabel", "isOptionEqualToValue", "groupBy", "id", "inputValue", "limitTags", "loading", "loadingText", "multiple", "name", "noOptionsText", "onChange", "onClose", "onHighlightChange", "onInputChange", "onOpen", "open", "openText", "options", "placeholder", "popupIcon", "readOnly", "renderGroup", "renderOption", "renderTags", "required", "type", "startDecorator", "size", "color", "variant", "value"];
var _excluded32 = ["onDelete"];
var _excluded42 = ["onBlur", "onFocus", "onMouseDown"];
var defaultIsActiveElementInListbox = (listboxRef) => listboxRef.current !== null && listboxRef.current.contains(document.activeElement);
var defaultGetOptionLabel = (option) => {
  var _option$label;
  return (_option$label = option.label) != null ? _option$label : option;
};
var defaultLimitTagsText = (more) => `+${more}`;
var defaultRenderGroup = (params) => (0, import_jsx_runtime18.jsxs)(ListItem_default, {
  nested: true,
  children: [(0, import_jsx_runtime17.jsx)(ListSubheader_default, {
    sticky: true,
    children: params.group
  }), (0, import_jsx_runtime17.jsx)(List_default, {
    children: params.children
  })]
}, params.key);
var defaultVariantMapping = {
  plain: "plain",
  outlined: "plain",
  soft: "soft",
  solid: "solid"
};
var useUtilityClasses11 = (ownerState) => {
  const {
    disabled,
    focused,
    hasClearIcon,
    hasPopupIcon,
    popupOpen,
    variant,
    color,
    size,
    multiple
  } = ownerState;
  const slots = {
    root: ["root", focused && "focused", hasClearIcon && "hasClearIcon", hasPopupIcon && "hasPopupIcon", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`],
    wrapper: ["wrapper", multiple && "multiple"],
    input: ["input"],
    startDecorator: ["startDecorator"],
    endDecorator: ["endDecorator"],
    clearIndicator: ["clearIndicator"],
    popupIndicator: ["popupIndicator", popupOpen && "popupIndicatorOpen", disabled && "disabled"],
    listbox: ["listbox"],
    option: ["option"],
    loading: ["loading"],
    noOptions: ["noOptions"],
    limitTag: ["limitTag"]
  };
  return composeClasses(slots, getAutocompleteUtilityClass, {});
};
var AutocompleteRoot = styled_default(StyledInputRoot, {
  name: "JoyAutocomplete",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState
}) => _extends({
  "--Autocomplete-wrapperGap": "3px"
}, ownerState.size === "lg" && {
  "--Autocomplete-wrapperGap": "4px"
}, {
  /* Avoid double tap issue on iOS */
  "@media (pointer: fine)": {
    [`&:hover .${autocompleteClasses_default.clearIndicator}`]: {
      visibility: "visible"
    }
  }
}, ownerState.multiple && !ownerState.startDecorator && {
  paddingInlineStart: 0
}));
var AutocompleteWrapper = styled_default("div", {
  name: "JoyAutocomplete",
  slot: "Wrapper",
  overridesResolver: (props, styles) => styles.wrapper
})(({
  ownerState
}) => ({
  flex: 1,
  // stretch to fill the root slot
  minWidth: 0,
  // won't push end decorator out of the autocomplete
  display: "flex",
  alignItems: "center",
  flexWrap: "wrap",
  [`&.${autocompleteClasses_default.multiple}`]: _extends({
    paddingBlockEnd: "min(var(--_Input-paddingBlock), var(--Autocomplete-wrapperGap))"
  }, ownerState.startDecorator && Array.isArray(ownerState.value) && ownerState.value.length > 0 && {
    marginBlockStart: "min(var(--_Input-paddingBlock) - var(--Autocomplete-wrapperGap), 0px)",
    marginInlineStart: "calc(-1 * var(--Autocomplete-wrapperGap))",
    [`& .${autocompleteClasses_default.input}`]: {
      marginInlineStart: "max(var(--Autocomplete-wrapperGap), var(--Input-gap))"
    }
  }),
  [`& .${chipClasses_default.root}`]: {
    // TODO: use flexbox `gap` later.
    minWidth: 0,
    marginInlineStart: "var(--Autocomplete-wrapperGap)",
    marginBlockStart: "var(--Autocomplete-wrapperGap)"
  }
}));
var AutocompleteInput = styled_default(StyledInputHtml, {
  name: "JoyAutocomplete",
  slot: "Input",
  overridesResolver: (props, styles) => styles.input
})(({
  ownerState
}) => _extends({
  minWidth: 30,
  minHeight: "var(--Chip-minHeight)"
}, ownerState.multiple && _extends({
  marginBlockStart: "var(--Autocomplete-wrapperGap)"
}, !ownerState.startDecorator && {
  marginInlineStart: "var(--Input-paddingInline)"
})));
var AutocompleteStartDecorator = styled_default(StyledInputStartDecorator, {
  name: "JoyAutocomplete",
  slot: "StartDecorator",
  overridesResolver: (props, styles) => styles.startDecorator
})({});
var AutocompleteEndDecorator = styled_default(StyledInputEndDecorator, {
  name: "JoyAutocomplete",
  slot: "EndDecorator",
  overridesResolver: (props, styles) => styles.endDecorator
})(({
  ownerState
}) => _extends({}, (ownerState.hasClearIcon || ownerState.hasPopupIcon) && {
  "--Button-margin": "0px",
  "--IconButton-margin": "0px",
  "--Icon-margin": "0px"
}));
var AutocompleteClearIndicator = styled_default(StyledIconButton, {
  name: "JoyAutocomplete",
  slot: "ClearIndicator",
  overridesResolver: (props, styles) => styles.clearIndicator
})(({
  ownerState
}) => _extends({}, !ownerState.hasPopupIcon && {
  marginInlineEnd: "calc(var(--Input-decoratorChildOffset) * -1)"
}, {
  marginInlineStart: "calc(var(--_Input-paddingBlock) / 2)",
  visibility: ownerState.focused ? "visible" : "hidden"
}));
var AutocompletePopupIndicator = styled_default(StyledIconButton, {
  name: "JoyAutocomplete",
  slot: "PopupIndicator",
  overridesResolver: (props, styles) => styles.popupIndicator
})(({
  ownerState
}) => _extends({
  marginInlineStart: "calc(var(--_Input-paddingBlock) / 2)",
  marginInlineEnd: "calc(var(--Input-decoratorChildOffset) * -1)"
}, ownerState.popupOpen && {
  transform: "rotate(180deg)"
}));
var AutocompleteListbox3 = styled_default(StyledAutocompleteListbox, {
  name: "JoyAutocomplete",
  slot: "Listbox",
  overridesResolver: (props, styles) => styles.listbox
})({});
var AutocompleteOption3 = styled_default(StyledAutocompleteOption, {
  name: "JoyAutocomplete",
  slot: "Option",
  overridesResolver: (props, styles) => styles.option
})({});
var AutocompleteLoading = styled_default(ListItem_default, {
  name: "JoyAutocomplete",
  slot: "Loading",
  overridesResolver: (props, styles) => styles.loading
})(({
  theme
}) => ({
  color: (theme.vars || theme).palette.text.secondary
}));
var AutocompleteNoOptions = styled_default(ListItem_default, {
  name: "JoyAutocomplete",
  slot: "NoOptions",
  overridesResolver: (props, styles) => styles.noOptions
})(({
  theme
}) => ({
  color: (theme.vars || theme).palette.text.secondary
}));
var AutocompleteLimitTag = styled_default("span", {
  name: "JoyAutocomplete",
  slot: "NoOptions",
  overridesResolver: (props, styles) => styles.noOptions
})({
  marginInlineStart: "calc(var(--Input-paddingInline) / 2)",
  marginBlockStart: "var(--_Input-paddingBlock)"
});
var excludeUseAutocompleteParams = (_ref) => {
  let other = _objectWithoutPropertiesLoose(_ref, _excluded11);
  return other;
};
var Autocomplete = React22.forwardRef(function Autocomplete2(inProps, ref) {
  var _ref2, _inProps$error, _ref3, _inProps$size, _formControl$color, _ref4;
  const props = useThemeProps({
    props: inProps,
    name: "JoyAutocomplete"
  });
  const {
    "aria-describedby": ariaDescribedby,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    autoFocus,
    clearIcon = _ClearIcon || (_ClearIcon = (0, import_jsx_runtime17.jsx)(Close_default, {
      fontSize: "md"
    })),
    clearText = "Clear",
    closeText = "Close",
    disableClearable = false,
    disabled: disabledProp,
    endDecorator,
    error: errorProp = false,
    forcePopupIcon = "auto",
    freeSolo = false,
    getLimitTagsText = defaultLimitTagsText,
    getOptionLabel = defaultGetOptionLabel,
    groupBy,
    id,
    limitTags = -1,
    loading = false,
    loadingText = "Loading…",
    multiple = false,
    name,
    noOptionsText = "No options",
    openText = "Open",
    placeholder,
    popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = (0, import_jsx_runtime17.jsx)(ArrowDropDown_default, {})),
    readOnly = false,
    renderGroup = defaultRenderGroup,
    renderOption: renderOptionProp,
    renderTags,
    required,
    type,
    startDecorator,
    size: sizeProp = "md",
    color: colorProp = "neutral",
    variant = "outlined"
  } = props, otherProps = _objectWithoutPropertiesLoose(props, _excluded24);
  const other = excludeUseAutocompleteParams(otherProps);
  const {
    getColor
  } = useColorInversion(variant);
  const formControl = React22.useContext(FormControlContext_default);
  const error = (_ref2 = (_inProps$error = inProps.error) != null ? _inProps$error : formControl == null ? void 0 : formControl.error) != null ? _ref2 : errorProp;
  const size = (_ref3 = (_inProps$size = inProps.size) != null ? _inProps$size : formControl == null ? void 0 : formControl.size) != null ? _ref3 : sizeProp;
  const color = getColor(inProps.color, error ? "danger" : (_formControl$color = formControl == null ? void 0 : formControl.color) != null ? _formControl$color : colorProp);
  const disabled = (_ref4 = disabledProp != null ? disabledProp : formControl == null ? void 0 : formControl.disabled) != null ? _ref4 : false;
  const {
    getRootProps,
    getInputProps,
    getPopupIndicatorProps,
    getClearProps,
    getTagProps,
    getListboxProps,
    getOptionProps,
    value,
    dirty,
    popupOpen,
    focused,
    focusedTag,
    anchorEl,
    setAnchorEl,
    inputValue,
    groupedOptions
  } = useAutocomplete(_extends({}, props, {
    id: id != null ? id : formControl == null ? void 0 : formControl.htmlFor,
    componentName: "Autocomplete",
    unstable_classNamePrefix: "Joy",
    unstable_isActiveElementInListbox: defaultIsActiveElementInListbox
  }));
  const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;
  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;
  const ownerState = _extends({}, props, {
    value,
    disabled,
    focused,
    hasOptions: !!groupedOptions.length,
    hasClearIcon,
    hasPopupIcon,
    inputFocused: focusedTag === -1,
    popupOpen,
    size,
    color,
    variant
  });
  const classes = useUtilityClasses11(ownerState);
  let selectedOptions;
  if (multiple && value.length > 0) {
    const getCustomizedTagProps = (params) => {
      const _getTagProps = getTagProps(params), {
        onDelete
      } = _getTagProps, tagProps = _objectWithoutPropertiesLoose(_getTagProps, _excluded32);
      return _extends({
        disabled,
        size,
        onClick: onDelete
      }, tagProps);
    };
    if (renderTags) {
      selectedOptions = renderTags(value, getCustomizedTagProps, ownerState);
    } else {
      selectedOptions = value.map((option, index) => {
        return (0, import_jsx_runtime17.jsx)(Chip_default, {
          size,
          variant: "soft",
          color: color === "context" ? void 0 : "neutral",
          endDecorator: (0, import_jsx_runtime17.jsx)(ChipDelete_default, _extends({}, getCustomizedTagProps({
            index
          }))),
          children: getOptionLabel(option)
        }, index);
      });
    }
  }
  const rootRef = useForkRef(ref, setAnchorEl);
  const rootStateClasses = {
    [autocompleteClasses_default.disabled]: disabled,
    [autocompleteClasses_default.error]: error,
    [autocompleteClasses_default.focused]: focused,
    [autocompleteClasses_default.formControl]: Boolean(formControl)
  };
  const [SlotRoot, rootProps] = useSlot("root", {
    ref: rootRef,
    className: [classes.root, rootStateClasses],
    elementType: AutocompleteRoot,
    externalForwardedProps: other,
    ownerState,
    getSlotProps: getRootProps
  });
  const [SlotWrapper, wrapperProps] = useSlot("wrapper", {
    className: classes.wrapper,
    elementType: AutocompleteWrapper,
    externalForwardedProps: other,
    ownerState
  });
  const inputStateClasses = {
    [autocompleteClasses_default.disabled]: disabled
  };
  const [SlotInput, inputProps] = useSlot("input", {
    className: [classes.input, inputStateClasses],
    elementType: AutocompleteInput,
    getSlotProps: (handlers) => {
      const _getInputProps = getInputProps(), {
        onBlur,
        onFocus,
        onMouseDown
      } = _getInputProps, inputSlotProps = _objectWithoutPropertiesLoose(_getInputProps, _excluded42);
      return _extends({}, inputSlotProps, {
        onBlur: (event) => {
          var _handlers$onBlur;
          onBlur == null ? void 0 : onBlur(event);
          (_handlers$onBlur = handlers.onBlur) == null ? void 0 : _handlers$onBlur.call(handlers, event);
        },
        onFocus: (event) => {
          var _handlers$onFocus;
          onFocus == null ? void 0 : onFocus(event);
          (_handlers$onFocus = handlers.onFocus) == null ? void 0 : _handlers$onFocus.call(handlers, event);
        },
        onMouseDown: (event) => {
          var _handlers$onMouseDown;
          onMouseDown == null ? void 0 : onMouseDown(event);
          (_handlers$onMouseDown = handlers.onMouseDown) == null ? void 0 : _handlers$onMouseDown.call(handlers, event);
        }
      });
    },
    externalForwardedProps: other,
    ownerState,
    additionalProps: {
      autoFocus,
      placeholder,
      name,
      readOnly,
      disabled,
      required: required != null ? required : formControl == null ? void 0 : formControl.required,
      type,
      "aria-invalid": error || void 0,
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledby,
      "aria-describedby": ariaDescribedby != null ? ariaDescribedby : formControl == null ? void 0 : formControl["aria-describedby"]
    }
  });
  const [SlotStartDecorator, startDecoratorProps] = useSlot("startDecorator", {
    className: classes.startDecorator,
    elementType: AutocompleteStartDecorator,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot("endDecorator", {
    className: classes.endDecorator,
    elementType: AutocompleteEndDecorator,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotClearIndicator, clearIndicatorProps] = useSlot("clearIndicator", {
    className: classes.clearIndicator,
    elementType: AutocompleteClearIndicator,
    getSlotProps: getClearProps,
    externalForwardedProps: other,
    ownerState,
    getSlotOwnerState: (mergedProps) => ({
      size: mergedProps.size || size,
      variant: mergedProps.variant || defaultVariantMapping[variant] || "plain",
      color: mergedProps.color || "neutral"
    }),
    additionalProps: {
      "aria-label": clearText,
      title: clearText
    }
  });
  const [SlotPopupIndicator, popupIndicatorProps] = useSlot("popupIndicator", {
    className: classes.popupIndicator,
    elementType: AutocompletePopupIndicator,
    getSlotProps: getPopupIndicatorProps,
    externalForwardedProps: other,
    ownerState,
    getSlotOwnerState: (mergedProps) => ({
      size: mergedProps.size || size,
      variant: mergedProps.variant || defaultVariantMapping[variant] || "plain",
      color: mergedProps.color || "neutral"
    }),
    additionalProps: {
      disabled,
      "aria-label": popupOpen ? closeText : openText,
      title: popupOpen ? closeText : openText,
      type: "button"
    }
  });
  const [SlotListbox, listboxProps] = useSlot("listbox", {
    className: classes.listbox,
    elementType: PopperUnstyled_default,
    getSlotProps: getListboxProps,
    externalForwardedProps: other,
    ownerState,
    getSlotOwnerState: (mergedProps) => ({
      size: mergedProps.size || size,
      variant: mergedProps.variant || "outlined",
      color: mergedProps.color || "neutral",
      disableColorInversion: !mergedProps.disablePortal
    }),
    additionalProps: {
      anchorEl,
      open: popupOpen,
      style: anchorEl ? {
        width: anchorEl.clientWidth
      } : {}
    },
    internalForwardedProps: {
      component: AutocompleteListbox3
    }
  });
  const [SlotLoading, loadingProps] = useSlot("loading", {
    className: classes.loading,
    elementType: AutocompleteLoading,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotNoOptions, noOptionsProps] = useSlot("noOptions", {
    className: classes.noOptions,
    elementType: AutocompleteNoOptions,
    externalForwardedProps: other,
    ownerState,
    additionalProps: {
      role: "presentation",
      onMouseDown: (event) => {
        event.preventDefault();
      }
    }
  });
  const [SlotLimitTag, limitTagProps] = useSlot("limitTag", {
    className: classes.limitTag,
    elementType: AutocompleteLimitTag,
    externalForwardedProps: other,
    ownerState
  });
  if (limitTags > -1 && Array.isArray(selectedOptions)) {
    const more = selectedOptions.length - limitTags;
    if (!focused && more > 0) {
      selectedOptions = selectedOptions.splice(0, limitTags);
      selectedOptions.push((0, import_jsx_runtime17.jsx)(SlotLimitTag, _extends({}, limitTagProps, {
        children: getLimitTagsText(more)
      }), selectedOptions.length));
    }
  }
  const [SlotOption, baseOptionProps] = useSlot("option", {
    className: classes.option,
    elementType: AutocompleteOption3,
    externalForwardedProps: other,
    ownerState,
    getSlotOwnerState: (mergedProps) => ({
      variant: mergedProps.variant || "plain",
      color: mergedProps.color || "neutral",
      disableColorInversion: !listboxProps.disablePortal
    }),
    additionalProps: {
      as: "li"
    }
  });
  const defaultRenderOption = (optionProps, option) => (0, import_jsx_runtime17.jsx)(SlotOption, _extends({}, optionProps, {
    children: getOptionLabel(option)
  }));
  const renderOption = renderOptionProp || defaultRenderOption;
  const renderListOption = (option, index) => {
    const optionProps = getOptionProps({
      option,
      index
    });
    return renderOption(_extends({}, baseOptionProps, optionProps), option, {
      // `aria-selected` prop will always by boolean, see useAutocomplete hook.
      selected: !!optionProps["aria-selected"],
      inputValue,
      ownerState
    });
  };
  const modifiers = React22.useMemo(() => [{
    name: "offset",
    options: {
      offset: [0, 4]
    }
  }, ...listboxProps.modifiers || []], [listboxProps.modifiers]);
  let popup = null;
  if (anchorEl) {
    var _listboxProps$ownerSt;
    popup = (0, import_jsx_runtime17.jsx)(ListProvider_default, {
      nested: true,
      children: (0, import_jsx_runtime18.jsxs)(SlotListbox, _extends({}, listboxProps, {
        className: clsx_m_default(listboxProps.className, ((_listboxProps$ownerSt = listboxProps.ownerState) == null ? void 0 : _listboxProps$ownerSt.color) === "context" && autocompleteClasses_default.colorContext),
        modifiers,
        children: [groupedOptions.map((option, index) => {
          if (groupBy) {
            const typedOption = option;
            return renderGroup({
              key: String(typedOption.key),
              group: typedOption.group,
              children: typedOption.options.map((option2, index2) => renderListOption(option2, typedOption.index + index2))
            });
          }
          return renderListOption(option, index);
        }), loading && groupedOptions.length === 0 ? (0, import_jsx_runtime17.jsx)(SlotLoading, _extends({}, loadingProps, {
          children: loadingText
        })) : null, groupedOptions.length === 0 && !freeSolo && !loading ? (0, import_jsx_runtime17.jsx)(SlotNoOptions, _extends({}, noOptionsProps, {
          children: noOptionsText
        })) : null]
      }))
    });
    if (!listboxProps.disablePortal) {
      popup = (0, import_jsx_runtime17.jsx)(ColorInversion_default.Provider, {
        value: void 0,
        children: popup
      });
    }
  }
  return (0, import_jsx_runtime18.jsxs)(React22.Fragment, {
    children: [(0, import_jsx_runtime18.jsxs)(SlotRoot, _extends({}, rootProps, {
      children: [startDecorator && (0, import_jsx_runtime17.jsx)(SlotStartDecorator, _extends({}, startDecoratorProps, {
        children: startDecorator
      })), (0, import_jsx_runtime18.jsxs)(SlotWrapper, _extends({}, wrapperProps, {
        children: [selectedOptions, (0, import_jsx_runtime17.jsx)(SlotInput, _extends({}, inputProps))]
      })), endDecorator && (0, import_jsx_runtime17.jsx)(SlotEndDecorator, _extends({}, endDecoratorProps, {
        children: endDecorator
      })), hasClearIcon ? (0, import_jsx_runtime17.jsx)(SlotClearIndicator, _extends({}, clearIndicatorProps, {
        children: clearIcon
      })) : null, hasPopupIcon ? (0, import_jsx_runtime17.jsx)(SlotPopupIndicator, _extends({}, popupIndicatorProps, {
        children: popupIcon
      })) : null]
    })), popup]
  });
});
true ? Autocomplete.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Identifies the element (or elements) that describes the object.
   * @see aria-labelledby
   */
  "aria-describedby": import_prop_types11.default.string,
  /**
   * Defines a string value that labels the current element.
   * @see aria-labelledby.
   */
  "aria-label": import_prop_types11.default.string,
  /**
   * Identifies the element (or elements) that labels the current element.
   * @see aria-describedby.
   */
  "aria-labelledby": import_prop_types11.default.string,
  /**
   * If `true`, the `input` element is focused during the first mount.
   */
  autoFocus: import_prop_types11.default.bool,
  /**
   * The icon to display in place of the default clear icon.
   * @default <ClearIcon fontSize="md" />
   */
  clearIcon: import_prop_types11.default.node,
  /**
   * Override the default text for the *clear* icon button.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   * @default 'Clear'
   */
  clearText: import_prop_types11.default.string,
  /**
   * Override the default text for the *close popup* icon button.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   * @default 'Close'
   */
  closeText: import_prop_types11.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types11.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]),
  /**
   * The default value. Use when the component is not controlled.
   * @default props.multiple ? [] : null
   */
  defaultValue: chainPropTypes(import_prop_types11.default.any, (props) => {
    if (props.multiple && props.defaultValue !== void 0 && !Array.isArray(props.defaultValue)) {
      return new Error(["MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.", `However, ${props.defaultValue} was provided.`].join("\n"));
    }
    return null;
  }),
  /**
   * If `true`, the input can't be cleared.
   * @default false
   */
  disableClearable: import_prop_types11.default.bool,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: import_prop_types11.default.bool,
  /**
   * Trailing adornment for this input.
   */
  endDecorator: import_prop_types11.default.node,
  /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   * @default false
   */
  error: import_prop_types11.default.bool,
  /**
   * A function that determines the filtered options to be rendered on search.
   *
   * @param {T[]} options The options to render.
   * @param {object} state The state of the component.
   * @returns {T[]}
   */
  filterOptions: import_prop_types11.default.func,
  /**
   * Force the visibility display of the popup icon.
   * @default 'auto'
   */
  forcePopupIcon: import_prop_types11.default.oneOfType([import_prop_types11.default.oneOf(["auto"]), import_prop_types11.default.bool]),
  /**
   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.
   * @default false
   */
  freeSolo: import_prop_types11.default.bool,
  /**
   * The label to display when the tags are truncated (`limitTags`).
   *
   * @param {string | number} more The number of truncated tags.
   * @returns {ReactNode}
   * @default (more: string | number) => `+${more}`
   */
  getLimitTagsText: import_prop_types11.default.func,
  /**
   * Used to determine the disabled state for a given option.
   *
   * @param {T} option The option to test.
   * @returns {boolean}
   */
  getOptionDisabled: import_prop_types11.default.func,
  /**
   * Used to determine the string value for a given option.
   * It's used to fill the input (and the list box options if `renderOption` is not provided).
   *
   * If used in free solo mode, it must accept both the type of the options and a string.
   *
   * @param {T} option
   * @returns {string}
   * @default (option) => option.label ?? option
   */
  getOptionLabel: import_prop_types11.default.func,
  /**
   * If provided, the options will be grouped under the returned string.
   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.
   *
   * @param {T} options The options to group.
   * @returns {string}
   */
  groupBy: import_prop_types11.default.func,
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide an id it will fall back to a randomly generated one.
   */
  id: import_prop_types11.default.string,
  /**
   * The input value.
   */
  inputValue: import_prop_types11.default.string,
  /**
   * Used to determine if the option represents the given value.
   * Uses strict equality by default.
   * ⚠️ Both arguments need to be handled, an option can only match with one value.
   *
   * @param {T} option The option to test.
   * @param {T} value The value to test against.
   * @returns {boolean}
   */
  isOptionEqualToValue: import_prop_types11.default.func,
  /**
   * The maximum number of tags that will be visible when not focused.
   * Set `-1` to disable the limit.
   * @default -1
   */
  limitTags: integerPropType_default,
  /**
   * If `true`, the component is in a loading state.
   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, e.g. `options` are empty).
   * @default false
   */
  loading: import_prop_types11.default.bool,
  /**
   * Text to display when in a loading state.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   * @default 'Loading…'
   */
  loadingText: import_prop_types11.default.node,
  /**
   * If `true`, `value` must be an array and the menu will support multiple selections.
   * @default false
   */
  multiple: import_prop_types11.default.bool,
  /**
   * Name attribute of the `input` element.
   */
  name: import_prop_types11.default.string,
  /**
   * Text to display when there are no options.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   * @default 'No options'
   */
  noOptionsText: import_prop_types11.default.node,
  /**
   * Callback fired when the value changes.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   * @param {T|T[]} value The new value of the component.
   * @param {string} reason One of "createOption", "selectOption", "removeOption", "blur" or "clear".
   * @param {string} [details]
   */
  onChange: import_prop_types11.default.func,
  /**
   * Callback fired when the popup requests to be closed.
   * Use in controlled mode (see open).
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   * @param {string} reason Can be: `"toggleInput"`, `"escape"`, `"selectOption"`, `"removeOption"`, `"blur"`.
   */
  onClose: import_prop_types11.default.func,
  /**
   * Callback fired when the highlight option changes.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   * @param {T} option The highlighted option.
   * @param {string} reason Can be: `"keyboard"`, `"auto"`, `"mouse"`, `"touch"`.
   */
  onHighlightChange: import_prop_types11.default.func,
  /**
   * Callback fired when the input value changes.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   * @param {string} value The new value of the text input.
   * @param {string} reason Can be: `"input"` (user input), `"reset"` (programmatic change), `"clear"`.
   */
  onInputChange: import_prop_types11.default.func,
  /**
   * @ignore
   */
  onKeyDown: import_prop_types11.default.func,
  /**
   * Callback fired when the popup requests to be opened.
   * Use in controlled mode (see open).
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   */
  onOpen: import_prop_types11.default.func,
  /**
   * If `true`, the component is shown.
   */
  open: import_prop_types11.default.bool,
  /**
   * Override the default text for the *open popup* icon button.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   * @default 'Open'
   */
  openText: import_prop_types11.default.string,
  /**
   * Array of options.
   */
  options: import_prop_types11.default.array.isRequired,
  /**
   * The input placeholder
   */
  placeholder: import_prop_types11.default.string,
  /**
   * The icon to display in place of the default popup icon.
   * @default <ArrowDropDownIcon />
   */
  popupIcon: import_prop_types11.default.node,
  /**
   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.
   * @default false
   */
  readOnly: import_prop_types11.default.bool,
  /**
   * Render the group.
   *
   * @param {AutocompleteRenderGroupParams} params The group to render.
   * @returns {ReactNode}
   */
  renderGroup: import_prop_types11.default.func,
  /**
   * Render the option, use `getOptionLabel` by default.
   *
   * @param {object} props The props to apply on the li element.
   * @param {T} option The option to render.
   * @param {object} state The state of the component.
   * @returns {ReactNode}
   */
  renderOption: import_prop_types11.default.func,
  /**
   * Render the selected value.
   *
   * @param {T[]} value The `value` provided to the component.
   * @param {function} getTagProps A tag props getter.
   * @param {object} ownerState The state of the Autocomplete component.
   * @returns {ReactNode}
   */
  renderTags: import_prop_types11.default.func,
  /**
   * If `true`, the `input` element is required.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  required: import_prop_types11.default.bool,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types11.default.oneOfType([import_prop_types11.default.oneOf(["sm", "md", "lg"]), import_prop_types11.default.string]),
  /**
   * Leading adornment for this input.
   */
  startDecorator: import_prop_types11.default.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types11.default.oneOfType([import_prop_types11.default.arrayOf(import_prop_types11.default.oneOfType([import_prop_types11.default.func, import_prop_types11.default.object, import_prop_types11.default.bool])), import_prop_types11.default.func, import_prop_types11.default.object]),
  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   */
  type: import_prop_types11.default.string,
  /**
   * The value of the autocomplete.
   *
   * The value must have reference equality with the option in order to be selected.
   * You can customize the equality behavior with the `isOptionEqualToValue` prop.
   */
  value: chainPropTypes(import_prop_types11.default.any, (props) => {
    if (props.multiple && props.value !== void 0 && !Array.isArray(props.value)) {
      return new Error(["MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.", `However, ${props.value} was provided.`].join("\n"));
    }
    return null;
  }),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types11.default.oneOf(["outlined", "plain", "soft", "solid"])
} : void 0;
var Autocomplete_default = Autocomplete;

// node_modules/@mui/joy/Avatar/Avatar.js
init_objectWithoutPropertiesLoose();
init_extends();
var React25 = __toESM(require_react());
var import_prop_types13 = __toESM(require_prop_types());
init_esm();

// node_modules/@mui/joy/internal/svg-icons/Person.js
var React23 = __toESM(require_react());
var import_jsx_runtime19 = __toESM(require_jsx_runtime());
var Person_default = createSvgIcon((0, import_jsx_runtime19.jsx)("path", {
  d: "M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
}), "Person");

// node_modules/@mui/joy/Avatar/avatarClasses.js
function getAvatarUtilityClass(slot) {
  return generateUtilityClass2("MuiAvatar", slot);
}
var avatarClasses = generateUtilityClasses2("MuiAvatar", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "fallback", "sizeSm", "sizeMd", "sizeLg", "img", "variantOutlined", "variantSoft", "variantSolid"]);
var avatarClasses_default = avatarClasses;

// node_modules/@mui/joy/AvatarGroup/AvatarGroup.js
init_objectWithoutPropertiesLoose();
init_extends();
var React24 = __toESM(require_react());
init_clsx_m();
var import_prop_types12 = __toESM(require_prop_types());

// node_modules/@mui/joy/AvatarGroup/avatarGroupClasses.js
function getAvatarGroupUtilityClass(slot) {
  return generateUtilityClass2("MuiAvatarGroup", slot);
}
var avatarGroupClasses = generateUtilityClasses2("MuiAvatarGroup", ["root"]);
var avatarGroupClasses_default = avatarGroupClasses;

// node_modules/@mui/joy/AvatarGroup/AvatarGroup.js
var import_jsx_runtime20 = __toESM(require_jsx_runtime());
var _excluded12 = ["className", "color", "component", "size", "variant", "children"];
var AvatarGroupContext = React24.createContext(void 0);
var useUtilityClasses12 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getAvatarGroupUtilityClass, {});
};
var AvatarGroupGroupRoot = styled_default("div", {
  name: "JoyAvatarGroup",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState,
  theme
}) => _extends({}, ownerState.size === "sm" && {
  "--AvatarGroup-gap": "-0.375rem",
  "--Avatar-ringSize": "2px"
}, ownerState.size === "md" && {
  "--AvatarGroup-gap": "-0.5rem",
  "--Avatar-ringSize": "2px"
}, ownerState.size === "lg" && {
  "--AvatarGroup-gap": "-0.625rem",
  "--Avatar-ringSize": "4px"
}, {
  "--Avatar-ring": `0 0 0 var(--Avatar-ringSize) var(--Avatar-ringColor, ${theme.vars.palette.background.surface})`,
  "--Avatar-marginInlineStart": "var(--AvatarGroup-gap)",
  display: "flex",
  marginInlineStart: "calc(-1 * var(--AvatarGroup-gap))"
}));
var AvatarGroup = React24.forwardRef(function AvatarGroup2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyAvatarGroup"
  });
  const {
    className,
    color,
    component = "div",
    size = "md",
    variant,
    children
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded12);
  const ownerState = React24.useMemo(() => _extends({}, props, {
    color,
    component,
    size,
    variant
  }), [color, component, props, size, variant]);
  const classes = useUtilityClasses12();
  return (0, import_jsx_runtime20.jsx)(AvatarGroupContext.Provider, {
    value: ownerState,
    children: (0, import_jsx_runtime20.jsx)(AvatarGroupGroupRoot, _extends({
      as: component,
      ownerState,
      className: clsx_m_default(classes.root, className),
      ref
    }, other, {
      children
    }))
  });
});
true ? AvatarGroup.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Used to render icon or text elements inside the AvatarGroup if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types12.default.node,
  /**
   * @ignore
   */
  className: import_prop_types12.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types12.default.oneOfType([import_prop_types12.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types12.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types12.default.elementType,
  /**
   * The size of the component.
   * It accepts theme values between 'sm' and 'lg'.
   * @default 'md'
   */
  size: import_prop_types12.default.oneOfType([import_prop_types12.default.oneOf(["lg", "md", "sm"]), import_prop_types12.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types12.default.oneOfType([import_prop_types12.default.arrayOf(import_prop_types12.default.oneOfType([import_prop_types12.default.func, import_prop_types12.default.object, import_prop_types12.default.bool])), import_prop_types12.default.func, import_prop_types12.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'soft'
   */
  variant: import_prop_types12.default.oneOfType([import_prop_types12.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types12.default.string])
} : void 0;
var AvatarGroup_default = AvatarGroup;

// node_modules/@mui/joy/Avatar/Avatar.js
var import_jsx_runtime21 = __toESM(require_jsx_runtime());
var _excluded13 = ["alt", "color", "size", "variant", "src", "srcSet", "children"];
var useUtilityClasses13 = (ownerState) => {
  const {
    size,
    variant,
    color,
    src,
    srcSet
  } = ownerState;
  const slots = {
    root: ["root", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`],
    img: [(src || srcSet) && "img"],
    fallback: ["fallback"]
  };
  return composeClasses(slots, getAvatarUtilityClass, {});
};
var AvatarRoot = styled_default("div", {
  name: "JoyAvatar",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  return [_extends({}, ownerState.size === "sm" && {
    width: `var(--Avatar-size, 2rem)`,
    height: `var(--Avatar-size, 2rem)`,
    fontSize: theme.vars.fontSize.sm
  }, ownerState.size === "md" && {
    width: `var(--Avatar-size, 2.5rem)`,
    height: `var(--Avatar-size, 2.5rem)`,
    fontSize: theme.vars.fontSize.md
  }, ownerState.size === "lg" && {
    width: `var(--Avatar-size, 3rem)`,
    height: `var(--Avatar-size, 3rem)`,
    fontSize: theme.vars.fontSize.lg
  }, {
    marginInlineStart: "var(--Avatar-marginInlineStart)",
    boxShadow: `var(--Avatar-ring)`,
    fontFamily: theme.vars.fontFamily.body,
    fontWeight: theme.vars.fontWeight.md,
    position: "relative",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    flexShrink: 0,
    lineHeight: 1,
    overflow: "hidden",
    borderRadius: "var(--Avatar-radius, 50%)",
    userSelect: "none"
  }), (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]];
});
var AvatarImg = styled_default("img", {
  name: "JoyAvatar",
  slot: "Img",
  overridesResolver: (props, styles) => styles.img
})({
  width: "100%",
  height: "100%",
  textAlign: "center",
  // Handle non-square image. The property isn't supported by IE11.
  objectFit: "cover",
  // Hide alt text.
  color: "transparent",
  // Hide the image broken icon, only works on Chrome.
  textIndent: 1e4
});
var AvatarFallback = styled_default(Person_default, {
  name: "JoyAvatar",
  slot: "Fallback",
  overridesResolver: (props, styles) => styles.fallback
})({
  width: "64%",
  height: "64%"
});
function useLoaded({
  crossOrigin,
  referrerPolicy,
  src,
  srcSet
}) {
  const [loaded, setLoaded] = React25.useState(false);
  React25.useEffect(() => {
    if (!src && !srcSet) {
      return void 0;
    }
    setLoaded(false);
    let active = true;
    const image = new Image();
    image.onload = () => {
      if (!active) {
        return;
      }
      setLoaded("loaded");
    };
    image.onerror = () => {
      if (!active) {
        return;
      }
      setLoaded("error");
    };
    image.crossOrigin = crossOrigin;
    image.referrerPolicy = referrerPolicy;
    if (src) {
      image.src = src;
    }
    if (srcSet) {
      image.srcset = srcSet;
    }
    return () => {
      active = false;
    };
  }, [crossOrigin, referrerPolicy, src, srcSet]);
  return loaded;
}
var Avatar = React25.forwardRef(function Avatar2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyAvatar"
  });
  const groupContext = React25.useContext(AvatarGroupContext);
  const {
    alt,
    color: colorProp = "neutral",
    size: sizeProp = "md",
    variant: variantProp = "soft",
    src,
    srcSet,
    children: childrenProp
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded13);
  const variant = inProps.variant || (groupContext == null ? void 0 : groupContext.variant) || variantProp;
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color || (groupContext == null ? void 0 : groupContext.color), colorProp);
  const size = inProps.size || (groupContext == null ? void 0 : groupContext.size) || sizeProp;
  let children = null;
  const ownerState = _extends({}, props, {
    color,
    size,
    variant,
    grouped: !!groupContext
  });
  const classes = useUtilityClasses13(ownerState);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: AvatarRoot,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotImg, imageProps] = useSlot("img", {
    additionalProps: {
      alt,
      src,
      srcSet
    },
    className: classes.img,
    elementType: AvatarImg,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotFallback, fallbackProps] = useSlot("fallback", {
    className: classes.fallback,
    elementType: AvatarFallback,
    externalForwardedProps: other,
    ownerState
  });
  const loaded = useLoaded(_extends({}, imageProps, {
    src,
    srcSet
  }));
  const hasImg = src || srcSet;
  const hasImgNotFailing = hasImg && loaded !== "error";
  if (hasImgNotFailing) {
    children = (0, import_jsx_runtime21.jsx)(SlotImg, _extends({}, imageProps));
  } else if (childrenProp != null) {
    children = childrenProp;
  } else if (hasImg && alt) {
    children = alt[0];
  } else {
    children = (0, import_jsx_runtime21.jsx)(SlotFallback, _extends({}, fallbackProps));
  }
  return (0, import_jsx_runtime21.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? Avatar.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Used in combination with `src` or `srcSet` to
   * provide an alt attribute for the rendered `img` element.
   */
  alt: import_prop_types13.default.string,
  /**
   * Used to render icon or text elements inside the Avatar if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types13.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types13.default.oneOfType([import_prop_types13.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types13.default.string]),
  /**
   * The size of the component.
   * It accepts theme values between 'sm' and 'lg'.
   * @default 'md'
   */
  size: import_prop_types13.default.oneOfType([import_prop_types13.default.oneOf(["lg", "md", "sm"]), import_prop_types13.default.string]),
  /**
   * The `src` attribute for the `img` element.
   */
  src: import_prop_types13.default.string,
  /**
   * The `srcSet` attribute for the `img` element.
   * Use this attribute for responsive image display.
   */
  srcSet: import_prop_types13.default.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types13.default.oneOfType([import_prop_types13.default.arrayOf(import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object, import_prop_types13.default.bool])), import_prop_types13.default.func, import_prop_types13.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'soft'
   */
  variant: import_prop_types13.default.oneOfType([import_prop_types13.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types13.default.string])
} : void 0;
var Avatar_default = Avatar;

// node_modules/@mui/joy/Badge/Badge.js
init_objectWithoutPropertiesLoose();
init_extends();
var React26 = __toESM(require_react());
var import_prop_types14 = __toESM(require_prop_types());
init_esm();

// node_modules/@mui/joy/Badge/badgeClasses.js
function getBadgeUtilityClass(slot) {
  return generateUtilityClass2("MuiBadge", slot);
}
var badgeClasses = generateUtilityClasses2("MuiBadge", ["root", "badge", "anchorOriginTopRight", "anchorOriginBottomRight", "anchorOriginTopLeft", "anchorOriginBottomLeft", "colorPrimary", "colorDanger", "colorInfo", "colorNeutral", "colorSuccess", "colorWarning", "colorContext", "invisible", "locationInside", "locationOutside", "sizeSm", "sizeMd", "sizeLg", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var badgeClasses_default = badgeClasses;

// node_modules/@mui/joy/Badge/Badge.js
var import_jsx_runtime22 = __toESM(require_jsx_runtime());
var import_jsx_runtime23 = __toESM(require_jsx_runtime());
var _excluded14 = ["anchorOrigin", "badgeInset", "children", "size", "color", "invisible", "max", "badgeContent", "showZero", "variant"];
var useUtilityClasses14 = (ownerState) => {
  const {
    color,
    variant,
    size,
    anchorOrigin,
    invisible
  } = ownerState;
  const slots = {
    root: ["root"],
    badge: ["badge", invisible && "invisible", anchorOrigin && `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}`, variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getBadgeUtilityClass, {});
};
var BadgeRoot = styled_default("span", {
  name: "JoyBadge",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => _extends({}, ownerState.size === "sm" && _extends({
  "--Badge-minHeight": "0.5rem"
}, ownerState.badgeContent && {
  "--Badge-minHeight": "1rem"
}, {
  "--Badge-paddingX": "0.25rem",
  fontSize: theme.vars.fontSize.xs
}), ownerState.size === "md" && _extends({
  "--Badge-minHeight": "0.75rem"
}, ownerState.badgeContent && {
  "--Badge-minHeight": "1.25rem"
}, {
  "--Badge-paddingX": "0.375rem",
  fontSize: theme.vars.fontSize.sm
}), ownerState.size === "lg" && _extends({
  "--Badge-minHeight": "1rem"
}, ownerState.badgeContent && {
  "--Badge-minHeight": "1.5rem"
}, {
  "--Badge-paddingX": "0.5rem",
  fontSize: theme.vars.fontSize.md
}), {
  "--Badge-ringSize": "2px",
  "--Badge-ring": `0 0 0 var(--Badge-ringSize) var(--Badge-ringColor, ${theme.vars.palette.background.surface})`,
  position: "relative",
  display: "inline-flex",
  // For correct alignment with the text.
  verticalAlign: "middle",
  flexShrink: 0
}));
var BadgeBadge = styled_default("span", {
  name: "JoyBadge",
  slot: "Badge",
  overridesResolver: (props, styles) => styles.badge
})(({
  theme,
  ownerState
}) => {
  var _ownerState$anchorOri, _ownerState$anchorOri2, _ownerState$anchorOri3, _ownerState$anchorOri4, _theme$variants;
  const inset = {
    top: ownerState.badgeInset,
    left: ownerState.badgeInset,
    bottom: ownerState.badgeInset,
    right: ownerState.badgeInset
  };
  if (typeof ownerState.badgeInset === "string") {
    const insetValues = ownerState.badgeInset.split(" ");
    if (insetValues.length > 1) {
      inset.top = insetValues[0];
      inset.right = insetValues[1];
      if (insetValues.length === 2) {
        inset.bottom = insetValues[0];
        inset.left = insetValues[1];
      }
      if (insetValues.length === 3) {
        inset.left = insetValues[1];
        inset.bottom = insetValues[2];
      }
      if (insetValues.length === 4) {
        inset.bottom = insetValues[2];
        inset.left = insetValues[3];
      }
    }
  }
  const translateY = ((_ownerState$anchorOri = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri.vertical) === "top" ? "translateY(-50%)" : "translateY(50%)";
  const translateX = ((_ownerState$anchorOri2 = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri2.horizontal) === "left" ? "translateX(-50%)" : "translateX(50%)";
  const transformOriginY = ((_ownerState$anchorOri3 = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri3.vertical) === "top" ? "0%" : "100%";
  const transformOriginX = ((_ownerState$anchorOri4 = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri4.horizontal) === "left" ? "0%" : "100%";
  return _extends({
    display: "inline-flex",
    flexWrap: "wrap",
    justifyContent: "center",
    alignContent: "center",
    alignItems: "center",
    position: "absolute",
    boxSizing: "border-box",
    boxShadow: "var(--Badge-ring)",
    fontFamily: theme.vars.fontFamily.body,
    fontWeight: theme.vars.fontWeight.md,
    lineHeight: 1,
    padding: "calc(var(--Badge-paddingX) / 2 - var(--variant-borderWidth, 0px)) calc(var(--Badge-paddingX) - var(--variant-borderWidth, 0px))",
    minHeight: "var(--Badge-minHeight)",
    minWidth: "var(--Badge-minHeight)",
    borderRadius: "var(--Badge-radius, var(--Badge-minHeight))",
    zIndex: theme.vars.zIndex.badge,
    backgroundColor: theme.vars.palette.background.surface,
    [ownerState.anchorOrigin.vertical]: inset[ownerState.anchorOrigin.vertical],
    [ownerState.anchorOrigin.horizontal]: inset[ownerState.anchorOrigin.horizontal],
    transform: `scale(1) ${translateX} ${translateY}`,
    transformOrigin: `${transformOriginX} ${transformOriginY}`,
    [`&.${badgeClasses_default.invisible}`]: {
      transform: `scale(0) ${translateX} ${translateY}`
    }
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]);
});
var Badge = React26.forwardRef(function Badge2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyBadge"
  });
  const {
    anchorOrigin: anchorOriginProp = {
      vertical: "top",
      horizontal: "right"
    },
    badgeInset: badgeInsetProp = 0,
    children,
    size: sizeProp = "md",
    color: colorProp = "primary",
    invisible: invisibleProp = false,
    max = 99,
    badgeContent: badgeContentProp = "",
    showZero = false,
    variant: variantProp = "solid"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded14);
  const prevProps = usePreviousProps_default({
    anchorOrigin: anchorOriginProp,
    size: sizeProp,
    badgeInset: badgeInsetProp,
    color: colorProp,
    variant: variantProp
  });
  let invisible = invisibleProp;
  if (invisibleProp === false && (badgeContentProp === 0 && !showZero || badgeContentProp == null)) {
    invisible = true;
  }
  const {
    color: internalColor = colorProp,
    size = sizeProp,
    anchorOrigin = anchorOriginProp,
    variant = variantProp,
    badgeInset = badgeInsetProp
  } = invisible ? prevProps : props;
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, internalColor);
  const ownerState = _extends({}, props, {
    anchorOrigin,
    badgeInset,
    variant,
    invisible,
    color,
    size
  });
  const classes = useUtilityClasses14(ownerState);
  let displayValue = badgeContentProp && Number(badgeContentProp) > max ? `${max}+` : badgeContentProp;
  if (invisible && badgeContentProp === 0) {
    displayValue = "";
  }
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: BadgeRoot,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotBadge, badgeProps] = useSlot("badge", {
    className: classes.badge,
    elementType: BadgeBadge,
    externalForwardedProps: other,
    ownerState
  });
  return (0, import_jsx_runtime23.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [children, (0, import_jsx_runtime22.jsx)(SlotBadge, _extends({}, badgeProps, {
      children: displayValue
    }))]
  }));
});
true ? Badge.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The anchor of the badge.
   * @default {
   *   vertical: 'top',
   *   horizontal: 'right',
   * }
   */
  anchorOrigin: import_prop_types14.default.shape({
    horizontal: import_prop_types14.default.oneOf(["left", "right"]).isRequired,
    vertical: import_prop_types14.default.oneOf(["bottom", "top"]).isRequired
  }),
  /**
   * The content rendered within the badge.
   * @default ''
   */
  badgeContent: import_prop_types14.default.node,
  /**
   * The inset of the badge. Support shorthand syntax as described in https://developer.mozilla.org/en-US/docs/Web/CSS/inset.
   * @default 0
   */
  badgeInset: import_prop_types14.default.oneOfType([import_prop_types14.default.number, import_prop_types14.default.string]),
  /**
   * The badge will be added relative to this node.
   */
  children: import_prop_types14.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'primary'
   */
  color: import_prop_types14.default.oneOfType([import_prop_types14.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types14.default.string]),
  /**
   * If `true`, the badge is invisible.
   * @default false
   */
  invisible: import_prop_types14.default.bool,
  /**
   * Max count to show.
   * @default 99
   */
  max: import_prop_types14.default.number,
  /**
   * Controls whether the badge is hidden when `badgeContent` is zero.
   * @default false
   */
  showZero: import_prop_types14.default.bool,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types14.default.oneOfType([import_prop_types14.default.oneOf(["sm", "md", "lg"]), import_prop_types14.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types14.default.oneOfType([import_prop_types14.default.arrayOf(import_prop_types14.default.oneOfType([import_prop_types14.default.func, import_prop_types14.default.object, import_prop_types14.default.bool])), import_prop_types14.default.func, import_prop_types14.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'solid'
   */
  variant: import_prop_types14.default.oneOfType([import_prop_types14.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types14.default.string])
} : void 0;
var Badge_default = Badge;

// node_modules/@mui/joy/Breadcrumbs/Breadcrumbs.js
init_objectWithoutPropertiesLoose();
init_extends();
var React27 = __toESM(require_react());
var import_prop_types15 = __toESM(require_prop_types());
init_esm();
init_clsx_m();

// node_modules/@mui/joy/Breadcrumbs/breadcrumbsClasses.js
init_esm();
function getBreadcrumbsUtilityClass(slot) {
  return generateUtilityClass("MuiBreadcrumbs", slot);
}
var breadcrumbsClasses = generateUtilityClasses("MuiBreadcrumbs", ["root", "ol", "li", "separator", "sizeSm", "sizeMd", "sizeLg"]);
var breadcrumbsClasses_default = breadcrumbsClasses;

// node_modules/@mui/joy/Breadcrumbs/Breadcrumbs.js
var import_jsx_runtime24 = __toESM(require_jsx_runtime());
var _excluded15 = ["children", "className", "size", "separator"];
var useUtilityClasses15 = (ownerState) => {
  const {
    size
  } = ownerState;
  const slots = {
    root: ["root", size && `size${capitalize(size)}`],
    li: ["li"],
    ol: ["ol"],
    separator: ["separator"]
  };
  return composeClasses(slots, getBreadcrumbsUtilityClass, {});
};
var BreadcrumbsRoot = styled_default("nav", {
  name: "JoyBreadcrumbs",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => _extends({}, ownerState.size === "sm" && {
  "--Breadcrumbs-gap": "0.25rem",
  fontSize: theme.vars.fontSize.sm,
  padding: "0.5rem"
}, ownerState.size === "md" && {
  "--Breadcrumbs-gap": "0.375rem",
  fontSize: theme.vars.fontSize.md,
  padding: "0.75rem"
}, ownerState.size === "lg" && {
  "--Breadcrumbs-gap": "0.5rem",
  fontSize: theme.vars.fontSize.lg,
  padding: "1rem"
}, {
  lineHeight: 1
}));
var BreadcrumbsOl = styled_default("ol", {
  name: "JoyBreadcrumbs",
  slot: "Ol",
  overridesResolver: (props, styles) => styles.ol
})({
  display: "flex",
  flexWrap: "wrap",
  alignItems: "center",
  // reset user-agent style
  padding: 0,
  margin: 0,
  listStyle: "none"
});
var BreadcrumbsLi = styled_default("li", {
  name: "JoyBreadcrumbs",
  slot: "Ol",
  overridesResolver: (props, styles) => styles.ol
})({});
var BreadcrumbsSeparator = styled_default("li", {
  name: "JoyBreadcrumbs",
  slot: "Separator",
  overridesResolver: (props, styles) => styles.separator
})({
  display: "flex",
  userSelect: "none",
  marginInline: "var(--Breadcrumbs-gap)"
});
var Breadcrumbs = React27.forwardRef(function Breadcrumbs2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyBreadcrumbs"
  });
  const {
    children,
    className,
    size = "md",
    separator = "/"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded15);
  const ownerState = _extends({}, props, {
    separator,
    size
  });
  const classes = useUtilityClasses15(ownerState);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: BreadcrumbsRoot,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotOl, olProps] = useSlot("ol", {
    className: classes.ol,
    elementType: BreadcrumbsOl,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotLi, liProps] = useSlot("li", {
    className: classes.li,
    elementType: BreadcrumbsLi,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotSeparator, separatorProps] = useSlot("separator", {
    additionalProps: {
      "aria-hidden": true
    },
    className: classes.separator,
    elementType: BreadcrumbsSeparator,
    externalForwardedProps: other,
    ownerState
  });
  const allItems = React27.Children.toArray(children).filter((child) => {
    return React27.isValidElement(child);
  }).map((child, index) => (0, import_jsx_runtime24.jsx)(SlotLi, _extends({}, liProps, {
    children: child
  }), `child-${index}`));
  return (0, import_jsx_runtime24.jsx)(SlotRoot, _extends({}, rootProps, {
    children: (0, import_jsx_runtime24.jsx)(SlotOl, _extends({}, olProps, {
      children: allItems.reduce((acc, current, index) => {
        if (index < allItems.length - 1) {
          acc = acc.concat(current, (0, import_jsx_runtime24.jsx)(SlotSeparator, _extends({}, separatorProps, {
            children: separator
          }), `separator-${index}`));
        } else {
          acc.push(current);
        }
        return acc;
      }, [])
    }))
  }));
});
true ? Breadcrumbs.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: import_prop_types15.default.node,
  /**
   * @ignore
   */
  className: import_prop_types15.default.string,
  /**
   * Custom separator node.
   * @default '/'
   */
  separator: import_prop_types15.default.node,
  /**
   * The size of the component.
   * It accepts theme values between 'sm' and 'lg'.
   * @default 'md'
   */
  size: import_prop_types15.default.oneOfType([import_prop_types15.default.oneOf(["sm", "md", "lg"]), import_prop_types15.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types15.default.oneOfType([import_prop_types15.default.arrayOf(import_prop_types15.default.oneOfType([import_prop_types15.default.func, import_prop_types15.default.object, import_prop_types15.default.bool])), import_prop_types15.default.func, import_prop_types15.default.object])
} : void 0;
var Breadcrumbs_default = Breadcrumbs;

// node_modules/@mui/joy/Card/Card.js
init_objectWithoutPropertiesLoose();
init_extends();
var React29 = __toESM(require_react());
init_clsx_m();
var import_prop_types16 = __toESM(require_prop_types());
init_esm();

// node_modules/@mui/joy/Card/cardClasses.js
function getCardUtilityClass(slot) {
  return generateUtilityClass2("MuiCard", slot);
}
var cardClasses = generateUtilityClasses2("MuiCard", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg", "horizontal", "vertical"]);
var cardClasses_default = cardClasses;

// node_modules/@mui/joy/Card/CardContext.js
var React28 = __toESM(require_react());
var CardRowContext = React28.createContext(false);

// node_modules/@mui/joy/Card/Card.js
var import_jsx_runtime25 = __toESM(require_jsx_runtime());
var _excluded16 = ["className", "color", "component", "invertedColors", "size", "variant", "children", "orientation"];
var useUtilityClasses16 = (ownerState) => {
  const {
    size,
    variant,
    color,
    orientation
  } = ownerState;
  const slots = {
    root: ["root", orientation, variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getCardUtilityClass, {});
};
var CardRoot = styled_default("div", {
  name: "JoyCard",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$colorInversion;
  return [_extends({
    // a context variable for any child component
    "--Card-childRadius": "max((var(--Card-radius) - var(--variant-borderWidth, 0px)) - var(--Card-padding), min(var(--Card-padding) / 2, (var(--Card-radius) - var(--variant-borderWidth, 0px)) / 2))",
    // AspectRatio integration
    "--AspectRatio-radius": "var(--Card-childRadius)",
    // Link integration
    "--unstable_actionMargin": "calc(-1 * var(--variant-borderWidth, 0px))",
    // Link, Radio, Checkbox integration
    "--unstable_actionRadius": resolveSxValue({
      theme,
      ownerState
    }, "borderRadius", "var(--Card-radius)"),
    // CardCover integration
    "--CardCover-radius": "calc(var(--Card-radius) - var(--variant-borderWidth, 0px))",
    // CardOverflow integration
    "--CardOverflow-offset": `calc(-1 * var(--Card-padding))`,
    "--CardOverflow-radius": "calc(var(--Card-radius) - var(--variant-borderWidth, 0px))",
    // Divider integration
    "--Divider-inset": "calc(-1 * var(--Card-padding))"
  }, ownerState.size === "sm" && {
    "--Card-radius": theme.vars.radius.sm,
    "--Card-padding": "0.5rem"
  }, ownerState.size === "md" && {
    "--Card-radius": theme.vars.radius.md,
    "--Card-padding": "1rem",
    fontSize: theme.vars.fontSize.md
  }, ownerState.size === "lg" && {
    "--Card-radius": theme.vars.radius.lg,
    "--Card-padding": "1.5rem"
  }, {
    padding: "var(--Card-padding)",
    borderRadius: "var(--Card-radius)",
    boxShadow: theme.shadow.sm,
    backgroundColor: theme.vars.palette.background.surface,
    fontFamily: theme.vars.fontFamily.body,
    position: "relative",
    display: "flex",
    flexDirection: ownerState.orientation === "horizontal" ? "row" : "column"
  }), (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color], ownerState.color !== "context" && ownerState.invertedColors && ((_theme$colorInversion = theme.colorInversion[ownerState.variant]) == null ? void 0 : _theme$colorInversion[ownerState.color])];
});
var Card = React29.forwardRef(function Card2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyCard"
  });
  const {
    className,
    color: colorProp = "neutral",
    component = "div",
    invertedColors = false,
    size = "md",
    variant = "plain",
    children,
    orientation = "vertical"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded16);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const ownerState = _extends({}, props, {
    color,
    component,
    orientation,
    size,
    variant
  });
  const classes = useUtilityClasses16(ownerState);
  const result = (0, import_jsx_runtime25.jsx)(CardRowContext.Provider, {
    value: orientation === "horizontal",
    children: (0, import_jsx_runtime25.jsx)(CardRoot, _extends({
      as: component,
      ownerState,
      className: clsx_m_default(classes.root, className),
      ref
    }, other, {
      children: React29.Children.map(children, (child, index) => {
        if (!React29.isValidElement(child)) {
          return child;
        }
        const extraProps = {};
        if (isMuiElement(child, ["Divider"])) {
          extraProps.inset = "inset" in child.props ? child.props.inset : "context";
          const dividerOrientation = orientation === "vertical" ? "horizontal" : "vertical";
          extraProps.orientation = "orientation" in child.props ? child.props.orientation : dividerOrientation;
        }
        if (index === 0) {
          extraProps["data-first-child"] = "";
        }
        if (index === React29.Children.count(children) - 1) {
          extraProps["data-last-child"] = "";
        }
        return React29.cloneElement(child, extraProps);
      })
    }))
  });
  if (invertedColors) {
    return (0, import_jsx_runtime25.jsx)(ColorInversionProvider, {
      variant,
      children: result
    });
  }
  return result;
});
true ? Card.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Used to render icon or text elements inside the Card if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types16.default.node,
  /**
   * @ignore
   */
  className: import_prop_types16.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types16.default.oneOfType([import_prop_types16.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types16.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types16.default.elementType,
  /**
   * If `true`, the children with an implicit color prop invert their colors to match the component's variant and color.
   * @default false
   */
  invertedColors: import_prop_types16.default.bool,
  /**
   * The component orientation.
   * @default 'vertical'
   */
  orientation: import_prop_types16.default.oneOf(["horizontal", "vertical"]),
  /**
   * The size of the component.
   * It accepts theme values between 'sm' and 'lg'.
   * @default 'md'
   */
  size: import_prop_types16.default.oneOfType([import_prop_types16.default.oneOf(["lg", "md", "sm"]), import_prop_types16.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types16.default.oneOfType([import_prop_types16.default.arrayOf(import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object, import_prop_types16.default.bool])), import_prop_types16.default.func, import_prop_types16.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types16.default.oneOfType([import_prop_types16.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types16.default.string])
} : void 0;
var Card_default = Card;

// node_modules/@mui/joy/CardContent/CardContent.js
init_extends();
init_objectWithoutPropertiesLoose();
var React30 = __toESM(require_react());
init_clsx_m();
var import_prop_types17 = __toESM(require_prop_types());

// node_modules/@mui/joy/CardContent/cardContentClasses.js
function getCardContentUtilityClass(slot) {
  return generateUtilityClass2("MuiCardContent", slot);
}
var cardClasses2 = generateUtilityClasses2("MuiCardContent", ["root"]);
var cardContentClasses_default = cardClasses2;

// node_modules/@mui/joy/CardContent/CardContent.js
var import_jsx_runtime26 = __toESM(require_jsx_runtime());
var _excluded17 = ["className", "component", "children"];
var useUtilityClasses17 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getCardContentUtilityClass, {});
};
var CardContentRoot = styled_default("div", {
  name: "JoyCardContent",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({
  display: "flex",
  flexDirection: "column",
  flexGrow: 1,
  zIndex: 1
});
var CardContent = React30.forwardRef(function CardContent2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyCardContent"
  });
  const {
    className,
    component = "div",
    children
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded17);
  const ownerState = _extends({}, props, {
    component
  });
  const classes = useUtilityClasses17();
  return (0, import_jsx_runtime26.jsx)(CardContentRoot, _extends({
    as: component,
    ownerState,
    className: clsx_m_default(classes.root, className),
    ref
  }, other, {
    children
  }));
});
true ? CardContent.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Used to render icon or text elements inside the CardContent if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types17.default.node,
  /**
   * @ignore
   */
  className: import_prop_types17.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types17.default.elementType,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types17.default.oneOfType([import_prop_types17.default.arrayOf(import_prop_types17.default.oneOfType([import_prop_types17.default.func, import_prop_types17.default.object, import_prop_types17.default.bool])), import_prop_types17.default.func, import_prop_types17.default.object])
} : void 0;
var CardContent_default = CardContent;

// node_modules/@mui/joy/CardCover/CardCover.js
init_extends();
init_objectWithoutPropertiesLoose();
var React31 = __toESM(require_react());
init_clsx_m();
var import_prop_types18 = __toESM(require_prop_types());

// node_modules/@mui/joy/CardCover/cardCoverClasses.js
function getCardCoverUtilityClass(slot) {
  return generateUtilityClass2("MuiCardCover", slot);
}
var cardCoverClasses = generateUtilityClasses2("MuiCardCover", ["root"]);
var cardCoverClasses_default = cardCoverClasses;

// node_modules/@mui/joy/CardCover/CardCover.js
var import_jsx_runtime27 = __toESM(require_jsx_runtime());
var _excluded18 = ["className", "component", "children"];
var useUtilityClasses18 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getCardCoverUtilityClass, {});
};
var CardCoverRoot = styled_default("div", {
  name: "JoyCardCover",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({
  position: "absolute",
  zIndex: 0,
  top: 0,
  left: 0,
  right: 0,
  bottom: 0,
  borderRadius: "var(--CardCover-radius)",
  // use data-attribute instead of :first-child to support zero config SSR (emotion)
  // use nested selector for integrating with nextjs image `fill` layout (spans are inserted on top of the img)
  "& [data-first-child]": {
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    width: "100%",
    height: "100%",
    objectFit: "cover",
    boxSizing: "border-box",
    borderRadius: "var(--CardCover-radius)",
    margin: 0,
    padding: 0,
    "& > img": {
      // support art-direction that uses <picture><img /></picture>
      width: "100%",
      height: "100%",
      objectFit: "cover"
    }
  }
});
var CardCover = React31.forwardRef(function CardCover2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyCardCover"
  });
  const {
    className,
    component = "div",
    children
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded18);
  const ownerState = _extends({}, props, {
    component
  });
  const classes = useUtilityClasses18();
  return (0, import_jsx_runtime27.jsx)(CardCoverRoot, _extends({
    as: component,
    ownerState,
    className: clsx_m_default(classes.root, className),
    ref
  }, other, {
    children: React31.Children.map(children, (child, index) => index === 0 && React31.isValidElement(child) ? React31.cloneElement(child, {
      "data-first-child": ""
    }) : child)
  }));
});
true ? CardCover.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Used to render icon or text elements inside the CardCover if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types18.default.node,
  /**
   * @ignore
   */
  className: import_prop_types18.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types18.default.elementType,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types18.default.oneOfType([import_prop_types18.default.arrayOf(import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.object, import_prop_types18.default.bool])), import_prop_types18.default.func, import_prop_types18.default.object])
} : void 0;
var CardCover_default = CardCover;

// node_modules/@mui/joy/CardOverflow/CardOverflow.js
init_objectWithoutPropertiesLoose();
init_extends();
var React32 = __toESM(require_react());
init_clsx_m();
var import_prop_types19 = __toESM(require_prop_types());
init_esm();

// node_modules/@mui/joy/CardOverflow/cardOverflowClasses.js
function getCardOverflowUtilityClass(slot) {
  return generateUtilityClass2("MuiCardOverflow", slot);
}
var aspectRatioClasses2 = generateUtilityClasses2("MuiCardOverflow", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var cardOverflowClasses_default = aspectRatioClasses2;

// node_modules/@mui/joy/CardOverflow/CardOverflow.js
var import_jsx_runtime28 = __toESM(require_jsx_runtime());
var _excluded19 = ["className", "component", "children", "color", "variant"];
var useUtilityClasses19 = (ownerState) => {
  const {
    variant,
    color
  } = ownerState;
  const slots = {
    root: ["root", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`]
  };
  return composeClasses(slots, getCardOverflowUtilityClass, {});
};
var CardOverflowRoot = styled_default("div", {
  name: "JoyCardOverflow",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  const childRadius = "calc(var(--CardOverflow-radius) - var(--variant-borderWidth, 0px))";
  return [ownerState.row ? _extends({
    "--AspectRatio-margin": "calc(-1 * var(--Card-padding)) 0px",
    marginTop: "var(--CardOverflow-offset)",
    marginBottom: "var(--CardOverflow-offset)",
    padding: "var(--Card-padding) 0px",
    borderRadius: "var(--CardOverflow-radius)",
    position: "relative"
  }, ownerState["data-first-child"] !== void 0 && {
    "--AspectRatio-radius": `${childRadius} 0 0 ${childRadius}`,
    borderTopRightRadius: 0,
    borderBottomRightRadius: 0,
    marginLeft: "var(--CardOverflow-offset)"
  }, ownerState["data-last-child"] !== void 0 && {
    "--AspectRatio-radius": `0 ${childRadius} ${childRadius} 0`,
    borderTopLeftRadius: 0,
    borderBottomLeftRadius: 0,
    marginRight: "var(--CardOverflow-offset)"
  }) : _extends({
    "--AspectRatio-margin": "0px calc(-1 * var(--Card-padding))",
    marginLeft: "var(--CardOverflow-offset)",
    marginRight: "var(--CardOverflow-offset)",
    padding: "0px var(--Card-padding)",
    borderRadius: "var(--CardOverflow-radius)",
    position: "relative"
  }, ownerState["data-first-child"] !== void 0 && {
    "--AspectRatio-radius": `${childRadius} ${childRadius} 0 0`,
    borderBottomLeftRadius: 0,
    borderBottomRightRadius: 0,
    marginTop: "var(--CardOverflow-offset)"
  }, ownerState["data-last-child"] !== void 0 && {
    "--AspectRatio-radius": `0 0 ${childRadius} ${childRadius}`,
    borderTopLeftRadius: 0,
    borderTopRightRadius: 0,
    marginBottom: "var(--CardOverflow-offset)"
  }), (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]];
});
var CardOverflow = React32.forwardRef(function CardOverflow2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyCardOverflow"
  });
  const row = React32.useContext(CardRowContext);
  const {
    className,
    component = "div",
    children,
    color: colorProp = "neutral",
    variant = "plain"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded19);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const ownerState = _extends({}, props, {
    component,
    color,
    variant,
    row
  });
  const classes = useUtilityClasses19(ownerState);
  return (0, import_jsx_runtime28.jsx)(CardOverflowRoot, _extends({
    as: component,
    ownerState,
    className: clsx_m_default(classes.root, className),
    ref
  }, other, {
    children
  }));
});
true ? CardOverflow.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Used to render icon or text elements inside the CardOverflow if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types19.default.node,
  /**
   * @ignore
   */
  className: import_prop_types19.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types19.default.oneOfType([import_prop_types19.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types19.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types19.default.elementType,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types19.default.oneOfType([import_prop_types19.default.arrayOf(import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object, import_prop_types19.default.bool])), import_prop_types19.default.func, import_prop_types19.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types19.default.oneOfType([import_prop_types19.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types19.default.string])
} : void 0;
var CardOverflow_default = CardOverflow;

// node_modules/@mui/joy/Container/Container.js
init_esm2();
var import_prop_types20 = __toESM(require_prop_types());
var Container = createContainer({
  componentName: "JoyContainer",
  createStyledComponent: styled_default("div", {
    name: "JoyContainer",
    slot: "Root",
    overridesResolver: (props, styles) => styles.root
  }),
  useThemeProps: (inProps) => useThemeProps({
    props: inProps,
    name: "JoyContainer"
  })
});
true ? Container.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * @ignore
   */
  children: import_prop_types20.default.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types20.default.elementType,
  /**
   * If `true`, the left and right padding is removed.
   * @default false
   */
  disableGutters: import_prop_types20.default.bool,
  /**
   * Set the max-width to match the min-width of the current breakpoint.
   * This is useful if you'd prefer to design for a fixed set of sizes
   * instead of trying to accommodate a fully fluid viewport.
   * It's fluid by default.
   * @default false
   */
  fixed: import_prop_types20.default.bool,
  /**
   * Determine the max-width of the container.
   * The container width grows with the size of the screen.
   * Set to `false` to disable `maxWidth`.
   * @default 'lg'
   */
  maxWidth: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["xs", "sm", "md", "lg", "xl", false]), import_prop_types20.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object])
} : void 0;
var Container_default = Container;

// node_modules/@mui/joy/Container/containerClasses.js
function getContainerUtilityClass(slot) {
  return generateUtilityClass2("MuiContainer", slot);
}
var containerClasses = generateUtilityClasses2("MuiContainer", ["root", "disableGutters", "fixed", "maxWidthXs", "maxWidthSm", "maxWidthMd", "maxWidthLg", "maxWidthXl"]);
var containerClasses_default = containerClasses;

// node_modules/@mui/joy/Divider/Divider.js
init_objectWithoutPropertiesLoose();
init_extends();
var React33 = __toESM(require_react());
var import_prop_types21 = __toESM(require_prop_types());
init_clsx_m();
init_esm();

// node_modules/@mui/joy/Divider/dividerClasses.js
function getDividerUtilityClass(slot) {
  return generateUtilityClass2("MuiDivider", slot);
}
var dividerClasses = generateUtilityClasses2("MuiDivider", ["root", "horizontal", "vertical", "insetContext", "insetNone"]);
var dividerClasses_default = dividerClasses;

// node_modules/@mui/joy/Divider/Divider.js
var import_jsx_runtime29 = __toESM(require_jsx_runtime());
var _excluded20 = ["className", "children", "component", "inset", "orientation", "role"];
var useUtilityClasses20 = (ownerState) => {
  const {
    orientation,
    inset
  } = ownerState;
  const slots = {
    root: ["root", orientation, inset && `inset${capitalize(inset)}`]
  };
  return composeClasses(slots, getDividerUtilityClass, {});
};
var DividerRoot = styled_default("hr", {
  name: "JoyDivider",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => _extends({
  "--Divider-thickness": "1px",
  "--Divider-lineColor": theme.vars.palette.divider
}, ownerState.inset === "none" && {
  "--_Divider-inset": "0px"
}, ownerState.inset === "context" && {
  "--_Divider-inset": "var(--Divider-inset, 0px)"
}, {
  margin: "initial",
  // reset margin for `hr` tag
  marginInline: ownerState.orientation === "vertical" ? "initial" : "var(--_Divider-inset)",
  marginBlock: ownerState.orientation === "vertical" ? "var(--_Divider-inset)" : "initial",
  position: "relative",
  alignSelf: "stretch",
  flexShrink: 0
}, ownerState.children ? {
  "--Divider-gap": theme.spacing(1),
  "--Divider-childPosition": "50%",
  display: "flex",
  flexDirection: ownerState.orientation === "vertical" ? "column" : "row",
  alignItems: "center",
  whiteSpace: "nowrap",
  textAlign: "center",
  border: 0,
  fontFamily: theme.vars.fontFamily.body,
  fontSize: theme.vars.fontSize.sm,
  "&::before, &::after": {
    position: "relative",
    inlineSize: ownerState.orientation === "vertical" ? "var(--Divider-thickness)" : "initial",
    blockSize: ownerState.orientation === "vertical" ? "initial" : "var(--Divider-thickness)",
    backgroundColor: "var(--Divider-lineColor)",
    // use logical size + background is better than border because they work with gradient.
    content: '""'
  },
  "&::before": {
    marginInlineEnd: ownerState.orientation === "vertical" ? "initial" : "min(var(--Divider-childPosition) * 999, var(--Divider-gap))",
    marginBlockEnd: ownerState.orientation === "vertical" ? "min(var(--Divider-childPosition) * 999, var(--Divider-gap))" : "initial",
    flexBasis: "var(--Divider-childPosition)"
  },
  "&::after": {
    marginInlineStart: ownerState.orientation === "vertical" ? "initial" : "min((100% - var(--Divider-childPosition)) * 999, var(--Divider-gap))",
    marginBlockStart: ownerState.orientation === "vertical" ? "min((100% - var(--Divider-childPosition)) * 999, var(--Divider-gap))" : "initial",
    flexBasis: "calc(100% - var(--Divider-childPosition))"
  }
} : {
  border: "none",
  // reset the border for `hr` tag
  listStyle: "none",
  backgroundColor: "var(--Divider-lineColor)",
  // use logical size + background is better than border because they work with gradient.
  inlineSize: ownerState.orientation === "vertical" ? "var(--Divider-thickness)" : "initial",
  blockSize: ownerState.orientation === "vertical" ? "initial" : "var(--Divider-thickness)"
}));
var Divider = React33.forwardRef(function Divider2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyDivider"
  });
  const {
    className,
    children,
    component = children !== void 0 && children !== null ? "div" : "hr",
    inset,
    orientation = "horizontal",
    role = component !== "hr" ? "separator" : void 0
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded20);
  const ownerState = _extends({}, props, {
    inset,
    role,
    orientation,
    component
  });
  const classes = useUtilityClasses20(ownerState);
  return (0, import_jsx_runtime29.jsx)(DividerRoot, _extends({
    ref,
    as: component,
    className: clsx_m_default(classes.root, className),
    ownerState,
    role
  }, role === "separator" && orientation === "vertical" && {
    // The implicit aria-orientation of separator is 'horizontal'
    // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/separator_role
    "aria-orientation": "vertical"
  }, other, {
    children
  }));
});
true ? Divider.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: import_prop_types21.default.node,
  /**
   * @ignore
   */
  className: import_prop_types21.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types21.default.elementType,
  /**
   * The styles applied to the divider to shrink or stretch the line based on the orientation.
   */
  inset: import_prop_types21.default.oneOfType([import_prop_types21.default.oneOf(["none", "context"]), import_prop_types21.default.string]),
  /**
   * The component orientation.
   * @default 'horizontal'
   */
  orientation: import_prop_types21.default.oneOf(["horizontal", "vertical"]),
  /**
   * @ignore
   */
  role: import_prop_types21.default.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types21.default.oneOfType([import_prop_types21.default.arrayOf(import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object, import_prop_types21.default.bool])), import_prop_types21.default.func, import_prop_types21.default.object])
} : void 0;
Divider.muiName = "Divider";
var Divider_default = Divider;

// node_modules/@mui/joy/FormHelperText/FormHelperText.js
init_extends();
init_objectWithoutPropertiesLoose();
var React34 = __toESM(require_react());
var import_prop_types22 = __toESM(require_prop_types());
init_esm();

// node_modules/@mui/joy/FormHelperText/formHelperTextClasses.js
function getFormHelperTextUtilityClass(slot) {
  return generateUtilityClass2("MuiFormHelperText", slot);
}
var formHelperTextClasses = generateUtilityClasses2("MuiFormHelperText", ["root"]);
var formHelperTextClasses_default = formHelperTextClasses;

// node_modules/@mui/joy/FormHelperText/FormHelperText.js
var import_jsx_runtime30 = __toESM(require_jsx_runtime());
var _excluded21 = ["children", "component"];
var useUtilityClasses21 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getFormHelperTextUtilityClass, {});
};
var FormHelperTextRoot = styled_default("div", {
  name: "JoyFormHelperText",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme
}) => ({
  display: "flex",
  alignItems: "center",
  fontFamily: theme.vars.fontFamily.body,
  fontSize: `var(--FormHelperText-fontSize, ${theme.vars.fontSize.sm})`,
  lineHeight: theme.vars.lineHeight.sm,
  color: `var(--FormHelperText-color, ${theme.vars.palette.text.secondary})`,
  margin: "var(--FormHelperText-margin, 0px)",
  [`.${formLabelClasses_default.root} + &`]: {
    "--FormHelperText-margin": "0px"
    // remove the margin if the helper text is next to the form label.
  }
}));
var FormHelperText = React34.forwardRef(function FormHelperText2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyFormHelperText"
  });
  const {
    children,
    component
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded21);
  const rootRef = React34.useRef(null);
  const handleRef = useForkRef(rootRef, ref);
  const formControl = React34.useContext(FormControlContext_default);
  const setHelperText = formControl == null ? void 0 : formControl.setHelperText;
  React34.useEffect(() => {
    setHelperText == null ? void 0 : setHelperText(rootRef.current);
    return () => {
      setHelperText == null ? void 0 : setHelperText(null);
    };
  }, [setHelperText]);
  const ownerState = _extends({}, props);
  const classes = useUtilityClasses21();
  const rootProps = useSlotProps({
    elementType: FormHelperTextRoot,
    externalSlotProps: {},
    externalForwardedProps: other,
    ownerState,
    additionalProps: {
      ref: handleRef,
      as: component,
      id: formControl == null ? void 0 : formControl["aria-describedby"]
    },
    className: classes.root
  });
  return (0, import_jsx_runtime30.jsx)(FormHelperTextRoot, _extends({}, rootProps, {
    children
  }));
});
true ? FormHelperText.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: import_prop_types22.default.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types22.default.elementType,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types22.default.oneOfType([import_prop_types22.default.arrayOf(import_prop_types22.default.oneOfType([import_prop_types22.default.func, import_prop_types22.default.object, import_prop_types22.default.bool])), import_prop_types22.default.func, import_prop_types22.default.object])
} : void 0;
var FormHelperText_default = FormHelperText;

// node_modules/@mui/joy/LinearProgress/LinearProgress.js
init_objectWithoutPropertiesLoose();
init_extends();
var React35 = __toESM(require_react());
var import_prop_types23 = __toESM(require_prop_types());
init_clsx_m();
init_esm();
init_esm2();

// node_modules/@mui/joy/LinearProgress/linearProgressClasses.js
function getLinearProgressUtilityClass(slot) {
  return generateUtilityClass2("MuiLinearProgress", slot);
}
var linearProgressClasses = generateUtilityClasses2("MuiLinearProgress", ["root", "determinate", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var linearProgressClasses_default = linearProgressClasses;

// node_modules/@mui/joy/LinearProgress/LinearProgress.js
var import_jsx_runtime31 = __toESM(require_jsx_runtime());
var _excluded25 = ["children", "className", "component", "color", "size", "variant", "thickness", "determinate", "value", "style"];
var _ = (t) => t;
var _t;
var _t2;
var progressKeyframe = keyframes(_t || (_t = _`
  0% {
    left: var(--_LinearProgress-progressInset);
    width: var(--LinearProgress-progressMinWidth);
  }

  25% {
    width: var(--LinearProgress-progressMaxWidth);
  }

  50% {
    left: var(--_LinearProgress-progressLeft);
    width: var(--LinearProgress-progressMinWidth);
  }

  75% {
    width: var(--LinearProgress-progressMaxWidth);
  }
  
  100% {
    left: var(--_LinearProgress-progressInset);
    width: var(--LinearProgress-progressMinWidth);
  }
`));
var useUtilityClasses22 = (ownerState) => {
  const {
    determinate,
    color,
    variant,
    size
  } = ownerState;
  const slots = {
    root: ["root", determinate && "determinate", color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getLinearProgressUtilityClass, {});
};
var LinearProgressRoot = styled_default("div", {
  name: "JoyLinearProgress",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState,
  theme
}) => {
  var _theme$variants;
  return _extends({
    // public variables
    "--LinearProgress-radius": "var(--LinearProgress-thickness)",
    "--LinearProgress-progressThickness": "var(--LinearProgress-thickness)",
    "--LinearProgress-progressRadius": "max(var(--LinearProgress-radius) - var(--_LinearProgress-padding), min(var(--_LinearProgress-padding) / 2, var(--LinearProgress-radius) / 2))"
  }, ownerState.size === "sm" && {
    "--LinearProgress-thickness": "4px"
  }, ownerState.size === "md" && {
    "--LinearProgress-thickness": "6px"
  }, ownerState.size === "lg" && {
    "--LinearProgress-thickness": "8px"
  }, ownerState.thickness && {
    "--LinearProgress-thickness": `${ownerState.thickness}px`
  }, !ownerState.determinate && {
    "--LinearProgress-progressMinWidth": "calc(var(--LinearProgress-percent) * 1% / 2)",
    "--LinearProgress-progressMaxWidth": "calc(var(--LinearProgress-percent) * 1%)",
    "--_LinearProgress-progressLeft": "calc(100% - var(--LinearProgress-progressMinWidth) - var(--_LinearProgress-progressInset))",
    "--_LinearProgress-progressInset": "calc(var(--LinearProgress-thickness) / 2 - var(--LinearProgress-progressThickness) / 2)"
  }, {
    minBlockSize: "var(--LinearProgress-thickness)",
    boxSizing: "border-box",
    borderRadius: "var(--LinearProgress-radius)",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    flex: 1,
    padding: "var(--_LinearProgress-padding)",
    position: "relative"
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color], {
    "--_LinearProgress-padding": "max((var(--LinearProgress-thickness) - 2 * var(--variant-borderWidth, 0px) - var(--LinearProgress-progressThickness)) / 2, 0px)",
    "&::before": {
      content: '""',
      display: "block",
      boxSizing: "inherit",
      blockSize: "var(--LinearProgress-progressThickness)",
      borderRadius: "var(--LinearProgress-progressRadius)",
      backgroundColor: "currentColor",
      color: "inherit",
      position: "absolute"
      // required to make `left` animation works.
    }
  });
}, ({
  ownerState
}) => ownerState.determinate ? {
  "&::before": {
    left: "var(--_LinearProgress-padding)",
    inlineSize: "calc(var(--LinearProgress-percent) * 1% - 2 * var(--_LinearProgress-padding))"
  }
} : css(_t2 || (_t2 = _`
          &::before {
            animation: ${0}
              var(--LinearProgress-circulation, 2.5s ease-in-out 0s infinite normal none running);
          }
        `), progressKeyframe));
var LinearProgress = React35.forwardRef(function LinearProgress2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyLinearProgress"
  });
  const {
    children,
    className,
    component,
    color: colorProp = "primary",
    size = "md",
    variant = "soft",
    thickness,
    determinate = false,
    value = determinate ? 0 : 25,
    // `25` is the 1/4 of the bar.
    style
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded25);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const ownerState = _extends({}, props, {
    component,
    color,
    size,
    variant,
    thickness,
    value,
    determinate,
    instanceSize: inProps.size
  });
  const classes = useUtilityClasses22(ownerState);
  return (0, import_jsx_runtime31.jsx)(LinearProgressRoot, _extends({
    ref,
    as: component,
    className: clsx_m_default(classes.root, className),
    role: "progressbar",
    style: _extends({}, {
      "--LinearProgress-percent": value
    }, style),
    ownerState
  }, typeof value === "number" && determinate && {
    "aria-valuenow": Math.round(value)
  }, other, {
    children
  }));
});
true ? LinearProgress.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * @ignore
   */
  children: import_prop_types23.default.node,
  /**
   * @ignore
   */
  className: import_prop_types23.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'primary'
   */
  color: import_prop_types23.default.oneOfType([import_prop_types23.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types23.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types23.default.elementType,
  /**
   * The boolean to select a variant.
   * Use indeterminate when there is no progress value.
   * @default false
   */
  determinate: import_prop_types23.default.bool,
  /**
   * The size of the component.
   * It accepts theme values between 'sm' and 'lg'.
   * @default 'md'
   */
  size: import_prop_types23.default.oneOfType([import_prop_types23.default.oneOf(["sm", "md", "lg"]), import_prop_types23.default.string]),
  /**
   * @ignore
   */
  style: import_prop_types23.default.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types23.default.oneOfType([import_prop_types23.default.arrayOf(import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object, import_prop_types23.default.bool])), import_prop_types23.default.func, import_prop_types23.default.object]),
  /**
   * The thickness of the bar.
   */
  thickness: import_prop_types23.default.number,
  /**
   * The value of the progress indicator for the determinate variant.
   * Value between 0 and 100.
   *
   * @default determinate ? 0 : 25
   */
  value: import_prop_types23.default.number,
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'soft'
   */
  variant: import_prop_types23.default.oneOfType([import_prop_types23.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types23.default.string])
} : void 0;
var LinearProgress_default = LinearProgress;

// node_modules/@mui/joy/ListDivider/ListDivider.js
init_objectWithoutPropertiesLoose();
init_extends();
var React36 = __toESM(require_react());
var import_prop_types24 = __toESM(require_prop_types());
init_clsx_m();
init_esm();

// node_modules/@mui/joy/ListDivider/listDividerClasses.js
function getListDividerUtilityClass(slot) {
  return generateUtilityClass2("MuiListDivider", slot);
}
var listDividerClasses = generateUtilityClasses2("MuiListDivider", ["root", "insetGutter", "insetStartDecorator", "insetStartContent", "horizontal", "vertical"]);
var listDividerClasses_default = listDividerClasses;

// node_modules/@mui/joy/ListDivider/ListDivider.js
var import_jsx_runtime32 = __toESM(require_jsx_runtime());
var _excluded26 = ["component", "role", "className", "children", "inset", "orientation"];
var useUtilityClasses23 = (ownerState) => {
  const {
    orientation,
    inset
  } = ownerState;
  const slots = {
    root: [
      "root",
      orientation,
      // `insetContext` class is already produced by Divider
      inset && inset !== "context" && `inset${capitalize(inset)}`
    ]
  };
  return composeClasses(slots, getListDividerUtilityClass, {});
};
var ListDividerRoot = styled_default(DividerRoot, {
  name: "JoyListDivider",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState
}) => _extends({}, ownerState.inset === "context" && {
  "--Divider-inset": "calc(-1 * var(--List-padding))"
}, ownerState.row && _extends({
  marginInline: "var(--ListDivider-gap)"
}, ownerState.inset === "gutter" && {
  marginBlock: "var(--ListItem-paddingY)"
}, ownerState["data-first-child"] === void 0 && {
  // combine --List-gap and --ListDivider-gap to replicate flexbox gap behavior
  marginInlineStart: "calc(var(--List-gap) + var(--ListDivider-gap))"
}), !ownerState.row && _extends({}, ownerState["data-first-child"] === void 0 && {
  // combine --List-gap and --ListDivider-gap to replicate flexbox gap behavior
  marginBlockStart: "calc(var(--List-gap) + var(--ListDivider-gap))"
}, {
  marginBlockEnd: "var(--ListDivider-gap)"
}, ownerState.inset === "gutter" && {
  marginInlineStart: "var(--ListItem-paddingLeft)",
  marginInlineEnd: "var(--ListItem-paddingRight)"
}, ownerState.inset === "startDecorator" && {
  marginInlineStart: "var(--ListItem-paddingLeft)"
}, ownerState.inset === "startContent" && {
  marginInlineStart: "calc(var(--ListItem-paddingLeft) + var(--List-decoratorSize))"
})));
var ListDivider = React36.forwardRef(function ListDivider2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyListDivider"
  });
  const row = React36.useContext(RowListContext_default);
  const listComponent = React36.useContext(ComponentListContext_default);
  const {
    component: componentProp,
    role: roleProp,
    className,
    children,
    inset = "context",
    orientation: orientationProp
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded26);
  const [listElement] = (listComponent == null ? void 0 : listComponent.split(":")) || ["", ""];
  const component = componentProp || (listElement && !listElement.match(/^(ul|ol|menu)$/) ? "div" : "li");
  const role = roleProp || (component === "li" ? "separator" : void 0);
  const orientation = orientationProp || (row ? "vertical" : "horizontal");
  const ownerState = _extends({}, props, {
    inset,
    row,
    orientation,
    component,
    role
  });
  const classes = useUtilityClasses23(ownerState);
  return (0, import_jsx_runtime32.jsx)(ListDividerRoot, _extends({
    ref,
    as: component,
    className: clsx_m_default(classes.root, className),
    ownerState,
    role
  }, role === "separator" && orientation === "vertical" && {
    // The implicit aria-orientation of separator is 'horizontal'
    // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/separator_role
    "aria-orientation": "vertical"
  }, other, {
    children
  }));
});
true ? ListDivider.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: import_prop_types24.default.node,
  /**
   * @ignore
   */
  className: import_prop_types24.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types24.default.elementType,
  /**
   * The empty space on the side(s) of the divider in a vertical list.
   *
   * For horizontal list (the nearest parent List has `row` prop set to `true`), only `inset="gutter"` affects the list divider.
   * @default 'context'
   */
  inset: import_prop_types24.default.oneOfType([import_prop_types24.default.oneOf(["context", "gutter", "startDecorator", "startContent"]), import_prop_types24.default.string]),
  /**
   * The component orientation.
   * @default 'horizontal'
   */
  orientation: import_prop_types24.default.oneOf(["horizontal", "vertical"]),
  /**
   * @ignore
   */
  role: import_prop_types24.default.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types24.default.oneOfType([import_prop_types24.default.arrayOf(import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.object, import_prop_types24.default.bool])), import_prop_types24.default.func, import_prop_types24.default.object])
} : void 0;
var ListDivider_default = ListDivider;

// node_modules/@mui/joy/ListItemContent/ListItemContent.js
init_extends();
init_objectWithoutPropertiesLoose();
var React37 = __toESM(require_react());
var import_prop_types25 = __toESM(require_prop_types());
init_clsx_m();

// node_modules/@mui/joy/ListItemContent/listItemContentClasses.js
function getListItemContentUtilityClass(slot) {
  return generateUtilityClass2("MuiListItemContent", slot);
}
var listItemContentClasses = generateUtilityClasses2("MuiListItemContent", ["root"]);
var listItemContentClasses_default = listItemContentClasses;

// node_modules/@mui/joy/ListItemContent/ListItemContent.js
var import_jsx_runtime33 = __toESM(require_jsx_runtime());
var _excluded27 = ["component", "className", "children"];
var useUtilityClasses24 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getListItemContentUtilityClass, {});
};
var ListItemContentRoot = styled_default("div", {
  name: "JoyListItemContent",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({
  flex: "1 1 auto",
  minWidth: 0
});
var ListItemContent = React37.forwardRef(function ListItemContent2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyListItemContent"
  });
  const {
    component,
    className,
    children
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded27);
  const ownerState = _extends({}, props);
  const classes = useUtilityClasses24();
  return (0, import_jsx_runtime33.jsx)(ListItemContentRoot, _extends({
    ref,
    as: component,
    className: clsx_m_default(classes.root, className),
    ownerState
  }, other, {
    children
  }));
});
true ? ListItemContent.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: import_prop_types25.default.node,
  /**
   * @ignore
   */
  className: import_prop_types25.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types25.default.elementType,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types25.default.oneOfType([import_prop_types25.default.arrayOf(import_prop_types25.default.oneOfType([import_prop_types25.default.func, import_prop_types25.default.object, import_prop_types25.default.bool])), import_prop_types25.default.func, import_prop_types25.default.object])
} : void 0;
var ListItemContent_default = ListItemContent;

// node_modules/@mui/joy/ListItemDecorator/ListItemDecorator.js
init_objectWithoutPropertiesLoose();
init_extends();
var React38 = __toESM(require_react());
var import_prop_types26 = __toESM(require_prop_types());
init_clsx_m();

// node_modules/@mui/joy/ListItemDecorator/listItemDecoratorClasses.js
function getListItemDecoratorUtilityClass(slot) {
  return generateUtilityClass2("MuiListItemDecorator", slot);
}
var listItemDecoratorClasses = generateUtilityClasses2("MuiListItemDecorator", ["root"]);
var listItemDecoratorClasses_default = listItemDecoratorClasses;

// node_modules/@mui/joy/ListItemDecorator/ListItemDecorator.js
var import_jsx_runtime34 = __toESM(require_jsx_runtime());
var _excluded28 = ["component", "className", "children"];
var useUtilityClasses25 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getListItemDecoratorUtilityClass, {});
};
var ListItemDecoratorRoot = styled_default("span", {
  name: "JoyListItemDecorator",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState
}) => _extends({
  boxSizing: "border-box",
  display: "inline-flex",
  alignItems: "center",
  color: `var(--List-decoratorColor)`
}, ownerState.parentOrientation === "horizontal" ? {
  minInlineSize: "var(--List-decoratorSize)"
} : {
  minBlockSize: "var(--List-decoratorSize)"
}));
var ListItemDecorator = React38.forwardRef(function ListItemDecorator2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyListItemDecorator"
  });
  const {
    component,
    className,
    children
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded28);
  const parentOrientation = React38.useContext(ListItemButtonOrientationContext_default);
  const ownerState = _extends({
    parentOrientation
  }, props);
  const classes = useUtilityClasses25();
  return (0, import_jsx_runtime34.jsx)(ListItemDecoratorRoot, _extends({
    ref,
    as: component,
    className: clsx_m_default(classes.root, className),
    ownerState
  }, other, {
    children
  }));
});
true ? ListItemDecorator.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: import_prop_types26.default.node,
  /**
   * @ignore
   */
  className: import_prop_types26.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types26.default.elementType,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object, import_prop_types26.default.bool])), import_prop_types26.default.func, import_prop_types26.default.object])
} : void 0;
var ListItemDecorator_default = ListItemDecorator;

// node_modules/@mui/joy/Menu/Menu.js
init_objectWithoutPropertiesLoose();
init_extends();
var React39 = __toESM(require_react());
var import_prop_types27 = __toESM(require_prop_types());
init_esm();

// node_modules/@mui/joy/Menu/menuClasses.js
function getMenuUtilityClass(slot) {
  return generateUtilityClass2("MuiMenu", slot);
}
var menuClasses = generateUtilityClasses2("MuiMenu", ["root", "expanded", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg"]);
var menuClasses_default = menuClasses;

// node_modules/@mui/joy/Menu/Menu.js
var import_jsx_runtime35 = __toESM(require_jsx_runtime());
var _excluded29 = ["actions", "anchorEl", "children", "component", "color", "disablePortal", "keepMounted", "id", "onClose", "open", "modifiers", "variant", "size"];
var useUtilityClasses26 = (ownerState) => {
  const {
    open,
    variant,
    color,
    size
  } = ownerState;
  const slots = {
    root: ["root", open && "expanded", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getMenuUtilityClass, {});
};
var MenuRoot = styled_default(StyledList, {
  name: "JoyMenu",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  const variantStyle = (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color];
  return _extends({
    "--focus-outline-offset": `calc(${theme.vars.focus.thickness} * -1)`,
    // to prevent the focus outline from being cut by overflow
    "--List-radius": theme.vars.radius.sm,
    "--ListItem-stickyBackground": (variantStyle == null ? void 0 : variantStyle.backgroundColor) || (variantStyle == null ? void 0 : variantStyle.background) || theme.vars.palette.background.popup,
    "--ListItem-stickyTop": "calc(var(--List-padding, var(--ListDivider-gap)) * -1)"
  }, scopedVariables, {
    boxShadow: theme.shadow.md,
    overflow: "auto",
    zIndex: theme.vars.zIndex.popup
  }, !(variantStyle != null && variantStyle.backgroundColor) && {
    backgroundColor: theme.vars.palette.background.popup
  });
});
var Menu = React39.forwardRef(function Menu2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyMenu"
  });
  const {
    actions,
    anchorEl,
    children,
    component,
    color: colorProp = "neutral",
    disablePortal = false,
    keepMounted = false,
    id,
    onClose,
    open = false,
    modifiers: modifiersProp,
    variant = "outlined",
    size = "md"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded29);
  const {
    getColor
  } = useColorInversion(variant);
  const color = disablePortal ? getColor(inProps.color, colorProp) : colorProp;
  const {
    contextValue,
    getListboxProps,
    highlightFirstItem,
    highlightLastItem
  } = useMenu({
    open,
    onClose,
    listboxId: id
  });
  React39.useImperativeHandle(actions, () => ({
    highlightFirstItem,
    highlightLastItem
  }), [highlightFirstItem, highlightLastItem]);
  const ownerState = _extends({}, props, {
    disablePortal,
    color,
    variant,
    size,
    open,
    nesting: false,
    row: false
  });
  const classes = useUtilityClasses26(ownerState);
  const rootProps = useSlotProps({
    elementType: MenuRoot,
    externalForwardedProps: other,
    getSlotProps: getListboxProps,
    externalSlotProps: {},
    additionalProps: {
      anchorEl,
      open,
      disablePortal,
      keepMounted,
      ref,
      component: MenuRoot,
      as: component
      // use `as` to insert the component inside of the MenuRoot
    },
    className: classes.root,
    ownerState
  });
  const modifiers = React39.useMemo(() => [{
    name: "offset",
    options: {
      offset: [0, 4]
    }
  }, ...modifiersProp || []], [modifiersProp]);
  const menuContextValue = React39.useMemo(() => _extends({}, contextValue, {
    open
  }), [contextValue, open]);
  const result = (0, import_jsx_runtime35.jsx)(PopperUnstyled_default, _extends({}, rootProps, {
    modifiers,
    children: (0, import_jsx_runtime35.jsx)(MenuUnstyledContext_default.Provider, {
      value: menuContextValue,
      children: (0, import_jsx_runtime35.jsx)(ListProvider_default, {
        nested: true,
        children: disablePortal ? children : (
          // For portal popup, the children should not inherit color inversion from the upper parent.
          (0, import_jsx_runtime35.jsx)(ColorInversion_default.Provider, {
            value: void 0,
            children
          })
        )
      })
    })
  }));
  return disablePortal ? result : (
    // For portal popup, the children should not inherit color inversion from the upper parent.
    (0, import_jsx_runtime35.jsx)(ColorInversion_default.Provider, {
      value: void 0,
      children: result
    })
  );
});
true ? Menu.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * A ref with imperative actions.
   * It allows to select the first or last menu item.
   */
  actions: refType_default,
  /**
   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
   * or a function that returns either.
   * It's used to set the position of the popper.
   * The return value will passed as the reference object of the Popper instance.
   */
  anchorEl: import_prop_types27.default.oneOfType([HTMLElementType, import_prop_types27.default.func]),
  /**
   * @ignore
   */
  children: import_prop_types27.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types27.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types27.default.elementType,
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: import_prop_types27.default.bool,
  /**
   * @ignore
   */
  id: import_prop_types27.default.string,
  /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Popper.
   * @default false
   */
  keepMounted: import_prop_types27.default.bool,
  /**
   * Popper.js is based on a "plugin-like" architecture,
   * most of its features are fully encapsulated "modifiers".
   *
   * A modifier is a function that is called each time Popper.js needs to
   * compute the position of the popper.
   * For this reason, modifiers should be very performant to avoid bottlenecks.
   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
   */
  modifiers: import_prop_types27.default.arrayOf(import_prop_types27.default.shape({
    data: import_prop_types27.default.object,
    effect: import_prop_types27.default.func,
    enabled: import_prop_types27.default.bool,
    fn: import_prop_types27.default.func,
    name: import_prop_types27.default.any,
    options: import_prop_types27.default.object,
    phase: import_prop_types27.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
    requires: import_prop_types27.default.arrayOf(import_prop_types27.default.string),
    requiresIfExists: import_prop_types27.default.arrayOf(import_prop_types27.default.string)
  })),
  /**
   * Triggered when focus leaves the menu and the menu should close.
   */
  onClose: import_prop_types27.default.func,
  /**
   * Controls whether the menu is displayed.
   * @default false
   */
  open: import_prop_types27.default.bool,
  /**
   * The size of the component (affect other nested list* components because the `Menu` inherits `List`).
   * @default 'md'
   */
  size: import_prop_types27.default.oneOfType([import_prop_types27.default.oneOf(["sm", "md", "lg"]), import_prop_types27.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types27.default.oneOfType([import_prop_types27.default.arrayOf(import_prop_types27.default.oneOfType([import_prop_types27.default.func, import_prop_types27.default.object, import_prop_types27.default.bool])), import_prop_types27.default.func, import_prop_types27.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types27.default.oneOfType([import_prop_types27.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types27.default.string])
} : void 0;
var Menu_default = Menu;

// node_modules/@mui/joy/MenuItem/MenuItem.js
init_extends();
init_objectWithoutPropertiesLoose();
var React40 = __toESM(require_react());
var import_prop_types28 = __toESM(require_prop_types());
init_esm();

// node_modules/@mui/joy/MenuItem/menuItemClasses.js
function getMenuItemUtilityClass(slot) {
  return generateUtilityClass2("MuiMenuItem", slot);
}
var menuItemClasses = generateUtilityClasses2("MuiMenuItem", ["root", "focusVisible", "disabled", "selected", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantSoft", "variantOutlined", "variantSolid"]);
var menuItemClasses_default = menuItemClasses;

// node_modules/@mui/joy/MenuItem/MenuItem.js
var import_jsx_runtime36 = __toESM(require_jsx_runtime());
var _excluded30 = ["children", "disabled", "component", "selected", "color", "variant"];
var useUtilityClasses27 = (ownerState) => {
  const {
    focusVisible,
    disabled,
    selected,
    color,
    variant
  } = ownerState;
  const slots = {
    root: ["root", focusVisible && "focusVisible", disabled && "disabled", selected && "selected", color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`]
  };
  const composedClasses = composeClasses(slots, getMenuItemUtilityClass, {});
  return composedClasses;
};
var MenuItemRoot = styled_default(StyledListItemButton, {
  name: "JoyMenuItem",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({});
var MenuItem = React40.forwardRef(function MenuItem2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyMenuItem"
  });
  const row = React40.useContext(RowListContext_default);
  const {
    children,
    disabled: disabledProp = false,
    component = "li",
    selected = false,
    color: colorProp = selected ? "primary" : "neutral",
    variant = "plain"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded30);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const {
    getRootProps,
    disabled,
    focusVisible
  } = useMenuItem({
    disabled: disabledProp,
    ref
  });
  const ownerState = _extends({}, props, {
    component,
    color,
    disabled,
    focusVisible,
    selected,
    row,
    variant
  });
  const classes = useUtilityClasses27(ownerState);
  const rootProps = useSlotProps({
    elementType: MenuItemRoot,
    getSlotProps: getRootProps,
    externalSlotProps: {},
    additionalProps: {
      as: component
    },
    externalForwardedProps: other,
    className: classes.root,
    ownerState
  });
  return (0, import_jsx_runtime36.jsx)(MenuItemRoot, _extends({}, rootProps, {
    children
  }));
});
true ? MenuItem.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: import_prop_types28.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default selected ? 'primary' : 'neutral'
   */
  color: import_prop_types28.default.oneOfType([import_prop_types28.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types28.default.string]),
  /**
   * @ignore
   */
  component: import_prop_types28.default.elementType,
  /**
   * @ignore
   */
  disabled: import_prop_types28.default.bool,
  /**
   * If `true`, the component is selected.
   * @default false
   */
  selected: import_prop_types28.default.bool,
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types28.default.oneOfType([import_prop_types28.default.oneOf(["contained", "light", "outlined", "text"]), import_prop_types28.default.string])
} : void 0;
var MenuItem_default = MenuItem;

// node_modules/@mui/joy/MenuList/MenuList.js
init_objectWithoutPropertiesLoose();
init_extends();
var React41 = __toESM(require_react());
var import_prop_types29 = __toESM(require_prop_types());
init_esm();

// node_modules/@mui/joy/MenuList/menuListClasses.js
function getMenuListUtilityClass(slot) {
  return generateUtilityClass2("MuiMenuList", slot);
}
var menuClasses2 = generateUtilityClasses2("MuiMenuList", ["root", "nested", "sizeSm", "sizeMd", "sizeLg", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var menuListClasses_default = menuClasses2;

// node_modules/@mui/joy/MenuList/MenuList.js
var import_jsx_runtime37 = __toESM(require_jsx_runtime());
var _excluded31 = ["actions", "id", "component", "children", "size", "variant", "color"];
var useUtilityClasses28 = (ownerState) => {
  const {
    variant,
    color,
    size
  } = ownerState;
  const slots = {
    root: ["root", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getMenuListUtilityClass, {});
};
var MenuListRoot = styled_default(StyledList, {
  name: "JoyMenuList",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  const variantStyle = (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color];
  return _extends({
    "--focus-outline-offset": `calc(${theme.vars.focus.thickness} * -1)`,
    // to prevent the focus outline from being cut by overflow
    "--List-radius": theme.vars.radius.sm,
    "--ListItem-stickyBackground": (variantStyle == null ? void 0 : variantStyle.backgroundColor) || (variantStyle == null ? void 0 : variantStyle.background) || theme.vars.palette.background.surface,
    "--ListItem-stickyTop": "calc(var(--List-padding, var(--ListDivider-gap)) * -1)"
  }, scopedVariables, {
    overflow: "auto"
  }, !(variantStyle != null && variantStyle.backgroundColor) && {
    backgroundColor: theme.vars.palette.background.surface
  });
});
var MenuList = React41.forwardRef(function MenuList2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyMenuList"
  });
  const {
    actions,
    id: idProp,
    component,
    children,
    size = "md",
    variant = "outlined",
    color: colorProp = "neutral"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded31);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const {
    contextValue,
    getListboxProps,
    highlightFirstItem,
    highlightLastItem
  } = useMenu({
    listboxRef: ref,
    listboxId: idProp
  });
  React41.useImperativeHandle(actions, () => ({
    highlightFirstItem,
    highlightLastItem
  }), [highlightFirstItem, highlightLastItem]);
  const ownerState = _extends({}, props, {
    variant,
    color,
    size,
    nesting: false,
    row: false
  });
  const classes = useUtilityClasses28(ownerState);
  const listboxProps = useSlotProps({
    elementType: MenuListRoot,
    getSlotProps: getListboxProps,
    externalSlotProps: {},
    externalForwardedProps: other,
    additionalProps: {
      as: component
    },
    ownerState,
    className: classes.root
  });
  const menuContextValue = React41.useMemo(() => _extends({}, contextValue, {
    getListboxProps,
    open: true
  }), [contextValue, getListboxProps]);
  return (0, import_jsx_runtime37.jsx)(MenuListRoot, _extends({}, listboxProps, {
    children: (0, import_jsx_runtime37.jsx)(MenuUnstyledContext_default.Provider, {
      value: menuContextValue,
      children: (0, import_jsx_runtime37.jsx)(ListProvider_default, {
        nested: true,
        children
      })
    })
  }));
});
true ? MenuList.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * A ref with imperative actions.
   * It allows to select the first or last menu item.
   */
  actions: import_prop_types29.default.oneOfType([import_prop_types29.default.func, import_prop_types29.default.shape({
    current: import_prop_types29.default.shape({
      highlightFirstItem: import_prop_types29.default.func.isRequired,
      highlightLastItem: import_prop_types29.default.func.isRequired
    })
  })]),
  /**
   * @ignore
   */
  children: import_prop_types29.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types29.default.oneOfType([import_prop_types29.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types29.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types29.default.elementType,
  /**
   * @ignore
   */
  id: import_prop_types29.default.string,
  /**
   * The size of the component (affect other nested list* components because the `Menu` inherits `List`).
   * @default 'md'
   */
  size: import_prop_types29.default.oneOfType([import_prop_types29.default.oneOf(["sm", "md", "lg"]), import_prop_types29.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types29.default.oneOfType([import_prop_types29.default.arrayOf(import_prop_types29.default.oneOfType([import_prop_types29.default.func, import_prop_types29.default.object, import_prop_types29.default.bool])), import_prop_types29.default.func, import_prop_types29.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types29.default.oneOfType([import_prop_types29.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types29.default.string])
} : void 0;
var MenuList_default = MenuList;

// node_modules/@mui/joy/Option/Option.js
init_extends();
init_objectWithoutPropertiesLoose();
var React42 = __toESM(require_react());
var import_prop_types30 = __toESM(require_prop_types());

// node_modules/@mui/joy/Option/optionClasses.js
function getOptionUtilityClass(slot) {
  return generateUtilityClass2("MuiOption", slot);
}
var optionClasses = generateUtilityClasses2("MuiOption", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "focusVisible", "disabled", "selected", "highlighted", "variantPlain", "variantSoft", "variantOutlined", "variantSolid"]);
var optionClasses_default = optionClasses;

// node_modules/@mui/joy/Option/Option.js
var import_jsx_runtime38 = __toESM(require_jsx_runtime());
var _excluded33 = ["component", "children", "disabled", "value", "label", "variant", "color"];
var useUtilityClasses29 = (ownerState) => {
  const {
    disabled,
    highlighted,
    selected
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", highlighted && "highlighted", selected && "selected"]
  };
  return composeClasses(slots, getOptionUtilityClass, {});
};
var OptionRoot = styled_default(StyledListItemButton, {
  name: "JoyOption",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  const variantStyle = (_theme$variants = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants[ownerState.color];
  return {
    [`&.${optionClasses_default.highlighted}`]: {
      backgroundColor: variantStyle == null ? void 0 : variantStyle.backgroundColor
    }
  };
});
var Option = React42.forwardRef(function Option2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyOption"
  });
  const {
    component = "li",
    children,
    disabled = false,
    value,
    variant = "plain",
    color: colorProp = "neutral"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded33);
  const row = React42.useContext(RowListContext_default);
  const {
    getRootProps,
    selected,
    highlighted,
    index
  } = useOption({
    disabled,
    value,
    optionRef: ref
  });
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, selected ? "primary" : colorProp);
  const ownerState = _extends({}, props, {
    disabled,
    selected,
    highlighted,
    index,
    component,
    variant,
    color,
    row
  });
  const classes = useUtilityClasses29(ownerState);
  const rootProps = useSlotProps({
    getSlotProps: getRootProps,
    elementType: OptionRoot,
    externalSlotProps: {},
    externalForwardedProps: other,
    additionalProps: {
      as: component
    },
    className: classes.root,
    ownerState
  });
  return (0, import_jsx_runtime38.jsx)(OptionRoot, _extends({}, rootProps, {
    children
  }));
});
true ? Option.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: import_prop_types30.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types30.default.oneOfType([import_prop_types30.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types30.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types30.default.elementType,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: import_prop_types30.default.bool,
  /**
   * A text representation of the option's content.
   * Used for keyboard text navigation matching.
   */
  label: import_prop_types30.default.oneOfType([import_prop_types30.default.element, import_prop_types30.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types30.default.oneOfType([import_prop_types30.default.arrayOf(import_prop_types30.default.oneOfType([import_prop_types30.default.func, import_prop_types30.default.object, import_prop_types30.default.bool])), import_prop_types30.default.func, import_prop_types30.default.object]),
  /**
   * The option value.
   */
  value: import_prop_types30.default.any,
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types30.default.oneOfType([import_prop_types30.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types30.default.string])
} : void 0;
var Option_default = Option;

// node_modules/@mui/joy/Radio/Radio.js
init_objectWithoutPropertiesLoose();
init_extends();
var React43 = __toESM(require_react());
var import_prop_types31 = __toESM(require_prop_types());
init_esm();

// node_modules/@mui/joy/Radio/radioClasses.js
function getRadioUtilityClass(slot) {
  return generateUtilityClass2("MuiRadio", slot);
}
var radioClasses = generateUtilityClasses2("MuiRadio", ["root", "radio", "icon", "action", "input", "label", "checked", "disabled", "focusVisible", "colorPrimary", "colorDanger", "colorInfo", "colorNeutral", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantOutlined", "variantSoft", "variantSolid"]);
var radioClasses_default = radioClasses;

// node_modules/@mui/joy/Radio/Radio.js
var import_jsx_runtime39 = __toESM(require_jsx_runtime());
var import_jsx_runtime40 = __toESM(require_jsx_runtime());
var _excluded34 = ["checked", "checkedIcon", "defaultChecked", "disabled", "disableIcon", "overlay", "label", "id", "name", "onBlur", "onChange", "onFocus", "onFocusVisible", "readOnly", "required", "color", "variant", "size", "uncheckedIcon", "value"];
var useUtilityClasses30 = (ownerState) => {
  const {
    checked,
    disabled,
    disableIcon,
    focusVisible,
    color,
    variant,
    size
  } = ownerState;
  const slots = {
    root: ["root", checked && "checked", disabled && "disabled", focusVisible && "focusVisible", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`],
    radio: ["radio", checked && "checked", disabled && "disabled"],
    // disabled class is necessary for displaying global variant
    icon: ["icon"],
    action: [
      "action",
      checked && "checked",
      disableIcon && disabled && "disabled",
      // add disabled class to action element for displaying global variant
      focusVisible && "focusVisible"
    ],
    input: ["input"],
    label: ["label"]
  };
  return composeClasses(slots, getRadioUtilityClass, {});
};
function areEqualValues(a, b) {
  if (typeof b === "object" && b !== null) {
    return a === b;
  }
  return String(a) === String(b);
}
var RadioRoot = styled_default("span", {
  name: "JoyRadio",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState,
  theme
}) => {
  var _theme$variants$plain, _theme$variants$plain2, _theme$variants, _theme$variants2, _theme$variants3, _theme$variants4;
  return [_extends({
    "--Icon-fontSize": "var(--Radio-size)"
  }, ownerState.size === "sm" && {
    "--Radio-size": "1rem",
    "--Radio-gap": "0.375rem",
    "& ~ *": {
      "--FormHelperText-margin": "0.375rem 0 0 1.375rem"
    },
    fontSize: theme.vars.fontSize.sm
  }, ownerState.size === "md" && {
    "--Radio-size": "1.25rem",
    "--Radio-gap": "0.5rem",
    "& ~ *": {
      "--FormHelperText-margin": "0.375rem 0 0 1.75rem"
    },
    fontSize: theme.vars.fontSize.md
  }, ownerState.size === "lg" && {
    "--Radio-size": "1.5rem",
    "--Radio-gap": "0.625rem",
    "& ~ *": {
      "--FormHelperText-margin": "0.375rem 0 0 2.125rem"
    },
    fontSize: theme.vars.fontSize.lg
  }, {
    position: ownerState.overlay ? "initial" : "relative",
    display: "inline-flex",
    boxSizing: "border-box",
    minWidth: 0,
    fontFamily: theme.vars.fontFamily.body,
    lineHeight: "var(--Radio-size)",
    // prevent label from having larger height than the checkbox
    color: theme.vars.palette.text.primary,
    [`&.${radioClasses_default.disabled}`]: {
      color: (_theme$variants$plain = theme.variants.plainDisabled) == null ? void 0 : (_theme$variants$plain2 = _theme$variants$plain[ownerState.color]) == null ? void 0 : _theme$variants$plain2.color
    }
  }, ownerState.disableIcon && {
    color: (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : (_theme$variants2 = _theme$variants[ownerState.color]) == null ? void 0 : _theme$variants2.color,
    [`&.${radioClasses_default.disabled}`]: {
      color: (_theme$variants3 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : (_theme$variants4 = _theme$variants3[ownerState.color]) == null ? void 0 : _theme$variants4.color
    }
  }, ownerState["data-parent"] === "RadioGroup" && ownerState["data-first-child"] === void 0 && {
    marginInlineStart: ownerState.orientation === "horizontal" ? "var(--RadioGroup-gap)" : void 0,
    marginBlockStart: ownerState.orientation === "horizontal" ? void 0 : "var(--RadioGroup-gap)"
  })];
});
var RadioRadio = styled_default("span", {
  name: "JoyRadio",
  slot: "Radio",
  overridesResolver: (props, styles) => styles.radio
})(({
  ownerState,
  theme
}) => {
  var _theme$variants5, _variantStyle$backgro, _theme$variants6, _theme$variants7, _theme$variants8;
  const variantStyle = (_theme$variants5 = theme.variants[`${ownerState.variant}`]) == null ? void 0 : _theme$variants5[ownerState.color];
  return [_extends({
    margin: 0,
    boxSizing: "border-box",
    width: "var(--Radio-size)",
    height: "var(--Radio-size)",
    borderRadius: "var(--Radio-size)",
    display: "inline-flex",
    justifyContent: "center",
    alignItems: "center",
    flexShrink: 0
  }, ownerState.disableIcon && {
    display: "contents"
  }), ...!ownerState.disableIcon ? [_extends({}, variantStyle, {
    backgroundColor: (_variantStyle$backgro = variantStyle == null ? void 0 : variantStyle.backgroundColor) != null ? _variantStyle$backgro : theme.vars.palette.background.surface
  }), {
    "&:hover": (_theme$variants6 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants6[ownerState.color]
  }, {
    "&:active": (_theme$variants7 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants7[ownerState.color]
  }, {
    [`&.${radioClasses_default.disabled}`]: (_theme$variants8 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants8[ownerState.color]
  }] : []];
});
var RadioAction = styled_default("span", {
  name: "JoyRadio",
  slot: "Action",
  overridesResolver: (props, styles) => styles.action
})(({
  theme,
  ownerState
}) => {
  var _theme$variants9, _theme$variants10, _theme$variants11, _theme$variants12;
  return [{
    position: "absolute",
    textAlign: "left",
    // prevent text-align inheritance
    borderRadius: `var(--Radio-actionRadius, ${// Automatic radius adjustment when composing with ListItem or Sheet
    ownerState.overlay ? "var(--unstable_actionRadius, inherit)" : "inherit"})`,
    top: "calc(-1 * var(--variant-borderWidth, 0px))",
    // clickable on the border and focus outline does not move when checked/unchecked
    left: "calc(-1 * var(--variant-borderWidth, 0px))",
    bottom: "calc(-1 * var(--variant-borderWidth, 0px))",
    right: "calc(-1 * var(--variant-borderWidth, 0px))",
    zIndex: 1,
    // The action element usually cover the area of nearest positioned parent
    [theme.focus.selector]: theme.focus.default
  }, ...ownerState.disableIcon ? [(_theme$variants9 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants9[ownerState.color], {
    "&:hover": (_theme$variants10 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants10[ownerState.color]
  }, {
    "&:active": (_theme$variants11 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants11[ownerState.color]
  }, {
    [`&.${radioClasses_default.disabled}`]: (_theme$variants12 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants12[ownerState.color]
  }] : []];
});
var RadioInput = styled_default("input", {
  name: "JoyRadio",
  slot: "Input",
  overridesResolver: (props, styles) => styles.input
})(() => ({
  margin: 0,
  opacity: 0,
  position: "absolute",
  height: "100%",
  width: "100%",
  cursor: "pointer"
}));
var RadioLabel = styled_default("label", {
  name: "JoyRadio",
  slot: "Label",
  overridesResolver: (props, styles) => styles.label
})(({
  ownerState
}) => _extends({
  flex: 1,
  minWidth: 0
}, ownerState.disableIcon ? {
  zIndex: 1,
  // label should stay on top of the action.
  pointerEvents: "none"
  // makes hover ineffect.
} : {
  marginInlineStart: "var(--Radio-gap)"
}));
var RadioIcon = styled_default("span", {
  name: "JoyRadio",
  slot: "Icon",
  overridesResolver: (props, styles) => styles.icon
})(({
  ownerState
}) => ({
  width: "calc(var(--Radio-size) / 2)",
  height: "calc(var(--Radio-size) / 2)",
  borderRadius: "inherit",
  color: "inherit",
  backgroundColor: "currentColor",
  transform: ownerState.checked ? "scale(1)" : "scale(0)"
}));
var Radio = React43.forwardRef(function Radio2(inProps, ref) {
  var _ref, _ref2, _inProps$color, _ref3, _ref4, _inProps$color2;
  const props = useThemeProps({
    props: inProps,
    name: "JoyRadio"
  });
  const {
    checked: checkedProp,
    checkedIcon,
    defaultChecked,
    disabled: disabledProp,
    disableIcon: disableIconProp = false,
    overlay: overlayProp = false,
    label,
    id: idOverride,
    name: nameProp,
    onBlur,
    onChange,
    onFocus,
    onFocusVisible,
    readOnly,
    required,
    color: colorProp,
    variant = "outlined",
    size: sizeProp = "md",
    uncheckedIcon,
    value
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded34);
  const {
    getColor
  } = useColorInversion(variant);
  const formControl = React43.useContext(FormControlContext_default);
  if (true) {
    const registerEffect = formControl == null ? void 0 : formControl.registerEffect;
    React43.useEffect(() => {
      if (registerEffect) {
        return registerEffect();
      }
      return void 0;
    }, [registerEffect]);
  }
  const id = useId(idOverride != null ? idOverride : formControl == null ? void 0 : formControl.htmlFor);
  const radioGroup = React43.useContext(RadioGroupContext_default);
  const activeColor = formControl != null && formControl.error ? "danger" : (_ref = (_ref2 = (_inProps$color = inProps.color) != null ? _inProps$color : formControl == null ? void 0 : formControl.color) != null ? _ref2 : colorProp) != null ? _ref : "primary";
  const inactiveColor = formControl != null && formControl.error ? "danger" : (_ref3 = (_ref4 = (_inProps$color2 = inProps.color) != null ? _inProps$color2 : formControl == null ? void 0 : formControl.color) != null ? _ref4 : colorProp) != null ? _ref3 : "neutral";
  const size = inProps.size || (formControl == null ? void 0 : formControl.size) || (radioGroup == null ? void 0 : radioGroup.size) || sizeProp;
  const name = inProps.name || (radioGroup == null ? void 0 : radioGroup.name) || nameProp;
  const disableIcon = inProps.disableIcon || (radioGroup == null ? void 0 : radioGroup.disableIcon) || disableIconProp;
  const overlay = inProps.overlay || (radioGroup == null ? void 0 : radioGroup.overlay) || overlayProp;
  const radioChecked = typeof checkedProp === "undefined" && !!value ? areEqualValues(radioGroup == null ? void 0 : radioGroup.value, value) : checkedProp;
  const useRadioProps = {
    checked: radioChecked,
    defaultChecked,
    disabled: disabledProp != null ? disabledProp : formControl == null ? void 0 : formControl.disabled,
    onBlur,
    onChange,
    onFocus,
    onFocusVisible
  };
  const {
    getInputProps,
    checked,
    disabled,
    focusVisible
  } = useSwitch(useRadioProps);
  const color = getColor(inProps.color, checked ? activeColor : inactiveColor);
  const ownerState = _extends({}, props, {
    checked,
    disabled,
    focusVisible,
    color,
    variant,
    size,
    disableIcon,
    overlay,
    orientation: radioGroup == null ? void 0 : radioGroup.orientation
  });
  const classes = useUtilityClasses30(ownerState);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: RadioRoot,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotRadio, radioProps] = useSlot("radio", {
    className: classes.radio,
    elementType: RadioRadio,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotIcon, iconProps] = useSlot("icon", {
    className: classes.icon,
    elementType: RadioIcon,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotAction, actionProps] = useSlot("action", {
    className: classes.action,
    elementType: RadioAction,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotInput, inputProps] = useSlot("input", {
    additionalProps: {
      type: "radio",
      id,
      name,
      readOnly,
      required: required != null ? required : formControl == null ? void 0 : formControl.required,
      value: String(value),
      "aria-describedby": formControl == null ? void 0 : formControl["aria-describedby"]
    },
    className: classes.input,
    elementType: RadioInput,
    externalForwardedProps: other,
    getSlotProps: () => getInputProps({
      onChange: radioGroup == null ? void 0 : radioGroup.onChange
    }),
    ownerState
  });
  const [SlotLabel, labelProps] = useSlot("label", {
    additionalProps: {
      htmlFor: id
    },
    className: classes.label,
    elementType: RadioLabel,
    externalForwardedProps: other,
    ownerState
  });
  return (0, import_jsx_runtime40.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [(0, import_jsx_runtime40.jsxs)(SlotRadio, _extends({}, radioProps, {
      children: [checked && !disableIcon && checkedIcon, !checked && !disableIcon && uncheckedIcon, !checkedIcon && !uncheckedIcon && !disableIcon && (0, import_jsx_runtime39.jsx)(SlotIcon, _extends({}, iconProps)), (0, import_jsx_runtime39.jsx)(SlotAction, _extends({}, actionProps, {
        children: (0, import_jsx_runtime39.jsx)(SlotInput, _extends({}, inputProps))
      }))]
    })), label && (0, import_jsx_runtime39.jsx)(SlotLabel, _extends({}, labelProps, {
      children: (0, import_jsx_runtime39.jsx)(TypographyNestedContext.Provider, {
        value: true,
        children: label
      })
    }))]
  }));
});
true ? Radio.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * If `true`, the component is checked.
   */
  checked: import_prop_types31.default.bool,
  /**
   * The icon to display when the component is checked.
   */
  checkedIcon: import_prop_types31.default.node,
  /**
   * @ignore
   */
  children: import_prop_types31.default.node,
  /**
   * Class name applied to the root element.
   */
  className: import_prop_types31.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types31.default.oneOfType([import_prop_types31.default.oneOf(["danger", "info", "primary", "success", "warning"]), import_prop_types31.default.string]),
  /**
   * The default checked state. Use when the component is not controlled.
   */
  defaultChecked: import_prop_types31.default.bool,
  /**
   * If `true`, the component is disabled.
   */
  disabled: import_prop_types31.default.bool,
  /**
   * If `true`, the checked icon is removed and the selected variant is applied on the `action` element instead.
   * @default false
   */
  disableIcon: import_prop_types31.default.bool,
  /**
   * @ignore
   */
  id: import_prop_types31.default.string,
  /**
   * The label element at the end the radio.
   */
  label: import_prop_types31.default.node,
  /**
   * The `name` attribute of the input.
   */
  name: import_prop_types31.default.string,
  /**
   * @ignore
   */
  onBlur: import_prop_types31.default.func,
  /**
   * Callback fired when the state is changed.
   *
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: import_prop_types31.default.func,
  /**
   * @ignore
   */
  onFocus: import_prop_types31.default.func,
  /**
   * @ignore
   */
  onFocusVisible: import_prop_types31.default.func,
  /**
   * If `true`, the root element's position is set to initial which allows the action area to fill the nearest positioned parent.
   * This prop is useful for composing Radio with ListItem component.
   * @default false
   */
  overlay: import_prop_types31.default.bool,
  /**
   * If `true`, the component is read only.
   */
  readOnly: import_prop_types31.default.bool,
  /**
   * If `true`, the `input` element is required.
   */
  required: import_prop_types31.default.bool,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types31.default.oneOfType([import_prop_types31.default.oneOf(["sm", "md", "lg"]), import_prop_types31.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types31.default.oneOfType([import_prop_types31.default.arrayOf(import_prop_types31.default.oneOfType([import_prop_types31.default.func, import_prop_types31.default.object, import_prop_types31.default.bool])), import_prop_types31.default.func, import_prop_types31.default.object]),
  /**
   * The icon to display when the component is not checked.
   */
  uncheckedIcon: import_prop_types31.default.node,
  /**
   * The value of the component. The DOM API casts this to a string.
   */
  value: import_prop_types31.default.any,
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types31.default.oneOfType([import_prop_types31.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types31.default.string])
} : void 0;
var Radio_default = Radio;

// node_modules/@mui/joy/RadioGroup/RadioGroup.js
init_objectWithoutPropertiesLoose();
init_extends();
var React44 = __toESM(require_react());
var import_prop_types32 = __toESM(require_prop_types());
init_clsx_m();
init_esm();

// node_modules/@mui/joy/RadioGroup/radioGroupClasses.js
function getRadioGroupUtilityClass(slot) {
  return generateUtilityClass2("MuiRadioGroup", slot);
}
var radioGroupClasses = generateUtilityClasses2("MuiRadioGroup", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg", "horizontal", "vertical"]);
var radioGroupClasses_default = radioGroupClasses;

// node_modules/@mui/joy/RadioGroup/RadioGroup.js
var import_jsx_runtime41 = __toESM(require_jsx_runtime());
var _excluded35 = ["className", "component", "children", "name", "defaultValue", "disableIcon", "overlay", "value", "onChange", "color", "variant", "size", "orientation", "role"];
var useUtilityClasses31 = (ownerState) => {
  const {
    orientation,
    size,
    variant,
    color
  } = ownerState;
  const slots = {
    root: ["root", orientation, variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getRadioGroupUtilityClass, {});
};
var RadioGroupRoot = styled_default("div", {
  name: "JoyRadioGroup",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState,
  theme
}) => {
  var _theme$variants;
  return _extends({}, ownerState.size === "sm" && {
    "--RadioGroup-gap": "0.625rem"
  }, ownerState.size === "md" && {
    "--RadioGroup-gap": "0.875rem"
  }, ownerState.size === "lg" && {
    "--RadioGroup-gap": "1.25rem"
  }, {
    display: "flex",
    flexDirection: ownerState.orientation === "horizontal" ? "row" : "column",
    borderRadius: theme.vars.radius.sm
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]);
});
var RadioGroup = React44.forwardRef(function RadioGroup2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyRadioGroup"
  });
  const {
    className,
    component,
    children,
    name: nameProp,
    defaultValue,
    disableIcon = false,
    overlay,
    value: valueProp,
    onChange,
    color = "neutral",
    variant = "plain",
    size = "md",
    orientation = "vertical",
    role = "radiogroup"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded35);
  const [value, setValueState] = useControlled({
    controlled: valueProp,
    default: defaultValue,
    name: "RadioGroup"
  });
  const ownerState = _extends({
    orientation,
    size,
    variant,
    color,
    role
  }, props);
  const classes = useUtilityClasses31(ownerState);
  const name = useId(nameProp);
  const formControl = React44.useContext(FormControlContext_default);
  if (true) {
    const registerEffect = formControl == null ? void 0 : formControl.registerEffect;
    React44.useEffect(() => {
      if (registerEffect) {
        return registerEffect();
      }
      return void 0;
    }, [registerEffect]);
  }
  const contextValue = React44.useMemo(() => ({
    disableIcon,
    overlay,
    orientation,
    size,
    name,
    value,
    onChange: (event) => {
      setValueState(event.target.value);
      if (onChange) {
        onChange(event);
      }
    }
  }), [disableIcon, name, onChange, overlay, orientation, setValueState, size, value]);
  return (0, import_jsx_runtime41.jsx)(RadioGroupContext_default.Provider, {
    value: contextValue,
    children: (0, import_jsx_runtime41.jsx)(RadioGroupRoot, _extends({
      ref,
      role,
      as: component,
      ownerState,
      className: clsx_m_default(classes.root, className),
      id: formControl == null ? void 0 : formControl.htmlFor,
      "aria-labelledby": formControl == null ? void 0 : formControl.labelId,
      "aria-describedby": formControl == null ? void 0 : formControl["aria-describedby"]
    }, other, {
      children: (0, import_jsx_runtime41.jsx)(FormControlContext_default.Provider, {
        value: void 0,
        children: React44.Children.map(children, (child, index) => React44.isValidElement(child) ? React44.cloneElement(child, _extends({}, index === 0 && {
          "data-first-child": ""
        }, index === React44.Children.count(children) - 1 && {
          "data-last-child": ""
        }, {
          "data-parent": "RadioGroup"
        })) : child)
      })
    }))
  });
});
true ? RadioGroup.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * @ignore
   */
  children: import_prop_types32.default.node,
  /**
   * Class name applied to the root element.
   */
  className: import_prop_types32.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types32.default.oneOfType([import_prop_types32.default.oneOf(["danger", "info", "primary", "success", "warning"]), import_prop_types32.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types32.default.elementType,
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: import_prop_types32.default.any,
  /**
   * The radio's `disabledIcon` prop. If specified, the value is passed down to every radios under this element.
   * @default false
   */
  disableIcon: import_prop_types32.default.bool,
  /**
   * The name used to reference the value of the control.
   * If you don't provide this prop, it falls back to a randomly generated name.
   */
  name: import_prop_types32.default.string,
  /**
   * Callback fired when a radio button is selected.
   *
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: import_prop_types32.default.func,
  /**
   * The component orientation.
   * @default 'vertical'
   */
  orientation: import_prop_types32.default.oneOf(["horizontal", "vertical"]),
  /**
   * The radio's `overlay` prop. If specified, the value is passed down to every radios under this element.
   * @default false
   */
  overlay: import_prop_types32.default.bool,
  /**
   * @ignore
   */
  role: import_prop_types32.default.string,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types32.default.oneOfType([import_prop_types32.default.oneOf(["sm", "md", "lg"]), import_prop_types32.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types32.default.oneOfType([import_prop_types32.default.arrayOf(import_prop_types32.default.oneOfType([import_prop_types32.default.func, import_prop_types32.default.object, import_prop_types32.default.bool])), import_prop_types32.default.func, import_prop_types32.default.object]),
  /**
   * Value of the selected radio button. The DOM API casts this to a string.
   */
  value: import_prop_types32.default.any,
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types32.default.oneOfType([import_prop_types32.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types32.default.string])
} : void 0;
var RadioGroup_default = RadioGroup;

// node_modules/@mui/joy/ScopedCssBaseline/ScopedCssBaseline.js
init_objectWithoutPropertiesLoose();
init_extends();
var React45 = __toESM(require_react());
var import_prop_types33 = __toESM(require_prop_types());
init_clsx_m();

// node_modules/@mui/joy/ScopedCssBaseline/scopedCssBaselineClasses.js
function getScopedCssBaselineUtilityClass(slot) {
  return generateUtilityClass2("MuiScopedCssBaseline", slot);
}
var scopedCssBaselineClasses = generateUtilityClasses2("MuiScopedCssBaseline", ["root"]);
var scopedCssBaselineClasses_default = scopedCssBaselineClasses;

// node_modules/@mui/joy/ScopedCssBaseline/ScopedCssBaseline.js
var import_jsx_runtime42 = __toESM(require_jsx_runtime());
var _excluded36 = ["className", "component", "disableColorScheme"];
var useUtilityClasses32 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getScopedCssBaselineUtilityClass, {});
};
var ScopedCssBaselineRoot = styled_default("div", {
  name: "JoyScopedCssBaseline",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  const colorSchemeStyles = {};
  if (!ownerState.disableColorScheme && theme.colorSchemes) {
    Object.entries(theme.colorSchemes).forEach(([key, scheme]) => {
      var _scheme$palette;
      colorSchemeStyles[`&${theme.getColorSchemeSelector(key).replace(/\s*&/, "")}`] = {
        colorScheme: (_scheme$palette = scheme.palette) == null ? void 0 : _scheme$palette.mode
      };
    });
  }
  return _extends({
    WebkitFontSmoothing: "antialiased",
    MozOsxFontSmoothing: "grayscale",
    // Change from `box-sizing: content-box` so that `width`
    // is not affected by `padding` or `border`.
    boxSizing: "border-box",
    // Fix font resize problem in iOS
    WebkitTextSizeAdjust: "100%",
    color: theme.vars.palette.text.primary
  }, theme.typography.body1, {
    backgroundColor: theme.vars.palette.background.body,
    "@media print": {
      // Save printer ink.
      backgroundColor: theme.vars.palette.common.white
    },
    "& *, & *::before, & *::after": {
      boxSizing: "inherit"
    },
    "& strong, & b": {
      fontWeight: "bold"
    }
  }, colorSchemeStyles);
});
var ScopedCssBaseline = React45.forwardRef(function ScopedCssBaseline2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyScopedCssBaseline"
  });
  const {
    className,
    component = "div",
    disableColorScheme = false
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded36);
  const ownerState = _extends({}, props, {
    component,
    disableColorScheme
  });
  const classes = useUtilityClasses32();
  return (0, import_jsx_runtime42.jsx)(ScopedCssBaselineRoot, _extends({
    as: component,
    className: clsx_m_default(classes.root, className),
    ref,
    ownerState
  }, other));
});
true ? ScopedCssBaseline.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * You can wrap a node.
   */
  children: import_prop_types33.default.node,
  /**
   * @ignore
   */
  className: import_prop_types33.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types33.default.elementType,
  /**
   * Disable `color-scheme` CSS property.
   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme
   * For browser support, check out https://caniuse.com/?search=color-scheme
   * @default false
   */
  disableColorScheme: import_prop_types33.default.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types33.default.oneOfType([import_prop_types33.default.arrayOf(import_prop_types33.default.oneOfType([import_prop_types33.default.func, import_prop_types33.default.object, import_prop_types33.default.bool])), import_prop_types33.default.func, import_prop_types33.default.object])
} : void 0;
var ScopedCssBaseline_default = ScopedCssBaseline;

// node_modules/@mui/joy/Select/Select.js
init_objectWithoutPropertiesLoose();
init_extends();
var React47 = __toESM(require_react());
var import_prop_types34 = __toESM(require_prop_types());
init_clsx_m();
init_esm();

// node_modules/@mui/joy/internal/svg-icons/Unfold.js
var React46 = __toESM(require_react());
var import_jsx_runtime43 = __toESM(require_jsx_runtime());
var Unfold_default = createSvgIcon((0, import_jsx_runtime43.jsx)("path", {
  d: "m12 5.83 2.46 2.46c.39.39 1.02.39 1.41 0 .39-.39.39-1.02 0-1.41L12.7 3.7a.9959.9959 0 0 0-1.41 0L8.12 6.88c-.39.39-.39 1.02 0 1.41.39.39 1.02.39 1.41 0L12 5.83zm0 12.34-2.46-2.46a.9959.9959 0 0 0-1.41 0c-.39.39-.39 1.02 0 1.41l3.17 3.18c.39.39 1.02.39 1.41 0l3.17-3.17c.39-.39.39-1.02 0-1.41a.9959.9959 0 0 0-1.41 0L12 18.17z"
}), "Unfold");

// node_modules/@mui/joy/Select/selectClasses.js
function getSelectUtilityClass(slot) {
  return generateUtilityClass2("MuiSelect", slot);
}
var selectClasses = generateUtilityClasses2("MuiSelect", ["root", "button", "indicator", "startDecorator", "endDecorator", "popper", "listbox", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg", "focusVisible", "disabled", "expanded"]);
var selectClasses_default = selectClasses;

// node_modules/@mui/joy/Select/Select.js
var import_jsx_runtime44 = __toESM(require_jsx_runtime());
var import_jsx_runtime45 = __toESM(require_jsx_runtime());
var _Unfold;
var _excluded37 = ["action", "autoFocus", "children", "defaultValue", "defaultListboxOpen", "disabled", "getSerializedValue", "placeholder", "listboxId", "listboxOpen", "onChange", "onListboxOpenChange", "onClose", "renderValue", "value", "size", "variant", "color", "startDecorator", "endDecorator", "indicator", "aria-describedby", "aria-label", "aria-labelledby", "id", "name"];
function defaultRenderSingleValue(selectedOption) {
  var _selectedOption$label;
  return (_selectedOption$label = selectedOption == null ? void 0 : selectedOption.label) != null ? _selectedOption$label : "";
}
function defaultFormValueProvider(selectedOption) {
  if ((selectedOption == null ? void 0 : selectedOption.value) == null) {
    return "";
  }
  if (typeof selectedOption.value === "string" || typeof selectedOption.value === "number") {
    return selectedOption.value;
  }
  return JSON.stringify(selectedOption.value);
}
var defaultModifiers = [{
  name: "offset",
  options: {
    offset: [0, 4]
  }
}, {
  // popper will have the same width as root element when open
  name: "equalWidth",
  enabled: true,
  phase: "beforeWrite",
  requires: ["computeStyles"],
  fn: ({
    state
  }) => {
    state.styles.popper.width = `${state.rects.reference.width}px`;
  }
}];
var useUtilityClasses33 = (ownerState) => {
  const {
    color,
    disabled,
    focusVisible,
    size,
    variant,
    open
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", focusVisible && "focusVisible", open && "expanded", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`],
    button: ["button"],
    startDecorator: ["startDecorator"],
    endDecorator: ["endDecorator"],
    indicator: ["indicator", open && "expanded"],
    listbox: ["listbox", open && "expanded", disabled && "disabled"]
  };
  return composeClasses(slots, getSelectUtilityClass, {});
};
var SelectRoot = styled_default("div", {
  name: "JoySelect",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$vars$palette, _theme$variants2, _theme$variants3;
  const variantStyle = (_theme$variants = theme.variants[`${ownerState.variant}`]) == null ? void 0 : _theme$variants[ownerState.color];
  return [_extends({
    "--Select-radius": theme.vars.radius.sm,
    "--Select-gap": "0.5rem",
    "--Select-placeholderOpacity": 0.5,
    "--Select-focusedThickness": theme.vars.focus.thickness
  }, ownerState.color === "context" ? {
    "--Select-focusedHighlight": theme.vars.palette.focusVisible
  } : {
    "--Select-focusedHighlight": (_theme$vars$palette = theme.vars.palette[ownerState.color === "neutral" ? "primary" : ownerState.color]) == null ? void 0 : _theme$vars$palette[500]
  }, {
    "--Select-indicatorColor": variantStyle != null && variantStyle.backgroundColor ? variantStyle == null ? void 0 : variantStyle.color : theme.vars.palette.text.tertiary
  }, ownerState.size === "sm" && {
    "--Select-minHeight": "2rem",
    "--Select-paddingInline": "0.5rem",
    "--Select-decoratorChildHeight": "min(1.5rem, var(--Select-minHeight))",
    "--Icon-fontSize": "1.25rem"
  }, ownerState.size === "md" && {
    "--Select-minHeight": "2.5rem",
    "--Select-paddingInline": "0.75rem",
    "--Select-decoratorChildHeight": "min(2rem, var(--Select-minHeight))",
    "--Icon-fontSize": "1.5rem"
  }, ownerState.size === "lg" && {
    "--Select-minHeight": "3rem",
    "--Select-paddingInline": "1rem",
    "--Select-decoratorChildHeight": "min(2.375rem, var(--Select-minHeight))",
    "--Icon-fontSize": "1.75rem"
  }, {
    // variables for controlling child components
    "--Select-decoratorChildOffset": "min(calc(var(--Select-paddingInline) - (var(--Select-minHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Select-decoratorChildHeight)) / 2), var(--Select-paddingInline))",
    "--_Select-paddingBlock": "max((var(--Select-minHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Select-decoratorChildHeight)) / 2, 0px)",
    "--Select-decoratorChildRadius": "max(var(--Select-radius) - var(--variant-borderWidth, 0px) - var(--_Select-paddingBlock), min(var(--_Select-paddingBlock) + var(--variant-borderWidth, 0px), var(--Select-radius) / 2))",
    "--Button-minHeight": "var(--Select-decoratorChildHeight)",
    "--IconButton-size": "var(--Select-decoratorChildHeight)",
    "--Button-radius": "var(--Select-decoratorChildRadius)",
    "--IconButton-radius": "var(--Select-decoratorChildRadius)",
    boxSizing: "border-box",
    minWidth: 0,
    minHeight: "var(--Select-minHeight)",
    position: "relative",
    display: "flex",
    alignItems: "center",
    borderRadius: "var(--Select-radius)",
    cursor: "pointer"
  }, !variantStyle.backgroundColor && {
    backgroundColor: theme.vars.palette.background.surface
  }, ownerState.size && {
    paddingBlock: {
      sm: 2,
      md: 3,
      lg: 4
    }[ownerState.size]
    // the padding-block act as a minimum spacing between content and root element
  }, {
    paddingInline: `var(--Select-paddingInline)`,
    fontFamily: theme.vars.fontFamily.body,
    fontSize: theme.vars.fontSize.md
  }, ownerState.size === "sm" && {
    fontSize: theme.vars.fontSize.sm
  }, {
    "&::before": {
      boxSizing: "border-box",
      content: '""',
      display: "block",
      position: "absolute",
      pointerEvents: "none",
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      zIndex: 1,
      borderRadius: "inherit",
      margin: "calc(var(--variant-borderWidth, 0px) * -1)"
      // for outlined variant
    },
    [`&.${selectClasses_default.focusVisible}`]: {
      "--Select-indicatorColor": variantStyle == null ? void 0 : variantStyle.color,
      "&::before": {
        boxShadow: `inset 0 0 0 var(--Select-focusedThickness) var(--Select-focusedHighlight)`
      }
    },
    [`&.${selectClasses_default.disabled}`]: {
      "--Select-indicatorColor": "inherit"
    }
  }), _extends({}, variantStyle, {
    "&:hover": (_theme$variants2 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants2[ownerState.color],
    [`&.${selectClasses_default.disabled}`]: (_theme$variants3 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants3[ownerState.color]
  })];
});
var SelectButton = styled_default("button", {
  name: "JoySelect",
  slot: "Button",
  overridesResolver: (props, styles) => styles.button
})(({
  ownerState
}) => _extends({
  // reset user-agent button style
  border: 0,
  outline: 0,
  background: "none",
  padding: 0,
  fontSize: "inherit",
  color: "inherit",
  alignSelf: "stretch",
  // make children horizontally aligned
  display: "flex",
  alignItems: "center",
  flex: 1,
  fontFamily: "inherit",
  cursor: "pointer",
  whiteSpace: "nowrap",
  overflow: "auto"
}, (ownerState.value === null || ownerState.value === void 0) && {
  opacity: "var(--Select-placeholderOpacity)"
}));
var SelectListbox = styled_default(StyledList, {
  name: "JoySelect",
  slot: "Listbox",
  overridesResolver: (props, styles) => styles.listbox
})(({
  theme,
  ownerState
}) => {
  var _theme$variants4;
  const variantStyle = ownerState.color === "context" ? void 0 : (_theme$variants4 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants4[ownerState.color];
  return _extends({
    "--focus-outline-offset": `calc(${theme.vars.focus.thickness} * -1)`,
    // to prevent the focus outline from being cut by overflow
    "--List-radius": theme.vars.radius.sm,
    "--ListItem-stickyBackground": (variantStyle == null ? void 0 : variantStyle.backgroundColor) || (variantStyle == null ? void 0 : variantStyle.background) || theme.vars.palette.background.popup,
    "--ListItem-stickyTop": "calc(var(--List-padding, var(--ListDivider-gap)) * -1)"
  }, scopedVariables, {
    minWidth: "max-content",
    // prevent options from shrinking if some of them is wider than the Select's root.
    maxHeight: "44vh",
    // the best value from what I tried so far which does not cause screen flicker when listbox is open.
    overflow: "auto",
    outline: 0,
    boxShadow: theme.shadow.md,
    zIndex: theme.vars.zIndex.popup
  }, !(variantStyle != null && variantStyle.backgroundColor) && {
    backgroundColor: theme.vars.palette.background.popup
  });
});
var SelectStartDecorator = styled_default("span", {
  name: "JoySelect",
  slot: "StartDecorator",
  overridesResolver: (props, styles) => styles.startDecorator
})(({
  theme,
  ownerState
}) => _extends({
  "--Button-margin": "0 0 0 calc(var(--Select-decoratorChildOffset) * -1)",
  "--IconButton-margin": "0 0 0 calc(var(--Select-decoratorChildOffset) * -1)",
  "--Icon-margin": "0 0 0 calc(var(--Select-paddingInline) / -4)",
  display: "inherit",
  alignItems: "center",
  marginInlineEnd: "var(--Select-gap)",
  color: theme.vars.palette.text.tertiary
}, ownerState.focusVisible && {
  color: "var(--Select-focusedHighlight)"
}));
var SelectEndDecorator = styled_default("span", {
  name: "JoySelect",
  slot: "EndDecorator",
  overridesResolver: (props, styles) => styles.endDecorator
})(({
  theme,
  ownerState
}) => {
  var _theme$variants5;
  const variantStyle = (_theme$variants5 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants5[ownerState.color];
  return {
    "--Button-margin": "0 calc(var(--Select-decoratorChildOffset) * -1) 0 0",
    "--IconButton-margin": "0 calc(var(--Select-decoratorChildOffset) * -1) 0 0",
    "--Icon-margin": "0 calc(var(--Select-paddingInline) / -4) 0 0",
    display: "inherit",
    alignItems: "center",
    marginInlineStart: "var(--Select-gap)",
    color: variantStyle == null ? void 0 : variantStyle.color
  };
});
var SelectIndicator = styled_default("span", {
  name: "JoySelect",
  slot: "Indicator"
})(({
  ownerState
}) => _extends({}, ownerState.size === "sm" && {
  "--Icon-fontSize": "1.125rem"
}, ownerState.size === "md" && {
  "--Icon-fontSize": "1.25rem"
}, ownerState.size === "lg" && {
  "--Icon-fontSize": "1.5rem"
}, {
  color: "var(--Select-indicatorColor)",
  display: "inherit",
  alignItems: "center",
  marginInlineStart: "var(--Select-gap)",
  marginInlineEnd: "calc(var(--Select-paddingInline) / -4)",
  [`.${selectClasses_default.endDecorator} + &`]: {
    marginInlineStart: "calc(var(--Select-gap) / 2)"
  }
}));
var Select = React47.forwardRef(function Select2(inProps, ref) {
  var _ref2, _inProps$disabled, _ref3, _inProps$size, _formControl$color;
  const props = useThemeProps({
    props: inProps,
    name: "JoySelect"
  });
  const _ref = props, {
    action,
    autoFocus,
    children,
    defaultValue,
    defaultListboxOpen = false,
    disabled: disabledExternalProp,
    getSerializedValue = defaultFormValueProvider,
    placeholder,
    listboxId,
    listboxOpen: listboxOpenProp,
    onChange,
    onListboxOpenChange,
    onClose,
    renderValue: renderValueProp,
    value: valueProp,
    size: sizeProp = "md",
    variant = "outlined",
    color: colorProp = "neutral",
    startDecorator,
    endDecorator,
    indicator = _Unfold || (_Unfold = (0, import_jsx_runtime44.jsx)(Unfold_default, {})),
    // props to forward to the button (all handlers should go through slotProps.button)
    "aria-describedby": ariaDescribedby,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    id,
    name
  } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded37);
  const formControl = React47.useContext(FormControlContext_default);
  if (true) {
    const registerEffect = formControl == null ? void 0 : formControl.registerEffect;
    React47.useEffect(() => {
      if (registerEffect) {
        return registerEffect();
      }
      return void 0;
    }, [registerEffect]);
  }
  const disabledProp = (_ref2 = (_inProps$disabled = inProps.disabled) != null ? _inProps$disabled : formControl == null ? void 0 : formControl.disabled) != null ? _ref2 : disabledExternalProp;
  const size = (_ref3 = (_inProps$size = inProps.size) != null ? _inProps$size : formControl == null ? void 0 : formControl.size) != null ? _ref3 : sizeProp;
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, formControl != null && formControl.error ? "danger" : (_formControl$color = formControl == null ? void 0 : formControl.color) != null ? _formControl$color : colorProp);
  const renderValue = renderValueProp != null ? renderValueProp : defaultRenderSingleValue;
  const [anchorEl, setAnchorEl] = React47.useState(null);
  const [groupedOptions, setGroupedOptions] = React47.useState([]);
  const options = React47.useMemo(() => flattenOptionGroups(groupedOptions), [groupedOptions]);
  const [listboxOpen, setListboxOpen] = useControlled({
    controlled: listboxOpenProp,
    default: defaultListboxOpen,
    name: "SelectUnstyled",
    state: "listboxOpen"
  });
  const rootRef = React47.useRef(null);
  const buttonRef = React47.useRef(null);
  const listboxRef = React47.useRef(null);
  const handleRef = useForkRef(ref, rootRef);
  React47.useImperativeHandle(action, () => ({
    focusVisible: () => {
      var _buttonRef$current;
      (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();
    }
  }), []);
  React47.useEffect(() => {
    setGroupedOptions(getOptionsFromChildren(children));
  }, [children]);
  React47.useEffect(() => {
    setAnchorEl(rootRef.current);
  }, []);
  React47.useEffect(() => {
    if (autoFocus) {
      buttonRef.current.focus();
    }
  }, [autoFocus]);
  const handleOpenChange = React47.useCallback((isOpen) => {
    setListboxOpen(isOpen);
    onListboxOpenChange == null ? void 0 : onListboxOpenChange(isOpen);
    if (!isOpen) {
      onClose == null ? void 0 : onClose();
    }
  }, [onClose, onListboxOpenChange, setListboxOpen]);
  const {
    buttonActive,
    buttonFocusVisible,
    contextValue,
    disabled,
    getButtonProps,
    getListboxProps,
    value
  } = useSelect_default({
    buttonRef,
    defaultValue,
    disabled: disabledProp,
    listboxId,
    multiple: false,
    onChange,
    onOpenChange: handleOpenChange,
    open: listboxOpen,
    options,
    value: valueProp
  });
  const ownerState = _extends({}, props, {
    active: buttonActive,
    defaultListboxOpen,
    disabled,
    focusVisible: buttonFocusVisible,
    open: listboxOpen,
    renderValue,
    value,
    size,
    variant,
    color
  });
  const classes = useUtilityClasses33(ownerState);
  const selectedOption = React47.useMemo(() => {
    var _options$find;
    return (_options$find = options.find((o) => value === o.value)) != null ? _options$find : null;
  }, [options, value]);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref: handleRef,
    className: classes.root,
    elementType: SelectRoot,
    externalForwardedProps: other,
    getSlotProps: (handlers) => ({
      onMouseDown: (event) => {
        var _buttonRef$current2, _handlers$onMouseDown;
        if (!listboxOpen && !((_buttonRef$current2 = buttonRef.current) != null && _buttonRef$current2.contains(event.target)) && !event.isPropagationStopped()) {
          handleOpenChange(true);
        }
        (_handlers$onMouseDown = handlers.onMouseDown) == null ? void 0 : _handlers$onMouseDown.call(handlers, event);
      }
    }),
    ownerState
  });
  const [SlotButton, buttonProps] = useSlot("button", {
    additionalProps: {
      "aria-describedby": ariaDescribedby != null ? ariaDescribedby : formControl == null ? void 0 : formControl["aria-describedby"],
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledby != null ? ariaLabelledby : formControl == null ? void 0 : formControl.labelId,
      id: id != null ? id : formControl == null ? void 0 : formControl.htmlFor,
      name
    },
    className: classes.button,
    elementType: SelectButton,
    externalForwardedProps: other,
    getSlotProps: getButtonProps,
    ownerState
  });
  const [SlotListbox, listboxProps] = useSlot("listbox", {
    additionalProps: {
      ref: listboxRef,
      anchorEl,
      disablePortal: true,
      open: listboxOpen,
      placement: "bottom"
    },
    className: classes.listbox,
    elementType: PopperUnstyled_default,
    externalForwardedProps: other,
    getSlotProps: getListboxProps,
    ownerState: _extends({}, ownerState, {
      nesting: false,
      row: false,
      wrap: false
    }),
    getSlotOwnerState: (mergedProps) => ({
      size: mergedProps.size || size,
      variant: mergedProps.variant || "outlined",
      color: mergedProps.color || "neutral",
      disableColorInversion: !mergedProps.disablePortal
    }),
    internalForwardedProps: {
      component: SelectListbox
    }
  });
  const [SlotStartDecorator, startDecoratorProps] = useSlot("startDecorator", {
    className: classes.startDecorator,
    elementType: SelectStartDecorator,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot("endDecorator", {
    className: classes.endDecorator,
    elementType: SelectEndDecorator,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotIndicator, indicatorProps] = useSlot("indicator", {
    className: classes.indicator,
    elementType: SelectIndicator,
    externalForwardedProps: other,
    ownerState
  });
  const context = React47.useMemo(() => _extends({}, contextValue, {
    color
  }), [color, contextValue]);
  const modifiers = React47.useMemo(() => [...defaultModifiers, ...listboxProps.modifiers || []], [listboxProps.modifiers]);
  let result = null;
  if (anchorEl) {
    var _listboxProps$ownerSt;
    result = (0, import_jsx_runtime44.jsx)(SlotListbox, _extends({}, listboxProps, {
      className: clsx_m_default(listboxProps.className, ((_listboxProps$ownerSt = listboxProps.ownerState) == null ? void 0 : _listboxProps$ownerSt.color) === "context" && selectClasses_default.colorContext),
      modifiers,
      children: (0, import_jsx_runtime44.jsx)(SelectUnstyledContext.Provider, {
        value: context,
        children: (0, import_jsx_runtime44.jsx)(ListProvider_default, {
          nested: true,
          children
        })
      })
    }));
    if (!listboxProps.disablePortal) {
      result = // For portal popup, the children should not inherit color inversion from the upper parent.
      (0, import_jsx_runtime44.jsx)(ColorInversion_default.Provider, {
        value: void 0,
        children: result
      });
    }
  }
  return (0, import_jsx_runtime45.jsxs)(React47.Fragment, {
    children: [(0, import_jsx_runtime45.jsxs)(SlotRoot, _extends({}, rootProps, {
      children: [startDecorator && (0, import_jsx_runtime44.jsx)(SlotStartDecorator, _extends({}, startDecoratorProps, {
        children: startDecorator
      })), (0, import_jsx_runtime44.jsx)(SlotButton, _extends({}, buttonProps, {
        children: selectedOption ? renderValue(selectedOption) : placeholder
      })), endDecorator && (0, import_jsx_runtime44.jsx)(SlotEndDecorator, _extends({}, endDecoratorProps, {
        children: endDecorator
      })), indicator && (0, import_jsx_runtime44.jsx)(SlotIndicator, _extends({}, indicatorProps, {
        children: indicator
      }))]
    })), result, name && (0, import_jsx_runtime44.jsx)("input", {
      type: "hidden",
      name,
      value: getSerializedValue(selectedOption)
    })]
  });
});
true ? Select.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * A ref for imperative actions. It currently only supports `focusVisible()` action.
   */
  action: import_prop_types34.default.oneOfType([import_prop_types34.default.func, import_prop_types34.default.shape({
    current: import_prop_types34.default.shape({
      focusVisible: import_prop_types34.default.func.isRequired
    })
  })]),
  /**
   * If `true`, the select element is focused during the first mount
   * @default false
   */
  autoFocus: import_prop_types34.default.bool,
  /**
   * @ignore
   */
  children: import_prop_types34.default.node,
  /**
   * @ignore
   */
  className: import_prop_types34.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types34.default.oneOfType([import_prop_types34.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types34.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types34.default.elementType,
  /**
   * If `true`, the select will be initially open.
   * @default false
   */
  defaultListboxOpen: import_prop_types34.default.bool,
  /**
   * The default selected value. Use when the component is not controlled.
   */
  defaultValue: import_prop_types34.default.any,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: import_prop_types34.default.bool,
  /**
   * Trailing adornment for the select.
   */
  endDecorator: import_prop_types34.default.node,
  /**
   * A function to convert the currently selected value to a string.
   * Used to set a value of a hidden input associated with the select,
   * so that the selected value can be posted with a form.
   */
  getSerializedValue: import_prop_types34.default.func,
  /**
   * The indicator(*) for the select.
   *    ________________
   *   [ value        * ]
   *    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   */
  indicator: import_prop_types34.default.node,
  /**
   * `id` attribute of the listbox element.
   * Also used to derive the `id` attributes of options.
   */
  listboxId: import_prop_types34.default.string,
  /**
   * Controls the open state of the select's listbox.
   * @default undefined
   */
  listboxOpen: import_prop_types34.default.bool,
  /**
   * Name of the element. For example used by the server to identify the fields in form submits.
   * If the name is provided, the component will render a hidden input element that can be submitted to a server.
   */
  name: import_prop_types34.default.string,
  /**
   * Callback fired when an option is selected.
   */
  onChange: import_prop_types34.default.func,
  /**
   * Triggered when focus leaves the menu and the menu should close.
   */
  onClose: import_prop_types34.default.func,
  /**
   * Callback fired when the component requests to be opened.
   * Use in controlled mode (see listboxOpen).
   */
  onListboxOpenChange: import_prop_types34.default.func,
  /**
   * Text to show when there is no selected value.
   */
  placeholder: import_prop_types34.default.node,
  /**
   * Function that customizes the rendering of the selected value.
   */
  renderValue: import_prop_types34.default.func,
  /**
   * The size of the component.
   */
  size: import_prop_types34.default.oneOfType([import_prop_types34.default.oneOf(["sm", "md", "lg"]), import_prop_types34.default.string]),
  /**
   * Leading adornment for the select.
   */
  startDecorator: import_prop_types34.default.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types34.default.oneOfType([import_prop_types34.default.arrayOf(import_prop_types34.default.oneOfType([import_prop_types34.default.func, import_prop_types34.default.object, import_prop_types34.default.bool])), import_prop_types34.default.func, import_prop_types34.default.object]),
  /**
   * The selected value.
   * Set to `null` to deselect all options.
   */
  value: import_prop_types34.default.any,
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types34.default.oneOfType([import_prop_types34.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types34.default.string])
} : void 0;
var Select_default = Select;

// node_modules/@mui/joy/Slider/Slider.js
init_objectWithoutPropertiesLoose();
init_extends();
var React48 = __toESM(require_react());
var import_prop_types35 = __toESM(require_prop_types());
init_clsx_m();
init_esm();

// node_modules/@mui/joy/Slider/sliderClasses.js
function getSliderUtilityClass(slot) {
  return generateUtilityClass2("MuiSlider", slot);
}
var sliderClasses = generateUtilityClasses2("MuiSlider", ["root", "disabled", "dragging", "focusVisible", "marked", "vertical", "trackInverted", "trackFalse", "rail", "track", "mark", "markActive", "markLabel", "thumb", "thumbStart", "thumbEnd", "valueLabel", "valueLabelOpen", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "disabled", "sizeSm", "sizeMd", "sizeLg"]);
var sliderClasses_default = sliderClasses;

// node_modules/@mui/joy/Slider/Slider.js
var import_jsx_runtime46 = __toESM(require_jsx_runtime());
var import_jsx_runtime47 = __toESM(require_jsx_runtime());
var _excluded38 = ["aria-label", "aria-valuetext", "className", "classes", "disableSwap", "disabled", "defaultValue", "getAriaLabel", "getAriaValueText", "marks", "max", "min", "name", "onChange", "onChangeCommitted", "onMouseDown", "orientation", "scale", "step", "tabIndex", "track", "value", "valueLabelDisplay", "valueLabelFormat", "isRtl", "color", "size", "variant"];
function Identity(x) {
  return x;
}
var useUtilityClasses34 = (ownerState) => {
  const {
    disabled,
    dragging,
    marked,
    orientation,
    track,
    variant,
    color,
    size
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", dragging && "dragging", marked && "marked", orientation === "vertical" && "vertical", track === "inverted" && "trackInverted", track === false && "trackFalse", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`],
    rail: ["rail"],
    track: ["track"],
    thumb: ["thumb", disabled && "disabled"],
    input: ["input"],
    mark: ["mark"],
    markActive: ["markActive"],
    markLabel: ["markLabel"],
    markLabelActive: ["markLabelActive"],
    valueLabel: ["valueLabel"],
    valueLabelOpen: ["valueLabelOpen"],
    active: ["active"],
    focusVisible: ["focusVisible"]
  };
  return composeClasses(slots, getSliderUtilityClass, {});
};
var sliderColorVariables = ({
  theme,
  ownerState
}) => (data = {}) => {
  var _theme$variants;
  const styles = ((_theme$variants = theme.variants[`${ownerState.variant}${data.state || ""}`]) == null ? void 0 : _theme$variants[ownerState.color]) || {};
  return _extends({}, styles.border && {
    "--variant-borderWidth": styles["--variant-borderWidth"]
  }, {
    "--Slider-trackColor": styles.color,
    "--Slider-thumbBackground": styles.color,
    "--Slider-thumbColor": styles.backgroundColor || theme.vars.palette.background.surface,
    "--Slider-trackBackground": styles.backgroundColor || theme.vars.palette.background.surface,
    "--Slider-trackBorderColor": styles.borderColor,
    "--Slider-railBackground": theme.vars.palette.background.level2
  });
};
var SliderRoot = styled_default("span", {
  name: "JoySlider",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  const getColorVariables = sliderColorVariables({
    theme,
    ownerState
  });
  return [_extends({
    "--variant-borderWidth": "0px",
    // prevent using --variant-borderWidth from the outer scope
    "--Slider-size": "max(42px, max(var(--Slider-thumbSize), var(--Slider-trackSize)))",
    // Reach 42px touch target, about ~8mm on screen.
    "--Slider-trackRadius": "var(--Slider-size)",
    "--Slider-markBackground": theme.vars.palette.text.tertiary,
    [`& .${sliderClasses_default.markActive}`]: {
      "--Slider-markBackground": "var(--Slider-trackColor)"
    }
  }, ownerState.size === "sm" && {
    "--Slider-markSize": "2px",
    "--Slider-trackSize": "4px",
    "--Slider-thumbSize": "10px",
    "--Slider-valueLabelArrowSize": "6px"
  }, ownerState.size === "md" && {
    "--Slider-markSize": "2px",
    "--Slider-trackSize": "6px",
    "--Slider-thumbSize": "14px",
    "--Slider-valueLabelArrowSize": "8px"
  }, ownerState.size === "lg" && {
    "--Slider-markSize": "3px",
    "--Slider-trackSize": "10px",
    "--Slider-thumbSize": "20px",
    "--Slider-valueLabelArrowSize": "10px"
  }, {
    "--Slider-thumbRadius": "calc(var(--Slider-thumbSize) / 2)",
    "--Slider-thumbWidth": "var(--Slider-thumbSize)"
  }, getColorVariables(), {
    "&:hover": _extends({}, getColorVariables({
      state: "Hover"
    })),
    "&:active": _extends({}, getColorVariables({
      state: "Active"
    })),
    [`&.${sliderClasses_default.disabled}`]: _extends({
      pointerEvents: "none",
      color: theme.vars.palette.text.tertiary
    }, getColorVariables({
      state: "Disabled"
    })),
    boxSizing: "border-box",
    display: "inline-block",
    position: "relative",
    cursor: "pointer",
    touchAction: "none",
    WebkitTapHighlightColor: "transparent"
  }, ownerState.orientation === "horizontal" && {
    padding: "calc(var(--Slider-size) / 2) 0",
    width: "100%"
  }, ownerState.orientation === "vertical" && {
    padding: "0 calc(var(--Slider-size) / 2)",
    height: "100%"
  }, {
    "@media print": {
      colorAdjust: "exact"
    }
  })];
});
var SliderRail = styled_default("span", {
  name: "JoySlider",
  slot: "Rail",
  overridesResolver: (props, styles) => styles.rail
})(({
  ownerState
}) => [_extends({
  display: "block",
  position: "absolute",
  backgroundColor: ownerState.track === "inverted" ? "var(--Slider-trackBackground)" : "var(--Slider-railBackground)",
  border: ownerState.track === "inverted" ? "var(--variant-borderWidth, 0px) solid var(--Slider-trackBorderColor)" : "initial",
  borderRadius: "var(--Slider-trackRadius)"
}, ownerState.orientation === "horizontal" && {
  height: "var(--Slider-trackSize)",
  top: "50%",
  left: 0,
  right: 0,
  transform: "translateY(-50%)"
}, ownerState.orientation === "vertical" && {
  width: "var(--Slider-trackSize)",
  top: 0,
  bottom: 0,
  left: "50%",
  transform: "translateX(-50%)"
}, ownerState.track === "inverted" && {
  opacity: 1
})]);
var SliderTrack = styled_default("span", {
  name: "JoySlider",
  slot: "Track",
  overridesResolver: (props, styles) => styles.track
})(({
  ownerState
}) => {
  return [_extends({
    display: "block",
    position: "absolute",
    color: "var(--Slider-trackColor)",
    border: ownerState.track === "inverted" ? "initial" : "var(--variant-borderWidth, 0px) solid var(--Slider-trackBorderColor)",
    backgroundColor: ownerState.track === "inverted" ? "var(--Slider-railBackground)" : "var(--Slider-trackBackground)"
  }, ownerState.orientation === "horizontal" && {
    height: "var(--Slider-trackSize)",
    top: "50%",
    transform: "translateY(-50%)",
    borderRadius: "var(--Slider-trackRadius) 0 0 var(--Slider-trackRadius)"
  }, ownerState.orientation === "vertical" && {
    width: "var(--Slider-trackSize)",
    left: "50%",
    transform: "translateX(-50%)",
    borderRadius: "0 0 var(--Slider-trackRadius) var(--Slider-trackRadius)"
  }, ownerState.track === false && {
    display: "none"
  })];
});
var SliderThumb = styled_default("span", {
  name: "JoySlider",
  slot: "Thumb",
  overridesResolver: (props, styles) => styles.thumb
})(({
  ownerState,
  theme
}) => _extends({
  position: "absolute",
  boxSizing: "border-box",
  outline: 0,
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  width: "var(--Slider-thumbWidth)",
  height: "var(--Slider-thumbSize)",
  border: "var(--variant-borderWidth, 0px) solid var(--Slider-trackBorderColor)",
  borderRadius: "var(--Slider-thumbRadius)",
  boxShadow: "var(--Slider-thumbShadow)",
  color: "var(--Slider-thumbColor)",
  backgroundColor: "var(--Slider-thumbBackground)",
  [theme.focus.selector]: theme.focus.default
}, ownerState.orientation === "horizontal" && {
  top: "50%",
  transform: "translate(-50%, -50%)"
}, ownerState.orientation === "vertical" && {
  left: "50%",
  transform: "translate(-50%, 50%)"
}, {
  "&::before": {
    // use pseudo element to create thumb's ring
    boxSizing: "border-box",
    content: '""',
    display: "block",
    position: "absolute",
    background: "transparent",
    // to not block the thumb's child
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    border: "2px solid",
    borderColor: "var(--Slider-thumbColor)",
    borderRadius: "inherit"
  }
}));
var SliderMark = styled_default("span", {
  name: "JoySlider",
  slot: "Mark",
  overridesResolver: (props, styles) => styles.mark
})(({
  ownerState
}) => {
  return _extends({
    position: "absolute",
    width: "var(--Slider-markSize)",
    height: "var(--Slider-markSize)",
    borderRadius: "var(--Slider-markSize)",
    backgroundColor: "var(--Slider-markBackground)"
  }, ownerState.orientation === "horizontal" && _extends({
    top: "50%",
    transform: `translate(calc(var(--Slider-markSize) / -2), -50%)`
  }, ownerState.percent === 0 && {
    transform: `translate(min(var(--Slider-markSize), 3px), -50%)`
  }, ownerState.percent === 100 && {
    transform: `translate(calc(var(--Slider-markSize) * -1 - min(var(--Slider-markSize), 3px)), -50%)`
  }), ownerState.orientation === "vertical" && _extends({
    left: "50%",
    transform: "translate(-50%, calc(var(--Slider-markSize) / 2))"
  }, ownerState.percent === 0 && {
    transform: `translate(-50%, calc(min(var(--Slider-markSize), 3px) * -1))`
  }, ownerState.percent === 100 && {
    transform: `translate(-50%, calc(var(--Slider-markSize) * 1 + min(var(--Slider-markSize), 3px)))`
  }));
});
var SliderValueLabel = styled_default("span", {
  name: "JoySlider",
  slot: "ValueLabel",
  overridesResolver: (props, styles) => styles.valueLabel
})(({
  theme,
  ownerState
}) => _extends({}, ownerState.size === "sm" && {
  fontSize: theme.fontSize.xs,
  lineHeight: theme.lineHeight.md,
  paddingInline: "0.25rem",
  minWidth: "20px"
}, ownerState.size === "md" && {
  fontSize: theme.fontSize.sm,
  lineHeight: theme.lineHeight.md,
  paddingInline: "0.375rem",
  minWidth: "24px"
}, ownerState.size === "lg" && {
  fontSize: theme.fontSize.md,
  lineHeight: theme.lineHeight.md,
  paddingInline: "0.5rem",
  minWidth: "28px"
}, {
  zIndex: 1,
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  whiteSpace: "nowrap",
  fontFamily: theme.vars.fontFamily.body,
  fontWeight: theme.vars.fontWeight.md,
  bottom: 0,
  transformOrigin: "bottom center",
  transform: "translateY(calc((var(--Slider-thumbSize) + var(--Slider-valueLabelArrowSize)) * -1)) scale(0)",
  position: "absolute",
  backgroundColor: theme.vars.palette.background.tooltip,
  boxShadow: theme.shadow.sm,
  borderRadius: theme.vars.radius.xs,
  color: "#fff",
  "&::before": {
    display: "var(--Slider-valueLabelArrowDisplay)",
    position: "absolute",
    content: '""',
    color: theme.vars.palette.background.tooltip,
    bottom: 0,
    border: "calc(var(--Slider-valueLabelArrowSize) / 2) solid",
    borderColor: "currentColor",
    borderRightColor: "transparent",
    borderBottomColor: "transparent",
    borderLeftColor: "transparent",
    left: "50%",
    transform: "translate(-50%, 100%)",
    backgroundColor: "transparent"
  },
  [`&.${sliderClasses_default.valueLabelOpen}`]: {
    transform: "translateY(calc((var(--Slider-thumbSize) + var(--Slider-valueLabelArrowSize)) * -1)) scale(1)"
  }
}));
var SliderMarkLabel = styled_default("span", {
  name: "JoySlider",
  slot: "MarkLabel",
  overridesResolver: (props, styles) => styles.markLabel
})(({
  theme,
  ownerState
}) => _extends({
  fontFamily: theme.vars.fontFamily.body
}, ownerState.size === "sm" && {
  fontSize: theme.vars.fontSize.xs
}, ownerState.size === "md" && {
  fontSize: theme.vars.fontSize.sm
}, ownerState.size === "lg" && {
  fontSize: theme.vars.fontSize.md
}, {
  color: theme.palette.text.tertiary,
  position: "absolute",
  whiteSpace: "nowrap"
}, ownerState.orientation === "horizontal" && {
  top: "calc(50% + 4px + (max(var(--Slider-trackSize), var(--Slider-thumbSize)) / 2))",
  transform: "translateX(-50%)"
}, ownerState.orientation === "vertical" && {
  left: "calc(50% + 8px + (max(var(--Slider-trackSize), var(--Slider-thumbSize)) / 2))",
  transform: "translateY(50%)"
}));
var SliderInput = styled_default("input", {
  name: "JoySlider",
  slot: "Input",
  overridesResolver: (props, styles) => styles.input
})({});
var Slider = React48.forwardRef(function Slider2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoySlider"
  });
  const {
    "aria-label": ariaLabel,
    "aria-valuetext": ariaValuetext,
    className,
    classes: classesProp,
    disableSwap = false,
    disabled = false,
    defaultValue,
    getAriaLabel,
    getAriaValueText,
    marks: marksProp = false,
    max = 100,
    min = 0,
    orientation = "horizontal",
    scale = Identity,
    step = 1,
    track = "normal",
    valueLabelDisplay = "off",
    valueLabelFormat = Identity,
    isRtl = false,
    color: colorProp = "primary",
    size = "md",
    variant = "solid"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded38);
  const {
    getColor
  } = useColorInversion("solid");
  const color = getColor(inProps.color, colorProp);
  const ownerState = _extends({}, props, {
    marks: marksProp,
    classes: classesProp,
    disabled,
    defaultValue,
    isRtl,
    max,
    min,
    orientation,
    scale,
    step,
    track,
    valueLabelDisplay,
    valueLabelFormat,
    color,
    size,
    variant
  });
  const {
    axisProps,
    getRootProps,
    getHiddenInputProps,
    getThumbProps,
    open,
    active,
    axis,
    focusedThumbIndex,
    range,
    dragging,
    marks,
    values,
    trackOffset,
    trackLeap
  } = useSlider(_extends({}, ownerState, {
    ref
  }));
  ownerState.marked = marks.length > 0 && marks.some((mark) => mark.label);
  ownerState.dragging = dragging;
  const trackStyle = _extends({}, axisProps[axis].offset(trackOffset), axisProps[axis].leap(trackLeap));
  const classes = useUtilityClasses34(ownerState);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_m_default(classes.root, className),
    elementType: SliderRoot,
    externalForwardedProps: other,
    getSlotProps: getRootProps,
    ownerState
  });
  const [SlotRail, railProps] = useSlot("rail", {
    className: classes.rail,
    elementType: SliderRail,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotTrack, trackProps] = useSlot("track", {
    additionalProps: {
      style: trackStyle
    },
    className: classes.track,
    elementType: SliderTrack,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotMark, markProps] = useSlot("mark", {
    className: classes.mark,
    elementType: SliderMark,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotMarkLabel, markLabelProps] = useSlot("markLabel", {
    className: classes.markLabel,
    elementType: SliderMarkLabel,
    externalForwardedProps: other,
    ownerState,
    additionalProps: {
      "aria-hidden": true
    }
  });
  const [SlotThumb, thumbProps] = useSlot("thumb", {
    className: classes.thumb,
    elementType: SliderThumb,
    externalForwardedProps: other,
    getSlotProps: getThumbProps,
    ownerState
  });
  const [SlotInput, inputProps] = useSlot("input", {
    className: classes.input,
    elementType: SliderInput,
    externalForwardedProps: other,
    getSlotProps: getHiddenInputProps,
    ownerState
  });
  const [SlotValueLabel, valueLabelProps] = useSlot("valueLabel", {
    className: classes.valueLabel,
    elementType: SliderValueLabel,
    externalForwardedProps: other,
    ownerState
  });
  return (0, import_jsx_runtime47.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [(0, import_jsx_runtime46.jsx)(SlotRail, _extends({}, railProps)), (0, import_jsx_runtime46.jsx)(SlotTrack, _extends({}, trackProps)), marks.filter((mark) => mark.value >= min && mark.value <= max).map((mark, index) => {
      const percent = valueToPercent(mark.value, min, max);
      const style = axisProps[axis].offset(percent);
      let markActive;
      if (track === false) {
        markActive = values.indexOf(mark.value) !== -1;
      } else {
        markActive = track === "normal" && (range ? mark.value >= values[0] && mark.value <= values[values.length - 1] : mark.value <= values[0]) || track === "inverted" && (range ? mark.value <= values[0] || mark.value >= values[values.length - 1] : mark.value >= values[0]);
      }
      return (0, import_jsx_runtime47.jsxs)(React48.Fragment, {
        children: [(0, import_jsx_runtime46.jsx)(SlotMark, _extends({
          "data-index": index
        }, markProps, !isHostComponent(SlotMark) && {
          ownerState: _extends({}, markProps.ownerState, {
            percent
          })
        }, {
          style: _extends({}, style, markProps.style),
          className: clsx_m_default(markProps.className, markActive && classes.markActive)
        })), mark.label != null ? (0, import_jsx_runtime46.jsx)(SlotMarkLabel, _extends({
          "data-index": index
        }, markLabelProps, {
          style: _extends({}, style, markLabelProps.style),
          className: clsx_m_default(classes.markLabel, markLabelProps.className, markActive && classes.markLabelActive),
          children: mark.label
        })) : null]
      }, mark.value);
    }), values.map((value, index) => {
      const percent = valueToPercent(value, min, max);
      const style = axisProps[axis].offset(percent);
      return (0, import_jsx_runtime47.jsxs)(SlotThumb, _extends({
        "data-index": index
      }, thumbProps, {
        className: clsx_m_default(thumbProps.className, active === index && classes.active, focusedThumbIndex === index && classes.focusVisible),
        style: _extends({}, style, {
          pointerEvents: disableSwap && active !== index ? "none" : void 0
        }, thumbProps.style),
        children: [(0, import_jsx_runtime46.jsx)(SlotInput, _extends({
          "data-index": index,
          "aria-label": getAriaLabel ? getAriaLabel(index) : ariaLabel,
          "aria-valuenow": scale(value),
          "aria-valuetext": getAriaValueText ? getAriaValueText(scale(value), index) : ariaValuetext,
          value: values[index]
        }, inputProps)), valueLabelDisplay !== "off" ? (0, import_jsx_runtime46.jsx)(SlotValueLabel, _extends({}, valueLabelProps, {
          className: clsx_m_default(valueLabelProps.className, (open === index || active === index || valueLabelDisplay === "on") && classes.valueLabelOpen),
          children: typeof valueLabelFormat === "function" ? valueLabelFormat(scale(value), index) : valueLabelFormat
        })) : null]
      }), index);
    })]
  }));
});
true ? Slider.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The label of the slider.
   */
  "aria-label": import_prop_types35.default.string,
  /**
   * A string value that provides a user-friendly name for the current value of the slider.
   */
  "aria-valuetext": import_prop_types35.default.string,
  /**
   * @ignore
   */
  children: import_prop_types35.default.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types35.default.object,
  /**
   * @ignore
   */
  className: import_prop_types35.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'primary'
   */
  color: import_prop_types35.default.oneOfType([import_prop_types35.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types35.default.string]),
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: import_prop_types35.default.oneOfType([import_prop_types35.default.arrayOf(import_prop_types35.default.number), import_prop_types35.default.number]),
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: import_prop_types35.default.bool,
  /**
   * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.
   * @default false
   */
  disableSwap: import_prop_types35.default.bool,
  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.
   * This is important for screen reader users.
   * @param {number} index The thumb label's index to format.
   * @returns {string}
   */
  getAriaLabel: import_prop_types35.default.func,
  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.
   * This is important for screen reader users.
   * @param {number} value The thumb label's value to format.
   * @param {number} index The thumb label's index to format.
   * @returns {string}
   */
  getAriaValueText: import_prop_types35.default.func,
  /**
   * If `true` the Slider will be rendered right-to-left (with the lowest value on the right-hand side).
   * @default false
   */
  isRtl: import_prop_types35.default.bool,
  /**
   * Marks indicate predetermined values to which the user can move the slider.
   * If `true` the marks are spaced according the value of the `step` prop.
   * If an array, it should contain objects with `value` and an optional `label` keys.
   * @default false
   */
  marks: import_prop_types35.default.oneOfType([import_prop_types35.default.arrayOf(import_prop_types35.default.shape({
    label: import_prop_types35.default.node,
    value: import_prop_types35.default.number.isRequired
  })), import_prop_types35.default.bool]),
  /**
   * The maximum allowed value of the slider.
   * Should not be equal to min.
   * @default 100
   */
  max: import_prop_types35.default.number,
  /**
   * The minimum allowed value of the slider.
   * Should not be equal to max.
   * @default 0
   */
  min: import_prop_types35.default.number,
  /**
   * Name attribute of the hidden `input` element.
   */
  name: import_prop_types35.default.string,
  /**
   * Callback function that is fired when the slider's value changed.
   *
   * @param {Event} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (any).
   * **Warning**: This is a generic event not a change event.
   * @param {number | number[]} value The new value.
   * @param {number} activeThumb Index of the currently moved thumb.
   */
  onChange: import_prop_types35.default.func,
  /**
   * Callback function that is fired when the `mouseup` is triggered.
   *
   * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.
   * @param {number | number[]} value The new value.
   */
  onChangeCommitted: import_prop_types35.default.func,
  /**
   * @ignore
   */
  onMouseDown: import_prop_types35.default.func,
  /**
   * The component orientation.
   * @default 'horizontal'
   */
  orientation: import_prop_types35.default.oneOf(["horizontal", "vertical"]),
  /**
   * A transformation function, to change the scale of the slider.
   * @param {any} x
   * @returns {any}
   * @default function Identity(x) {
   *   return x;
   * }
   */
  scale: import_prop_types35.default.func,
  /**
   * The size of the component.
   * It accepts theme values between 'sm' and 'lg'.
   * @default 'md'
   */
  size: import_prop_types35.default.oneOfType([import_prop_types35.default.oneOf(["sm", "md", "lg"]), import_prop_types35.default.string]),
  /**
   * The granularity with which the slider can step through values. (A "discrete" slider.)
   * The `min` prop serves as the origin for the valid values.
   * We recommend (max - min) to be evenly divisible by the step.
   *
   * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.
   * @default 1
   */
  step: import_prop_types35.default.number,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types35.default.oneOfType([import_prop_types35.default.arrayOf(import_prop_types35.default.oneOfType([import_prop_types35.default.func, import_prop_types35.default.object, import_prop_types35.default.bool])), import_prop_types35.default.func, import_prop_types35.default.object]),
  /**
   * Tab index attribute of the hidden `input` element.
   */
  tabIndex: import_prop_types35.default.number,
  /**
   * The track presentation:
   *
   * - `normal` the track will render a bar representing the slider value.
   * - `inverted` the track will render a bar representing the remaining slider value.
   * - `false` the track will render without a bar.
   * @default 'normal'
   */
  track: import_prop_types35.default.oneOf(["inverted", "normal", false]),
  /**
   * The value of the slider.
   * For ranged sliders, provide an array with two values.
   */
  value: import_prop_types35.default.oneOfType([import_prop_types35.default.arrayOf(import_prop_types35.default.number), import_prop_types35.default.number]),
  /**
   * Controls when the value label is displayed:
   *
   * - `auto` the value label will display when the thumb is hovered or focused.
   * - `on` will display persistently.
   * - `off` will never display.
   * @default 'off'
   */
  valueLabelDisplay: import_prop_types35.default.oneOf(["auto", "off", "on"]),
  /**
   * The format function the value label's value.
   *
   * When a function is provided, it should have the following signature:
   *
   * - {number} value The value label's value to format
   * - {number} index The value label's index to format
   * @param {any} x
   * @returns {any}
   * @default function Identity(x) {
   *   return x;
   * }
   */
  valueLabelFormat: import_prop_types35.default.oneOfType([import_prop_types35.default.func, import_prop_types35.default.string]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'solid'
   */
  variant: import_prop_types35.default.oneOfType([import_prop_types35.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types35.default.string])
} : void 0;
var Slider_default = Slider;

// node_modules/@mui/joy/Switch/Switch.js
init_objectWithoutPropertiesLoose();
init_extends();
var React49 = __toESM(require_react());
var import_prop_types36 = __toESM(require_prop_types());
init_esm();

// node_modules/@mui/joy/Switch/switchClasses.js
function getSwitchUtilityClass(slot) {
  return generateUtilityClass2("MuiSwitch", slot);
}
var switchClasses = generateUtilityClasses2("MuiSwitch", ["root", "checked", "disabled", "action", "input", "thumb", "track", "focusVisible", "readOnly", "colorPrimary", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantOutlined", "variantSoft", "variantSolid", "startDecorator", "endDecorator"]);
var switchClasses_default = switchClasses;

// node_modules/@mui/joy/Switch/Switch.js
var import_jsx_runtime48 = __toESM(require_jsx_runtime());
var import_jsx_runtime49 = __toESM(require_jsx_runtime());
var _excluded39 = ["checked", "defaultChecked", "disabled", "onBlur", "onChange", "onFocus", "onFocusVisible", "readOnly", "required", "id", "color", "variant", "size", "startDecorator", "endDecorator"];
var useUtilityClasses35 = (ownerState) => {
  const {
    checked,
    disabled,
    focusVisible,
    readOnly,
    color,
    variant
  } = ownerState;
  const slots = {
    root: ["root", checked && "checked", disabled && "disabled", focusVisible && "focusVisible", readOnly && "readOnly", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`],
    thumb: ["thumb", checked && "checked"],
    track: ["track", checked && "checked"],
    action: ["action", focusVisible && "focusVisible"],
    input: ["input"],
    startDecorator: ["startDecorator"],
    endDecorator: ["endDecorator"]
  };
  return composeClasses(slots, getSwitchUtilityClass, {});
};
var switchColorVariables = ({
  theme,
  ownerState
}) => (data = {}) => {
  var _theme$variants;
  const styles = ((_theme$variants = theme.variants[`${ownerState.variant}${data.state || ""}`]) == null ? void 0 : _theme$variants[ownerState.color]) || {};
  return {
    "--Switch-trackBackground": styles.backgroundColor,
    "--Switch-trackColor": styles.color,
    "--Switch-trackBorderColor": ownerState.variant === "outlined" ? styles.borderColor : "currentColor",
    "--Switch-thumbBackground": styles.color,
    "--Switch-thumbColor": styles.backgroundColor
  };
};
var SwitchRoot = styled_default("div", {
  name: "JoySwitch",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants2, _theme$variants3;
  const getColorVariables = switchColorVariables({
    theme,
    ownerState
  });
  return _extends({
    "--variant-borderWidth": (_theme$variants2 = theme.variants[ownerState.variant]) == null ? void 0 : (_theme$variants3 = _theme$variants2[ownerState.color]) == null ? void 0 : _theme$variants3["--variant-borderWidth"],
    "--Switch-trackRadius": theme.vars.radius.lg,
    "--Switch-thumbShadow": ownerState.variant === "soft" ? "none" : "0 0 0 1px var(--Switch-trackBackground)"
  }, ownerState.size === "sm" && {
    "--Switch-trackWidth": "40px",
    "--Switch-trackHeight": "20px",
    "--Switch-thumbSize": "12px",
    "--Switch-gap": "6px",
    fontSize: theme.vars.fontSize.sm
  }, ownerState.size === "md" && {
    "--Switch-trackWidth": "48px",
    "--Switch-trackHeight": "24px",
    "--Switch-thumbSize": "16px",
    "--Switch-gap": "8px",
    fontSize: theme.vars.fontSize.md
  }, ownerState.size === "lg" && {
    "--Switch-trackWidth": "64px",
    "--Switch-trackHeight": "32px",
    "--Switch-thumbSize": "24px",
    "--Switch-gap": "12px"
  }, {
    "--unstable_paddingBlock": `max((var(--Switch-trackHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Switch-thumbSize)) / 2, 0px)`,
    "--Switch-thumbRadius": `max(var(--Switch-trackRadius) - var(--unstable_paddingBlock), min(var(--unstable_paddingBlock) / 2, var(--Switch-trackRadius) / 2))`,
    "--Switch-thumbWidth": "var(--Switch-thumbSize)",
    "--Switch-thumbOffset": `max((var(--Switch-trackHeight) - var(--Switch-thumbSize)) / 2, 0px)`
  }, getColorVariables(), {
    "&:hover": _extends({}, getColorVariables({
      state: "Hover"
    })),
    [`&.${switchClasses_default.checked}`]: _extends({}, getColorVariables(), {
      "&:hover": _extends({}, getColorVariables({
        state: "Hover"
      }))
    }),
    [`&.${switchClasses_default.disabled}`]: _extends({
      pointerEvents: "none",
      color: theme.vars.palette.text.tertiary
    }, getColorVariables({
      state: "Disabled"
    })),
    display: "inline-flex",
    alignItems: "center",
    alignSelf: "center",
    fontFamily: theme.vars.fontFamily.body,
    position: "relative",
    padding: "calc((var(--Switch-thumbSize) / 2) - (var(--Switch-trackHeight) / 2)) calc(-1 * var(--Switch-thumbOffset))",
    backgroundColor: "initial",
    // clear background in case `outlined` variant contain background.
    border: "none"
  });
});
var SwitchAction = styled_default("div", {
  name: "JoySwitch",
  slot: "Action",
  overridesResolver: (props, styles) => styles.action
})(({
  theme
}) => ({
  borderRadius: "var(--Switch-trackRadius)",
  position: "absolute",
  top: 0,
  left: 0,
  bottom: 0,
  right: 0,
  [theme.focus.selector]: theme.focus.default
}));
var SwitchInput = styled_default("input", {
  name: "JoySwitch",
  slot: "Input",
  overridesResolver: (props, styles) => styles.input
})({
  margin: 0,
  height: "100%",
  width: "100%",
  opacity: 0,
  position: "absolute",
  cursor: "pointer"
});
var SwitchTrack = styled_default("span", {
  name: "JoySwitch",
  slot: "Track",
  overridesResolver: (props, styles) => styles.track
})(({
  theme,
  ownerState
}) => _extends({
  position: "relative",
  color: "var(--Switch-trackColor)",
  height: "var(--Switch-trackHeight)",
  width: "var(--Switch-trackWidth)",
  display: "flex",
  flexShrink: 0,
  justifyContent: "space-between",
  alignItems: "center",
  boxSizing: "border-box",
  border: "var(--variant-borderWidth, 0px) solid",
  borderColor: "var(--Switch-trackBorderColor)",
  backgroundColor: "var(--Switch-trackBackground)",
  borderRadius: "var(--Switch-trackRadius)",
  fontFamily: theme.vars.fontFamily.body
}, ownerState.size === "sm" && {
  fontSize: theme.vars.fontSize.xs
}, ownerState.size === "md" && {
  fontSize: theme.vars.fontSize.sm
}, ownerState.size === "lg" && {
  fontSize: theme.vars.fontSize.md
}));
var SwitchThumb = styled_default("span", {
  name: "JoySwitch",
  slot: "Thumb",
  overridesResolver: (props, styles) => styles.thumb
})({
  "--Icon-fontSize": "calc(var(--Switch-thumbSize) * 0.75)",
  display: "inline-flex",
  justifyContent: "center",
  alignItems: "center",
  position: "absolute",
  top: "50%",
  left: "calc(50% - var(--Switch-trackWidth) / 2 + var(--Switch-thumbWidth) / 2 + var(--Switch-thumbOffset))",
  transform: "translate(-50%, -50%)",
  width: "var(--Switch-thumbWidth)",
  height: "var(--Switch-thumbSize)",
  borderRadius: "var(--Switch-thumbRadius)",
  boxShadow: "var(--Switch-thumbShadow)",
  color: "var(--Switch-thumbColor)",
  backgroundColor: "var(--Switch-thumbBackground)",
  [`&.${switchClasses_default.checked}`]: {
    left: "calc(50% + var(--Switch-trackWidth) / 2 - var(--Switch-thumbWidth) / 2 - var(--Switch-thumbOffset))"
  }
});
var SwitchStartDecorator = styled_default("span", {
  name: "JoySwitch",
  slot: "StartDecorator",
  overridesResolver: (props, styles) => styles.startDecorator
})({
  display: "inline-flex",
  marginInlineEnd: "var(--Switch-gap)"
});
var SwitchEndDecorator = styled_default("span", {
  name: "JoySwitch",
  slot: "EndDecorator",
  overridesResolver: (props, styles) => styles.endDecorator
})({
  display: "inline-flex",
  marginInlineStart: "var(--Switch-gap)"
});
var Switch = React49.forwardRef(function Switch2(inProps, ref) {
  var _ref, _inProps$disabled, _ref2, _inProps$size, _formControl$color;
  const props = useThemeProps({
    props: inProps,
    name: "JoySwitch"
  });
  const {
    checked: checkedProp,
    defaultChecked,
    disabled: disabledExternalProp,
    onBlur,
    onChange,
    onFocus,
    onFocusVisible,
    readOnly: readOnlyProp,
    id,
    color: colorProp,
    variant = "solid",
    size: sizeProp = "md",
    startDecorator,
    endDecorator
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded39);
  const formControl = React49.useContext(FormControlContext_default);
  if (true) {
    const registerEffect = formControl == null ? void 0 : formControl.registerEffect;
    React49.useEffect(() => {
      if (registerEffect) {
        return registerEffect();
      }
      return void 0;
    }, [registerEffect]);
  }
  const disabledProp = (_ref = (_inProps$disabled = inProps.disabled) != null ? _inProps$disabled : formControl == null ? void 0 : formControl.disabled) != null ? _ref : disabledExternalProp;
  const size = (_ref2 = (_inProps$size = inProps.size) != null ? _inProps$size : formControl == null ? void 0 : formControl.size) != null ? _ref2 : sizeProp;
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, formControl != null && formControl.error ? "danger" : (_formControl$color = formControl == null ? void 0 : formControl.color) != null ? _formControl$color : colorProp);
  const useSwitchProps = {
    checked: checkedProp,
    defaultChecked,
    disabled: disabledProp,
    onBlur,
    onChange,
    onFocus,
    onFocusVisible,
    readOnly: readOnlyProp
  };
  const {
    getInputProps,
    checked,
    disabled,
    focusVisible,
    readOnly
  } = useSwitch(useSwitchProps);
  const ownerState = _extends({}, props, {
    id,
    checked,
    disabled,
    focusVisible,
    readOnly,
    color: checked ? color || "primary" : color || "neutral",
    variant,
    size
  });
  const classes = useUtilityClasses35(ownerState);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: SwitchRoot,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotStartDecorator, startDecoratorProps] = useSlot("startDecorator", {
    additionalProps: {
      "aria-hidden": true
      // hide the decorator from assistive technology
    },
    className: classes.startDecorator,
    elementType: SwitchStartDecorator,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot("endDecorator", {
    additionalProps: {
      "aria-hidden": true
      // hide the decorator from assistive technology
    },
    className: classes.endDecorator,
    elementType: SwitchEndDecorator,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotTrack, trackProps] = useSlot("track", {
    className: classes.track,
    elementType: SwitchTrack,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotThumb, thumbProps] = useSlot("thumb", {
    className: classes.thumb,
    elementType: SwitchThumb,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotAction, actionProps] = useSlot("action", {
    className: classes.action,
    elementType: SwitchAction,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotInput, inputProps] = useSlot("input", {
    additionalProps: {
      id: id != null ? id : formControl == null ? void 0 : formControl.htmlFor,
      "aria-describedby": formControl == null ? void 0 : formControl["aria-describedby"]
    },
    className: classes.input,
    elementType: SwitchInput,
    externalForwardedProps: other,
    getSlotProps: getInputProps,
    ownerState
  });
  return (0, import_jsx_runtime49.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [startDecorator && (0, import_jsx_runtime48.jsx)(SlotStartDecorator, _extends({}, startDecoratorProps, {
      children: typeof startDecorator === "function" ? startDecorator(ownerState) : startDecorator
    })), (0, import_jsx_runtime49.jsxs)(SlotTrack, _extends({}, trackProps, {
      children: [trackProps == null ? void 0 : trackProps.children, (0, import_jsx_runtime48.jsx)(SlotThumb, _extends({}, thumbProps))]
    })), (0, import_jsx_runtime48.jsx)(SlotAction, _extends({}, actionProps, {
      children: (0, import_jsx_runtime48.jsx)(SlotInput, _extends({}, inputProps))
    })), endDecorator && (0, import_jsx_runtime48.jsx)(SlotEndDecorator, _extends({}, endDecoratorProps, {
      children: typeof endDecorator === "function" ? endDecorator(ownerState) : endDecorator
    }))]
  }));
});
true ? Switch.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * If `true`, the component is checked.
   */
  checked: import_prop_types36.default.bool,
  /**
   * @ignore
   */
  children: import_prop_types36.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types36.default.oneOfType([import_prop_types36.default.oneOf(["danger", "info", "primary", "success", "warning"]), import_prop_types36.default.string]),
  /**
   * The default checked state. Use when the component is not controlled.
   */
  defaultChecked: import_prop_types36.default.bool,
  /**
   * If `true`, the component is disabled.
   */
  disabled: import_prop_types36.default.bool,
  /**
   * The element that appears at the end of the switch.
   */
  endDecorator: import_prop_types36.default.oneOfType([import_prop_types36.default.node, import_prop_types36.default.func]),
  /**
   * @ignore
   */
  id: import_prop_types36.default.string,
  /**
   * @ignore
   */
  onBlur: import_prop_types36.default.func,
  /**
   * Callback fired when the state is changed.
   *
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: import_prop_types36.default.func,
  /**
   * @ignore
   */
  onFocus: import_prop_types36.default.func,
  /**
   * @ignore
   */
  onFocusVisible: import_prop_types36.default.func,
  /**
   * If `true`, the component is read only.
   */
  readOnly: import_prop_types36.default.bool,
  /**
   * If `true`, the `input` element is required.
   */
  required: import_prop_types36.default.bool,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types36.default.oneOfType([import_prop_types36.default.oneOf(["sm", "md", "lg"]), import_prop_types36.default.string]),
  /**
   * The element that appears at the end of the switch.
   */
  startDecorator: import_prop_types36.default.oneOfType([import_prop_types36.default.node, import_prop_types36.default.func]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types36.default.oneOfType([import_prop_types36.default.arrayOf(import_prop_types36.default.oneOfType([import_prop_types36.default.func, import_prop_types36.default.object, import_prop_types36.default.bool])), import_prop_types36.default.func, import_prop_types36.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'solid'
   */
  variant: import_prop_types36.default.oneOfType([import_prop_types36.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types36.default.string])
} : void 0;
var Switch_default = Switch;

// node_modules/@mui/joy/Tab/Tab.js
init_objectWithoutPropertiesLoose();
init_extends();
var React50 = __toESM(require_react());
var import_prop_types37 = __toESM(require_prop_types());
init_esm();

// node_modules/@mui/joy/Tab/tabClasses.js
function getTabUtilityClass(slot) {
  return generateUtilityClass2("MuiTab", slot);
}
var tabListClasses = generateUtilityClasses2("MuiTab", ["root", "disabled", "focusVisible", "selected", "horizontal", "vertical", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var tabClasses_default = tabListClasses;

// node_modules/@mui/joy/Tab/Tab.js
var import_jsx_runtime50 = __toESM(require_jsx_runtime());
var _excluded40 = ["action", "children", "value", "disabled", "onChange", "onClick", "onFocus", "component", "orientation", "variant", "color"];
var useUtilityClasses36 = (ownerState) => {
  const {
    selected,
    disabled,
    focusVisible,
    variant,
    color,
    orientation
  } = ownerState;
  const slots = {
    root: ["root", orientation, disabled && "disabled", focusVisible && "focusVisible", selected && "selected", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`]
  };
  return composeClasses(slots, getTabUtilityClass, {});
};
var TabRoot = styled_default(StyledListItemButton, {
  name: "JoyTab",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  const variantStyle = (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color];
  return _extends({
    justifyContent: "center",
    flexGrow: 1
  }, !ownerState.row && ownerState.orientation === "horizontal" && {
    justifyContent: "flex-start"
  }, ownerState.selected && _extends({
    boxShadow: theme.shadow.sm,
    fontWeight: "initial"
  }, !(variantStyle != null && variantStyle.backgroundColor) && {
    backgroundColor: theme.vars.palette.background.surface
  }));
});
var Tab = React50.forwardRef(function Tab2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyTab"
  });
  const row = React50.useContext(RowListContext_default);
  const {
    action,
    children,
    disabled = false,
    component = "button",
    orientation = "horizontal",
    variant = "plain",
    color: colorProp = "neutral"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded40);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const tabRef = React50.useRef();
  const handleRef = useForkRef(tabRef, ref);
  const {
    active,
    focusVisible,
    setFocusVisible,
    selected,
    getRootProps
  } = useTab_default(_extends({}, props, {
    ref: handleRef
  }));
  React50.useImperativeHandle(action, () => ({
    focusVisible: () => {
      setFocusVisible(true);
      tabRef.current.focus();
    }
  }), [setFocusVisible]);
  const ownerState = _extends({}, props, {
    orientation,
    row,
    active,
    focusVisible,
    disabled,
    selected,
    variant,
    color
  });
  const classes = useUtilityClasses36(ownerState);
  const tabRootProps = useSlotProps({
    elementType: TabRoot,
    getSlotProps: getRootProps,
    externalSlotProps: {},
    externalForwardedProps: other,
    additionalProps: {
      ref,
      as: component
    },
    ownerState,
    className: classes.root
  });
  return (0, import_jsx_runtime50.jsx)(ListItemButtonOrientationContext_default.Provider, {
    value: orientation,
    children: (0, import_jsx_runtime50.jsx)(TabRoot, _extends({}, tabRootProps, {
      children
    }))
  });
});
true ? Tab.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * A ref for imperative actions. It currently only supports `focusVisible()` action.
   */
  action: import_prop_types37.default.oneOfType([import_prop_types37.default.func, import_prop_types37.default.shape({
    current: import_prop_types37.default.shape({
      focusVisible: import_prop_types37.default.func.isRequired
    })
  })]),
  /**
   * @ignore
   */
  children: import_prop_types37.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types37.default.oneOfType([import_prop_types37.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types37.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types37.default.elementType,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: import_prop_types37.default.bool,
  /**
   * Callback invoked when new value is being set.
   */
  onChange: import_prop_types37.default.func,
  /**
   * @ignore
   */
  onClick: import_prop_types37.default.func,
  /**
   * @ignore
   */
  onFocus: import_prop_types37.default.func,
  /**
   * The content direction flow.
   * @default 'horizontal'
   */
  orientation: import_prop_types37.default.oneOf(["horizontal", "vertical"]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types37.default.oneOfType([import_prop_types37.default.arrayOf(import_prop_types37.default.oneOfType([import_prop_types37.default.func, import_prop_types37.default.object, import_prop_types37.default.bool])), import_prop_types37.default.func, import_prop_types37.default.object]),
  /**
   * You can provide your own value. Otherwise, we fall back to the child position index.
   */
  value: import_prop_types37.default.oneOfType([import_prop_types37.default.number, import_prop_types37.default.string]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types37.default.oneOfType([import_prop_types37.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types37.default.string])
} : void 0;
var Tab_default = Tab;

// node_modules/@mui/joy/Table/Table.js
init_objectWithoutPropertiesLoose();
init_extends();
var React51 = __toESM(require_react());
init_clsx_m();
var import_prop_types38 = __toESM(require_prop_types());
init_esm();

// node_modules/@mui/joy/Table/tableClasses.js
function getTableUtilityClass(slot) {
  return generateUtilityClass2("JoyTable", slot);
}
var tableClasses = generateUtilityClasses2("JoyTable", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg", "stickyHeader", "noWrap", "hoverRow", "borderAxisNone", "borderAxisX", "borderAxisXBetween", "borderAxisY", "borderAxisYBetween", "borderAxisBoth", "borderAxisBothBetween"]);
var tableClasses_default = tableClasses;

// node_modules/@mui/joy/Table/Table.js
var import_jsx_runtime51 = __toESM(require_jsx_runtime());
var _excluded41 = ["className", "component", "children", "borderAxis", "hoverRow", "noWrap", "size", "variant", "color", "stripe", "stickyHeader"];
var useUtilityClasses37 = (ownerState) => {
  const {
    size,
    variant,
    color,
    borderAxis,
    stickyHeader,
    noWrap,
    hoverRow
  } = ownerState;
  const slots = {
    root: ["root", stickyHeader && "stickyHeader", noWrap && "noWrap", hoverRow && "hoverRow", borderAxis && `borderAxis${capitalize(borderAxis)}`, variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getTableUtilityClass, {});
};
var tableSelector = {
  getColumn(col) {
    if (typeof col === "number" && col < 0) {
      return `& tr > *:nth-last-child(${Math.abs(col)})`;
    }
    return `& tr > *:nth-child(${col})`;
  },
  /**
   * Except first column
   */
  getColumnExceptFirst() {
    return "& tr > *:not(:first-child)";
  },
  /**
   * Every cell in the table
   */
  getCell() {
    return "& th, & td";
  },
  /**
   * `th` cell of the table (could exist in the body)
   */
  getHeadCell() {
    return "& th";
  },
  /**
   * Only the cell of `thead`
   */
  getHeaderCell() {
    return "& thead th";
  },
  getHeaderCellOfRow(row) {
    return `& thead tr:nth-child(${row}) th`;
  },
  getBottomHeaderCell() {
    return "& thead th:not([colspan])";
  },
  getHeaderNestedFirstColumn() {
    return "& thead tr:not(:first-of-type) th:not([colspan]):first-child";
  },
  /**
   * The body cell that contains data
   */
  getDataCell() {
    return "& td";
  },
  getDataCellExceptLastRow() {
    return "& tr:not(:last-child) > td";
  },
  /**
   * The body cell either `td` or `th`
   */
  getBodyCellExceptLastRow() {
    return `${this.getDataCellExceptLastRow()}, & tr:not(:last-child) > th[scope="row"]`;
  },
  getBodyCellOfRow(row) {
    if (typeof row === "number" && row < 0) {
      return `& tbody tr:nth-last-child(${Math.abs(row)}) td, & tbody tr:nth-last-child(${Math.abs(row)}) th[scope="row"]`;
    }
    return `& tbody tr:nth-child(${row}) td, & tbody tr:nth-child(${row}) th[scope="row"]`;
  },
  getBodyRow(row) {
    if (row === void 0) {
      return `& tbody tr`;
    }
    return `& tbody tr:nth-child(${row})`;
  },
  getFooterCell() {
    return "& tfoot th, & tfoot td";
  }
};
var TableRoot = styled_default("table", {
  name: "JoyTable",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _variantStyle$borderC, _theme$variants2, _ownerState$borderAxi, _ownerState$borderAxi2, _ownerState$borderAxi3, _ownerState$borderAxi4;
  const variantStyle = (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color];
  return [_extends({
    "--Table-headerUnderlineThickness": "2px",
    "--TableCell-borderColor": (_variantStyle$borderC = variantStyle == null ? void 0 : variantStyle.borderColor) != null ? _variantStyle$borderC : theme.vars.palette.divider,
    "--TableCell-headBackground": `var(--Sheet-background, ${theme.vars.palette.background.surface})`
  }, ownerState.size === "sm" && {
    "--private_TableCell-height": "var(--TableCell-height, 32px)",
    "--TableCell-paddingX": "0.25rem",
    "--TableCell-paddingY": "0.25rem",
    fontSize: theme.vars.fontSize.xs
  }, ownerState.size === "md" && {
    "--private_TableCell-height": "var(--TableCell-height, 40px)",
    "--TableCell-paddingX": "0.5rem",
    "--TableCell-paddingY": "0.375rem",
    fontSize: theme.vars.fontSize.sm
  }, ownerState.size === "lg" && {
    "--private_TableCell-height": "var(--TableCell-height, 48px)",
    "--TableCell-paddingX": "0.75rem",
    "--TableCell-paddingY": "0.5rem",
    fontSize: theme.vars.fontSize.md
  }, {
    tableLayout: "fixed",
    width: "100%",
    borderSpacing: "0px",
    borderCollapse: "separate",
    color: theme.vars.palette.text.primary
  }, (_theme$variants2 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants2[ownerState.color], {
    "& caption": {
      color: theme.vars.palette.text.tertiary,
      padding: "calc(2 * var(--TableCell-paddingY)) var(--TableCell-paddingX)"
    },
    [tableSelector.getDataCell()]: _extends({
      padding: "var(--TableCell-paddingY) var(--TableCell-paddingX)",
      height: "var(--private_TableCell-height)",
      borderColor: "var(--TableCell-borderColor)",
      // must come after border bottom
      backgroundColor: "var(--TableCell-dataBackground)"
    }, ownerState.noWrap && {
      textOverflow: "ellipsis",
      whiteSpace: "nowrap",
      overflow: "hidden"
    }),
    [tableSelector.getHeadCell()]: {
      textAlign: "left",
      padding: "var(--TableCell-paddingY) var(--TableCell-paddingX)",
      backgroundColor: "var(--TableCell-headBackground)",
      // use `background-color` in case the Sheet has gradient background
      height: "var(--private_TableCell-height)",
      fontWeight: theme.vars.fontWeight.lg,
      borderColor: "var(--TableCell-borderColor)",
      color: theme.vars.palette.text.secondary,
      textOverflow: "ellipsis",
      whiteSpace: "nowrap",
      overflow: "hidden"
    },
    [tableSelector.getHeaderCell()]: {
      verticalAlign: "bottom",
      // Automatic radius adjustment with Sheet
      "&:first-child": {
        borderTopLeftRadius: "var(--TableCell-cornerRadius, var(--unstable_actionRadius))"
      },
      "&:last-child": {
        borderTopRightRadius: "var(--TableCell-cornerRadius, var(--unstable_actionRadius))"
      }
    },
    "& tfoot tr > *": {
      backgroundColor: `var(--TableCell-footBackground, ${theme.vars.palette.background.level1})`,
      // Automatic radius adjustment with Sheet
      "&:first-child": {
        borderBottomLeftRadius: "var(--TableCell-cornerRadius, var(--unstable_actionRadius))"
      },
      "&:last-child": {
        borderBottomRightRadius: "var(--TableCell-cornerRadius, var(--unstable_actionRadius))"
      }
    }
  }), (((_ownerState$borderAxi = ownerState.borderAxis) == null ? void 0 : _ownerState$borderAxi.startsWith("x")) || ((_ownerState$borderAxi2 = ownerState.borderAxis) == null ? void 0 : _ownerState$borderAxi2.startsWith("both"))) && {
    // insert border between rows
    [tableSelector.getHeaderCell()]: {
      borderBottomWidth: 1,
      borderBottomStyle: "solid"
    },
    [tableSelector.getBottomHeaderCell()]: {
      borderBottomWidth: "var(--Table-headerUnderlineThickness)",
      borderBottomStyle: "solid"
    },
    [tableSelector.getBodyCellExceptLastRow()]: {
      borderBottomWidth: 1,
      borderBottomStyle: "solid"
    },
    [tableSelector.getFooterCell()]: {
      borderTopWidth: 1,
      borderTopStyle: "solid"
    }
  }, (((_ownerState$borderAxi3 = ownerState.borderAxis) == null ? void 0 : _ownerState$borderAxi3.startsWith("y")) || ((_ownerState$borderAxi4 = ownerState.borderAxis) == null ? void 0 : _ownerState$borderAxi4.startsWith("both"))) && {
    // insert border between columns
    [`${tableSelector.getColumnExceptFirst()}, ${tableSelector.getHeaderNestedFirstColumn()}`]: {
      borderLeftWidth: 1,
      borderLeftStyle: "solid"
    }
  }, (ownerState.borderAxis === "x" || ownerState.borderAxis === "both") && {
    // insert border at the top of header and bottom of body
    [tableSelector.getHeaderCellOfRow(1)]: {
      borderTopWidth: 1,
      borderTopStyle: "solid"
    },
    [tableSelector.getBodyCellOfRow(-1)]: {
      borderBottomWidth: 1,
      borderBottomStyle: "solid"
    },
    [tableSelector.getFooterCell()]: {
      borderBottomWidth: 1,
      borderBottomStyle: "solid"
    }
  }, (ownerState.borderAxis === "y" || ownerState.borderAxis === "both") && {
    // insert border on the left of first column and right of the last column
    [tableSelector.getColumn(1)]: {
      borderLeftWidth: 1,
      borderLeftStyle: "solid"
    },
    [tableSelector.getColumn(-1)]: {
      borderRightWidth: 1,
      borderRightStyle: "solid"
    }
  }, ownerState.stripe && {
    [tableSelector.getBodyRow(ownerState.stripe)]: {
      // For customization, a table cell can look for this variable with a fallback value.
      background: `var(--TableRow-stripeBackground, ${theme.vars.palette.background.level1})`,
      color: theme.vars.palette.text.primary
    }
  }, ownerState.hoverRow && {
    [tableSelector.getBodyRow()]: {
      "&:hover": {
        background: `var(--TableRow-hoverBackground, ${theme.vars.palette.background.level2})`
      }
    }
  }, ownerState.stickyHeader && {
    // The column header
    [tableSelector.getHeadCell()]: {
      position: "sticky",
      top: 0
    },
    [tableSelector.getHeaderCell()]: {
      zIndex: theme.vars.zIndex.table
    },
    [tableSelector.getHeaderCellOfRow(2)]: {
      // support upto 2 rows for the sticky header
      top: "var(--private_TableCell-height)"
    }
  }];
});
var Table = React51.forwardRef(function Table2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyTable"
  });
  const {
    className,
    component,
    children,
    borderAxis = "xBetween",
    hoverRow = false,
    noWrap = false,
    size = "md",
    variant = "plain",
    color: colorProp = "neutral",
    stripe,
    stickyHeader = false
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded41);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const ownerState = _extends({}, props, {
    borderAxis,
    hoverRow,
    noWrap,
    component,
    size,
    color,
    variant,
    stripe,
    stickyHeader
  });
  const classes = useUtilityClasses37(ownerState);
  return (0, import_jsx_runtime51.jsx)(TypographyInheritContext.Provider, {
    value: true,
    children: (0, import_jsx_runtime51.jsx)(TableRoot, _extends({
      as: component,
      ownerState,
      className: clsx_m_default(classes.root, className),
      ref
    }, other, {
      children
    }))
  });
});
true ? Table.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The axis to display a border on the table cell.
   * @default 'xBetween'
   */
  borderAxis: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["both", "bothBetween", "none", "x", "xBetween", "y", "yBetween"]), import_prop_types38.default.string]),
  /**
   * Children of the table
   */
  children: import_prop_types38.default.node,
  /**
   * @ignore
   */
  className: import_prop_types38.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types38.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types38.default.elementType,
  /**
   * If `true`, the table row will shade on hover.
   * @default false
   */
  hoverRow: import_prop_types38.default.bool,
  /**
   * If `true`, the body cells will not wrap, but instead will truncate with a text overflow ellipsis.
   *
   * Note: Header cells are always truncated with overflow ellipsis.
   *
   * @default false
   */
  noWrap: import_prop_types38.default.bool,
  /**
   * The size of the component.
   * It accepts theme values between 'sm' and 'lg'.
   * @default 'md'
   */
  size: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["sm", "md", "lg"]), import_prop_types38.default.string]),
  /**
   * Set the header sticky.
   *
   * ⚠️ It doesn't work with IE11.
   * @default false
   */
  stickyHeader: import_prop_types38.default.bool,
  /**
   * The odd or even row of the table body will have subtle background color.
   */
  stripe: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["odd", "even"]), import_prop_types38.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object, import_prop_types38.default.bool])), import_prop_types38.default.func, import_prop_types38.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types38.default.oneOfType([import_prop_types38.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types38.default.string])
} : void 0;
var Table_default = Table;

// node_modules/@mui/joy/TabList/TabList.js
init_objectWithoutPropertiesLoose();
init_extends();
var React53 = __toESM(require_react());
var import_prop_types39 = __toESM(require_prop_types());
init_esm();

// node_modules/@mui/joy/Tabs/SizeTabsContext.js
var React52 = __toESM(require_react());
var SizeTabsContext = React52.createContext("md");
var SizeTabsContext_default = SizeTabsContext;

// node_modules/@mui/joy/TabList/tabListClasses.js
function getTabListUtilityClass(slot) {
  return generateUtilityClass2("MuiTabList", slot);
}
var tabListClasses2 = generateUtilityClasses2("MuiTabList", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg"]);
var tabListClasses_default = tabListClasses2;

// node_modules/@mui/joy/TabList/TabList.js
var import_jsx_runtime52 = __toESM(require_jsx_runtime());
var _excluded43 = ["component", "children", "variant", "color", "size"];
var useUtilityClasses38 = (ownerState) => {
  const {
    orientation,
    size,
    variant,
    color
  } = ownerState;
  const slots = {
    root: ["root", orientation, variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getTabListUtilityClass, {});
};
var TabListRoot = styled_default(StyledList, {
  name: "JoyTabList",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme
}) => _extends({
  flexGrow: "initial",
  "--List-radius": theme.vars.radius.md,
  // targets TabList which reuses styles from List.
  "--List-gap": "var(--Tabs-gap)",
  "--List-padding": "var(--Tabs-gap)",
  "--ListDivider-gap": "0px"
}, scopedVariables));
var TabList = React53.forwardRef(function TabList2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyTabList"
  });
  const tabsSize = React53.useContext(SizeTabsContext_default);
  const {
    component = "div",
    variant = "soft",
    color: colorProp = "neutral",
    size: sizeProp
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded43);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const {
    isRtl,
    orientation,
    getRootProps,
    processChildren
  } = useTabsList_default(_extends({}, props, {
    ref
  }));
  const size = sizeProp != null ? sizeProp : tabsSize;
  const ownerState = _extends({}, props, {
    isRtl,
    orientation,
    variant,
    color,
    size,
    nesting: false
  });
  const classes = useUtilityClasses38(ownerState);
  const tabsListRootProps = useSlotProps({
    elementType: TabListRoot,
    getSlotProps: getRootProps,
    externalSlotProps: {},
    externalForwardedProps: other,
    additionalProps: {
      as: component
    },
    ownerState,
    className: classes.root
  });
  const processedChildren = processChildren();
  return (
    // @ts-ignore conflicted ref types
    (0, import_jsx_runtime52.jsx)(TabListRoot, _extends({}, tabsListRootProps, {
      children: (0, import_jsx_runtime52.jsx)(ListProvider_default, {
        row: orientation === "horizontal",
        nested: true,
        children: processedChildren
      })
    }))
  );
});
true ? TabList.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Used to render icon or text elements inside the TabList if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types39.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types39.default.oneOfType([import_prop_types39.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types39.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types39.default.elementType,
  /**
   * The size of the component.
   */
  size: import_prop_types39.default.oneOfType([import_prop_types39.default.oneOf(["sm", "md", "lg"]), import_prop_types39.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types39.default.oneOfType([import_prop_types39.default.arrayOf(import_prop_types39.default.oneOfType([import_prop_types39.default.func, import_prop_types39.default.object, import_prop_types39.default.bool])), import_prop_types39.default.func, import_prop_types39.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'soft'
   */
  variant: import_prop_types39.default.oneOfType([import_prop_types39.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types39.default.string])
} : void 0;
var TabList_default = TabList;

// node_modules/@mui/joy/TabPanel/TabPanel.js
init_objectWithoutPropertiesLoose();
init_extends();
var React54 = __toESM(require_react());
var import_prop_types40 = __toESM(require_prop_types());
init_esm();

// node_modules/@mui/joy/TabPanel/tabPanelClasses.js
function getTabPanelUtilityClass(slot) {
  return generateUtilityClass2("MuiTabPanel", slot);
}
var tabListClasses3 = generateUtilityClasses2("MuiTabPanel", ["root", "hidden", "sizeSm", "sizeMd", "sizeLg", "horizontal", "vertical"]);
var tabPanelClasses_default = tabListClasses3;

// node_modules/@mui/joy/TabPanel/TabPanel.js
var import_jsx_runtime53 = __toESM(require_jsx_runtime());
var _excluded44 = ["children", "value", "component", "size"];
var useUtilityClasses39 = (ownerState) => {
  const {
    hidden,
    size,
    orientation
  } = ownerState;
  const slots = {
    root: ["root", hidden && "hidden", size && `size${capitalize(size)}`, orientation]
  };
  return composeClasses(slots, getTabPanelUtilityClass, {});
};
var TabPanelRoot = styled_default("div", {
  name: "JoyTabPanel",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => _extends({
  display: ownerState.hidden ? "none" : "initial"
}, ownerState.orientation === "horizontal" && {
  paddingBlockStart: "var(--Tabs-gap)"
}, ownerState.orientation === "vertical" && {
  paddingInlineStart: "var(--Tabs-gap)"
}, ownerState.size === "sm" && {
  fontSize: theme.vars.fontSize.sm
}, ownerState.size === "md" && {
  fontSize: theme.vars.fontSize.md
}, ownerState.size === "lg" && {
  fontSize: theme.vars.fontSize.lg
}, {
  flexGrow: 1,
  fontFamily: theme.vars.fontFamily.body
}));
var TabPanel = React54.forwardRef(function TabPanel2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyTabPanel"
  });
  const {
    orientation
  } = useTabContext() || {
    orientation: "horizontal"
  };
  const tabsSize = React54.useContext(SizeTabsContext_default);
  const {
    children,
    value = 0,
    component,
    size: sizeProp
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded44);
  const {
    hidden,
    getRootProps
  } = useTabPanel_default(_extends({}, props, {
    value
  }));
  const size = sizeProp != null ? sizeProp : tabsSize;
  const ownerState = _extends({}, props, {
    orientation,
    hidden,
    size
  });
  const classes = useUtilityClasses39(ownerState);
  const tabPanelRootProps = useSlotProps({
    elementType: TabPanelRoot,
    getSlotProps: getRootProps,
    externalSlotProps: {},
    externalForwardedProps: other,
    additionalProps: {
      role: "tabpanel",
      ref,
      as: component
    },
    ownerState,
    className: classes.root
  });
  return (0, import_jsx_runtime53.jsx)(TabPanelRoot, _extends({}, tabPanelRootProps, {
    children: !hidden && children
  }));
});
true ? TabPanel.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: import_prop_types40.default.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types40.default.elementType,
  /**
   * The size of the component.
   */
  size: import_prop_types40.default.oneOfType([import_prop_types40.default.oneOf(["sm", "md", "lg"]), import_prop_types40.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types40.default.oneOfType([import_prop_types40.default.arrayOf(import_prop_types40.default.oneOfType([import_prop_types40.default.func, import_prop_types40.default.object, import_prop_types40.default.bool])), import_prop_types40.default.func, import_prop_types40.default.object]),
  /**
   * The value of the TabPanel. It will be shown when the Tab with the corresponding value is selected.
   * @default 0
   */
  value: import_prop_types40.default.oneOfType([import_prop_types40.default.number, import_prop_types40.default.string])
} : void 0;
var TabPanel_default = TabPanel;

// node_modules/@mui/joy/Tabs/Tabs.js
init_objectWithoutPropertiesLoose();
init_extends();
var React55 = __toESM(require_react());
var import_prop_types41 = __toESM(require_prop_types());
init_esm();

// node_modules/@mui/joy/Tabs/tabsClasses.js
function getTabsUtilityClass(slot) {
  return generateUtilityClass2("MuiTabs", slot);
}
var tabListClasses4 = generateUtilityClasses2("MuiTabs", ["root", "horizontal", "vertical", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg"]);
var tabsClasses_default = tabListClasses4;

// node_modules/@mui/joy/Tabs/Tabs.js
var import_jsx_runtime54 = __toESM(require_jsx_runtime());
var _excluded45 = ["children", "value", "defaultValue", "orientation", "direction", "component", "onChange", "selectionFollowsFocus", "variant", "color", "size"];
var useUtilityClasses40 = (ownerState) => {
  const {
    orientation,
    variant,
    color,
    size
  } = ownerState;
  const slots = {
    root: ["root", orientation, variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getTabsUtilityClass, {});
};
var TabsRoot = styled_default(SheetRoot, {
  name: "JoyTabs",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState
}) => _extends({}, ownerState.size === "sm" && {
  "--Tabs-gap": "3px"
}, ownerState.size === "md" && {
  "--Tabs-gap": "4px"
}, ownerState.size === "lg" && {
  "--Tabs-gap": "0.5rem"
}, {
  display: "flex",
  flexDirection: "column"
}, ownerState.orientation === "vertical" && {
  flexDirection: "row",
  alignItems: "flex-start"
}));
var Tabs = React55.forwardRef(function Tabs2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyTabs"
  });
  const {
    children,
    value: valueProp,
    defaultValue: defaultValueProp,
    orientation = "horizontal",
    direction = "ltr",
    component,
    variant = "plain",
    color: colorProp = "neutral",
    size = "md"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded45);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const defaultValue = defaultValueProp || (valueProp === void 0 ? 0 : void 0);
  const {
    tabsContextValue
  } = useTabs_default(_extends({}, props, {
    orientation,
    defaultValue
  }));
  const ownerState = _extends({}, props, {
    orientation,
    direction,
    variant,
    color,
    size
  });
  const classes = useUtilityClasses40(ownerState);
  const tabsRootProps = useSlotProps({
    elementType: TabsRoot,
    externalSlotProps: {},
    externalForwardedProps: other,
    additionalProps: {
      ref,
      as: component
    },
    ownerState,
    className: classes.root
  });
  return (
    // @ts-ignore `defaultValue` between HTMLDiv and TabsProps is conflicted.
    (0, import_jsx_runtime54.jsx)(TabsRoot, _extends({}, tabsRootProps, {
      children: (0, import_jsx_runtime54.jsx)(TabsContext_default.Provider, {
        value: tabsContextValue,
        children: (0, import_jsx_runtime54.jsx)(SizeTabsContext_default.Provider, {
          value: size,
          children
        })
      })
    }))
  );
});
true ? Tabs.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: import_prop_types41.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types41.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types41.default.elementType,
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf([false]), import_prop_types41.default.number, import_prop_types41.default.string]),
  /**
   * The direction of the text.
   * @default 'ltr'
   */
  direction: import_prop_types41.default.oneOf(["ltr", "rtl"]),
  /**
   * Callback invoked when new value is being set.
   */
  onChange: import_prop_types41.default.func,
  /**
   * The component orientation (layout flow direction).
   * @default 'horizontal'
   */
  orientation: import_prop_types41.default.oneOf(["horizontal", "vertical"]),
  /**
   * If `true` the selected tab changes on focus. Otherwise it only
   * changes on activation.
   */
  selectionFollowsFocus: import_prop_types41.default.bool,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["sm", "md", "lg"]), import_prop_types41.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object, import_prop_types41.default.bool])), import_prop_types41.default.func, import_prop_types41.default.object]),
  /**
   * The value of the currently selected `Tab`.
   * If you don't want any selected `Tab`, you can set this prop to `false`.
   */
  value: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf([false]), import_prop_types41.default.number, import_prop_types41.default.string]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types41.default.oneOfType([import_prop_types41.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types41.default.string])
} : void 0;
var Tabs_default = Tabs;

// node_modules/@mui/joy/Textarea/Textarea.js
init_objectWithoutPropertiesLoose();
init_extends();
var React56 = __toESM(require_react());
var import_prop_types42 = __toESM(require_prop_types());
init_esm();

// node_modules/@mui/joy/Textarea/textareaClasses.js
function getTextareaUtilityClass(slot) {
  return generateUtilityClass2("MuiTextarea", slot);
}
var textareaClasses = generateUtilityClasses2("MuiTextarea", ["root", "textarea", "startDecorator", "endDecorator", "formControl", "disabled", "error", "focused", "colorPrimary", "colorNeutral", "colorDanger", "colorInfo", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantPlain", "variantOutlined", "variantSoft"]);
var textareaClasses_default = textareaClasses;

// node_modules/@mui/joy/Textarea/Textarea.js
var import_jsx_runtime55 = __toESM(require_jsx_runtime());
var import_jsx_runtime56 = __toESM(require_jsx_runtime());
var _excluded46 = ["propsToForward", "rootStateClasses", "inputStateClasses", "getRootProps", "getInputProps", "formControl", "focused", "error", "disabled", "size", "color", "variant", "startDecorator", "endDecorator", "minRows", "maxRows"];
var useUtilityClasses41 = (ownerState) => {
  const {
    disabled,
    variant,
    color,
    size
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`],
    textarea: ["textarea"],
    startDecorator: ["startDecorator"],
    endDecorator: ["endDecorator"]
  };
  return composeClasses(slots, getTextareaUtilityClass, {});
};
var TextareaRoot = styled_default("div", {
  name: "JoyTextarea",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$vars$palette, _variantStyle$backgro, _theme$variants2, _theme$variants3;
  const variantStyle = (_theme$variants = theme.variants[`${ownerState.variant}`]) == null ? void 0 : _theme$variants[ownerState.color];
  return [_extends({
    "--Textarea-radius": theme.vars.radius.sm,
    "--Textarea-gap": "0.5rem",
    "--Textarea-placeholderColor": "inherit",
    "--Textarea-placeholderOpacity": 0.5,
    "--Textarea-focusedThickness": theme.vars.focus.thickness
  }, ownerState.color === "context" ? {
    "--Textarea-focusedHighlight": theme.vars.palette.focusVisible
  } : {
    "--Textarea-focusedHighlight": (_theme$vars$palette = theme.vars.palette[ownerState.color === "neutral" ? "primary" : ownerState.color]) == null ? void 0 : _theme$vars$palette[500]
  }, ownerState.size === "sm" && {
    "--Textarea-minHeight": "2rem",
    "--Textarea-paddingBlock": "calc(0.5rem - var(--variant-borderWidth, 0px))",
    // to match Input because <textarea> does not center the text at the middle like <input>
    "--Textarea-paddingInline": "0.5rem",
    "--Textarea-decoratorChildHeight": "min(1.5rem, var(--Textarea-minHeight))",
    "--Icon-fontSize": "1.25rem"
  }, ownerState.size === "md" && {
    "--Textarea-minHeight": "2.5rem",
    "--Textarea-paddingBlock": "calc(0.5rem - var(--variant-borderWidth, 0px))",
    "--Textarea-paddingInline": "0.75rem",
    "--Textarea-decoratorChildHeight": "min(2rem, var(--Textarea-minHeight))",
    "--Icon-fontSize": "1.5rem"
  }, ownerState.size === "lg" && {
    "--Textarea-minHeight": "3rem",
    "--Textarea-paddingBlock": "calc(0.75rem - var(--variant-borderWidth, 0px))",
    "--Textarea-paddingInline": "1rem",
    "--Textarea-gap": "0.75rem",
    "--Textarea-decoratorChildHeight": "min(2.375rem, var(--Textarea-minHeight))",
    "--Icon-fontSize": "1.75rem"
  }, {
    // variables for controlling child components
    "--_Textarea-paddingBlock": "max((var(--Textarea-minHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Textarea-decoratorChildHeight)) / 2, 0px)",
    "--Textarea-decoratorChildRadius": "max(var(--Textarea-radius) - var(--variant-borderWidth, 0px) - var(--_Textarea-paddingBlock), min(var(--_Textarea-paddingBlock) + var(--variant-borderWidth, 0px), var(--Textarea-radius) / 2))",
    "--Button-minHeight": "var(--Textarea-decoratorChildHeight)",
    "--IconButton-size": "var(--Textarea-decoratorChildHeight)",
    "--Button-radius": "var(--Textarea-decoratorChildRadius)",
    "--IconButton-radius": "var(--Textarea-decoratorChildRadius)",
    boxSizing: "border-box",
    minWidth: 0,
    minHeight: "var(--Textarea-minHeight)",
    cursor: "text",
    position: "relative",
    display: "flex",
    flexDirection: "column",
    paddingInlineStart: `var(--Textarea-paddingInline)`,
    // the paddingInlineEnd is added to the textarea. It looks better when the scrollbar appears.
    paddingBlock: "var(--Textarea-paddingBlock)",
    borderRadius: "var(--Textarea-radius)",
    fontFamily: theme.vars.fontFamily.body,
    fontSize: theme.vars.fontSize.md,
    lineHeight: theme.vars.lineHeight.md
  }, ownerState.size === "sm" && {
    fontSize: theme.vars.fontSize.sm,
    lineHeight: theme.vars.lineHeight.sm
  }, {
    "&:before": {
      boxSizing: "border-box",
      content: '""',
      display: "block",
      position: "absolute",
      pointerEvents: "none",
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      zIndex: 1,
      borderRadius: "inherit",
      margin: "calc(var(--variant-borderWidth, 0px) * -1)"
      // for outlined variant
    }
  }), _extends({}, variantStyle, {
    backgroundColor: (_variantStyle$backgro = variantStyle == null ? void 0 : variantStyle.backgroundColor) != null ? _variantStyle$backgro : theme.vars.palette.background.surface,
    [`&:hover:not(.${textareaClasses_default.focused})`]: _extends({}, (_theme$variants2 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants2[ownerState.color], {
      backgroundColor: null,
      // it is not common to change background on hover for Input
      cursor: "text"
    }),
    [`&.${textareaClasses_default.disabled}`]: (_theme$variants3 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants3[ownerState.color],
    [`&.${textareaClasses_default.focused}`]: {
      "&:before": {
        boxShadow: `inset 0 0 0 var(--Textarea-focusedThickness) var(--Textarea-focusedHighlight)`
      }
    }
  })];
});
var TextareaInput = styled_default(TextareaAutosize_default, {
  name: "JoyTextarea",
  slot: "Textarea",
  overridesResolver: (props, styles) => styles.textarea
})({
  resize: "none",
  border: "none",
  // remove the native textarea width
  minWidth: 0,
  // remove the native textarea width
  outline: 0,
  // remove the native textarea outline
  padding: 0,
  // remove the native textarea padding
  paddingInlineEnd: `var(--Textarea-paddingInline)`,
  flex: "auto",
  alignSelf: "stretch",
  color: "inherit",
  backgroundColor: "transparent",
  fontFamily: "inherit",
  fontSize: "inherit",
  fontStyle: "inherit",
  fontWeight: "inherit",
  lineHeight: "inherit",
  "&:-webkit-autofill": {
    WebkitBackgroundClip: "text",
    // remove autofill background
    WebkitTextFillColor: "currentColor"
  },
  "&::-webkit-input-placeholder": {
    color: "var(--Textarea-placeholderColor)",
    opacity: "var(--Textarea-placeholderOpacity)"
  },
  "&::-moz-placeholder": {
    // Firefox 19+
    color: "var(--Textarea-placeholderColor)",
    opacity: "var(--Textarea-placeholderOpacity)"
  },
  "&:-ms-input-placeholder": {
    // IE11
    color: "var(--Textarea-placeholderColor)",
    opacity: "var(--Textarea-placeholderOpacity)"
  },
  "&::-ms-input-placeholder": {
    // Edge
    color: "var(--Textarea-placeholderColor)",
    opacity: "var(--Textarea-placeholderOpacity)"
  }
});
var TextareaStartDecorator = styled_default("div", {
  name: "JoyTextarea",
  slot: "StartDecorator",
  overridesResolver: (props, styles) => styles.startDecorator
})(({
  theme
}) => ({
  display: "flex",
  marginInlineStart: "calc(var(--Textarea-paddingBlock) - var(--Textarea-paddingInline))",
  marginInlineEnd: "var(--Textarea-paddingBlock)",
  marginBlockEnd: "var(--Textarea-gap)",
  color: theme.vars.palette.text.tertiary,
  cursor: "initial"
}));
var TextareaEndDecorator = styled_default("div", {
  name: "JoyTextarea",
  slot: "EndDecorator",
  overridesResolver: (props, styles) => styles.endDecorator
})(({
  theme
}) => ({
  display: "flex",
  marginInlineStart: "calc(var(--Textarea-paddingBlock) - var(--Textarea-paddingInline))",
  marginInlineEnd: "var(--Textarea-paddingBlock)",
  marginBlockStart: "var(--Textarea-gap)",
  color: theme.vars.palette.text.tertiary,
  cursor: "initial"
}));
var Textarea = React56.forwardRef(function Textarea2(inProps, ref) {
  var _ref, _inProps$disabled, _ref2, _inProps$error, _ref3, _inProps$size, _formControl$color;
  const props = useThemeProps({
    props: inProps,
    name: "JoyTextarea"
  });
  const _useForwardedInput = useForwardedInput(props, textareaClasses_default), {
    propsToForward,
    rootStateClasses,
    inputStateClasses,
    getRootProps,
    getInputProps,
    formControl,
    focused,
    error: errorProp = false,
    disabled: disabledProp = false,
    size: sizeProp = "md",
    color: colorProp = "neutral",
    variant = "outlined",
    startDecorator,
    endDecorator,
    minRows,
    maxRows
  } = _useForwardedInput, other = _objectWithoutPropertiesLoose(_useForwardedInput, _excluded46);
  if (true) {
    const registerEffect = formControl == null ? void 0 : formControl.registerEffect;
    React56.useEffect(() => {
      if (registerEffect) {
        return registerEffect();
      }
      return void 0;
    }, [registerEffect]);
  }
  const disabled = (_ref = (_inProps$disabled = inProps.disabled) != null ? _inProps$disabled : formControl == null ? void 0 : formControl.disabled) != null ? _ref : disabledProp;
  const error = (_ref2 = (_inProps$error = inProps.error) != null ? _inProps$error : formControl == null ? void 0 : formControl.error) != null ? _ref2 : errorProp;
  const size = (_ref3 = (_inProps$size = inProps.size) != null ? _inProps$size : formControl == null ? void 0 : formControl.size) != null ? _ref3 : sizeProp;
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, error ? "danger" : (_formControl$color = formControl == null ? void 0 : formControl.color) != null ? _formControl$color : colorProp);
  const ownerState = _extends({}, props, {
    color,
    disabled,
    error,
    focused,
    size,
    variant
  });
  const classes = useUtilityClasses41(ownerState);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: [classes.root, rootStateClasses],
    elementType: TextareaRoot,
    externalForwardedProps: other,
    getSlotProps: getRootProps,
    ownerState
  });
  const [SlotTextarea, textareaProps] = useSlot("textarea", {
    additionalProps: {
      id: formControl == null ? void 0 : formControl.htmlFor,
      "aria-describedby": formControl == null ? void 0 : formControl["aria-describedby"]
    },
    className: [classes.textarea, inputStateClasses],
    elementType: TextareaInput,
    internalForwardedProps: _extends({}, propsToForward, {
      minRows,
      maxRows
    }),
    externalForwardedProps: other,
    getSlotProps: getInputProps,
    ownerState
  });
  const [SlotStartDecorator, startDecoratorProps] = useSlot("startDecorator", {
    className: classes.startDecorator,
    elementType: TextareaStartDecorator,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot("endDecorator", {
    className: classes.endDecorator,
    elementType: TextareaEndDecorator,
    externalForwardedProps: other,
    ownerState
  });
  return (0, import_jsx_runtime56.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [startDecorator && (0, import_jsx_runtime55.jsx)(SlotStartDecorator, _extends({}, startDecoratorProps, {
      children: startDecorator
    })), (0, import_jsx_runtime55.jsx)(SlotTextarea, _extends({}, textareaProps)), endDecorator && (0, import_jsx_runtime55.jsx)(SlotEndDecorator, _extends({}, endDecoratorProps, {
      children: endDecorator
    }))]
  }));
});
true ? Textarea.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * @ignore
   */
  children: import_prop_types42.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types42.default.oneOfType([import_prop_types42.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types42.default.string]),
  /**
   * @ignore
   */
  disabled: import_prop_types42.default.bool,
  /**
   * Trailing adornment for this input.
   */
  endDecorator: import_prop_types42.default.node,
  /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   * @default false
   */
  error: import_prop_types42.default.bool,
  /**
   * Maximum number of rows to display.
   */
  maxRows: import_prop_types42.default.oneOfType([import_prop_types42.default.number, import_prop_types42.default.string]),
  /**
   * Minimum number of rows to display.
   * @default 1
   */
  minRows: import_prop_types42.default.oneOfType([import_prop_types42.default.number, import_prop_types42.default.string]),
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types42.default.oneOfType([import_prop_types42.default.oneOf(["sm", "md", "lg"]), import_prop_types42.default.string]),
  /**
   * Leading adornment for this input.
   */
  startDecorator: import_prop_types42.default.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types42.default.oneOfType([import_prop_types42.default.arrayOf(import_prop_types42.default.oneOfType([import_prop_types42.default.func, import_prop_types42.default.object, import_prop_types42.default.bool])), import_prop_types42.default.func, import_prop_types42.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types42.default.oneOfType([import_prop_types42.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types42.default.string])
} : void 0;
var Textarea_default = Textarea;

// node_modules/@mui/joy/TextField/TextField.js
var TextField_default = function DeletedTextField() {
  throw new Error("MUI: `TextField` component has been removed in favor of Input composition.\n\nTo migrate, run `npx @mui/codemod v5.0.0/joy-text-field-to-input <path>`.\nFor the codemod detail, visit https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#joy-text-field-to-input\n\nTo learn more why it has been removed, visit the RFC https://github.com/mui/material-ui/issues/34176");
};

// node_modules/@mui/joy/Tooltip/Tooltip.js
init_extends();
init_objectWithoutPropertiesLoose();
var React57 = __toESM(require_react());
var import_prop_types43 = __toESM(require_prop_types());
init_clsx_m();
init_esm();

// node_modules/@mui/joy/Tooltip/tooltipClasses.js
function getTooltipUtilityClass(slot) {
  return generateUtilityClass2("MuiTooltip", slot);
}
var tooltipClasses = generateUtilityClasses2("MuiTooltip", ["root", "tooltipArrow", "arrow", "touch", "placementLeft", "placementRight", "placementTop", "placementBottom", "colorPrimary", "colorDanger", "colorInfo", "colorNeutral", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var tooltipClasses_default = tooltipClasses;

// node_modules/@mui/joy/Tooltip/Tooltip.js
var import_jsx_runtime57 = __toESM(require_jsx_runtime());
var import_jsx_runtime58 = __toESM(require_jsx_runtime());
var _excluded47 = ["slots", "slotProps"];
var _excluded210 = ["children", "className", "arrow", "describeChild", "disableFocusListener", "disableHoverListener", "disableInteractive", "disableTouchListener", "enterDelay", "enterNextDelay", "enterTouchDelay", "followCursor", "id", "leaveDelay", "leaveTouchDelay", "onClose", "onOpen", "open", "disablePortal", "direction", "keepMounted", "modifiers", "placement", "title", "color", "variant", "size"];
var excludeSlotsAndSlotProps = (props) => {
  const otherProps = _objectWithoutPropertiesLoose(props, _excluded47);
  return otherProps;
};
var useUtilityClasses42 = (ownerState) => {
  const {
    arrow,
    variant,
    color,
    size,
    placement,
    touch
  } = ownerState;
  const slots = {
    root: ["root", arrow && "tooltipArrow", touch && "touch", size && `size${capitalize(size)}`, color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`, `tooltipPlacement${capitalize(placement.split("-")[0])}`],
    arrow: ["arrow"]
  };
  return composeClasses(slots, getTooltipUtilityClass, {});
};
var TooltipRoot = styled_default("div", {
  name: "JoyTooltip",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState,
  theme
}) => {
  var _theme$variants, _ownerState$placement, _ownerState$placement2;
  const variantStyle = (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color];
  return _extends({}, ownerState.size === "sm" && {
    "--Icon-fontSize": "1rem",
    "--Tooltip-arrowSize": "8px",
    padding: theme.spacing(0.5, 0.625),
    fontSize: theme.vars.fontSize.xs
  }, ownerState.size === "md" && {
    "--Icon-fontSize": "1.125rem",
    "--Tooltip-arrowSize": "10px",
    padding: theme.spacing(0.625, 0.75),
    fontSize: theme.vars.fontSize.sm
  }, ownerState.size === "lg" && {
    "--Icon-fontSize": "1.25rem",
    "--Tooltip-arrowSize": "12px",
    padding: theme.spacing(0.75, 1),
    fontSize: theme.vars.fontSize.md
  }, {
    zIndex: theme.vars.zIndex.tooltip,
    pointerEvents: "none",
    borderRadius: theme.vars.radius.xs,
    boxShadow: theme.shadow.sm,
    fontFamily: theme.vars.fontFamily.body,
    fontWeight: theme.vars.fontWeight.md,
    lineHeight: theme.vars.lineHeight.sm,
    wordWrap: "break-word",
    position: "relative"
  }, !ownerState.disableInteractive && {
    pointerEvents: "auto"
  }, !ownerState.open && {
    pointerEvents: "none"
  }, variantStyle, !variantStyle.backgroundColor && {
    backgroundColor: theme.vars.palette.background.surface
  }, {
    "&::before": {
      // acts as a invisible connector between the element and the tooltip
      // so that the cursor can move to the tooltip without losing focus.
      content: '""',
      display: "block",
      position: "absolute",
      width: (_ownerState$placement = ownerState.placement) != null && _ownerState$placement.match(/(top|bottom)/) ? "100%" : (
        // 10px equals the default offset popper config
        "calc(10px + var(--variant-borderWidth, 0px))"
      ),
      height: (_ownerState$placement2 = ownerState.placement) != null && _ownerState$placement2.match(/(top|bottom)/) ? "calc(10px + var(--variant-borderWidth, 0px))" : "100%"
    },
    '&[data-popper-placement*="bottom"]::before': {
      top: 0,
      left: 0,
      transform: "translateY(-100%)"
    },
    '&[data-popper-placement*="left"]::before': {
      top: 0,
      right: 0,
      transform: "translateX(100%)"
    },
    '&[data-popper-placement*="right"]::before': {
      top: 0,
      left: 0,
      transform: "translateX(-100%)"
    },
    '&[data-popper-placement*="top"]::before': {
      bottom: 0,
      left: 0,
      transform: "translateY(100%)"
    }
  });
});
var TooltipArrow = styled_default("span", {
  name: "JoyTooltip",
  slot: "Arrow",
  overridesResolver: (props, styles) => styles.arrow
})(({
  theme,
  ownerState
}) => {
  var _theme$variants2, _variantStyle$backgro, _variantStyle$backgro2;
  const variantStyle = (_theme$variants2 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants2[ownerState.color];
  return {
    "--unstable_TooltipArrow-rotation": 0,
    width: "var(--Tooltip-arrowSize)",
    height: "var(--Tooltip-arrowSize)",
    boxSizing: "border-box",
    // use psuedo element because Popper controls the `transform` property of the arrow.
    "&:before": {
      content: '""',
      display: "block",
      position: "absolute",
      width: 0,
      height: 0,
      border: "calc(var(--Tooltip-arrowSize) / 2) solid",
      borderLeftColor: "transparent",
      borderBottomColor: "transparent",
      borderTopColor: (_variantStyle$backgro = variantStyle == null ? void 0 : variantStyle.backgroundColor) != null ? _variantStyle$backgro : theme.vars.palette.background.surface,
      borderRightColor: (_variantStyle$backgro2 = variantStyle == null ? void 0 : variantStyle.backgroundColor) != null ? _variantStyle$backgro2 : theme.vars.palette.background.surface,
      borderRadius: `0px 2px 0px 0px`,
      boxShadow: `var(--variant-borderWidth, 0px) calc(-1 * var(--variant-borderWidth, 0px)) 0px 0px ${variantStyle.borderColor}`,
      transformOrigin: "center center",
      transform: "rotate(calc(-45deg + 90deg * var(--unstable_TooltipArrow-rotation)))"
    },
    '[data-popper-placement*="bottom"] &': {
      top: "calc(0.5px + var(--Tooltip-arrowSize) * -1 / 2)"
      // 0.5px is for perfect overlap with the Tooltip
    },
    '[data-popper-placement*="top"] &': {
      "--unstable_TooltipArrow-rotation": 2,
      bottom: "calc(0.5px + var(--Tooltip-arrowSize) * -1 / 2)"
    },
    '[data-popper-placement*="left"] &': {
      "--unstable_TooltipArrow-rotation": 1,
      right: "calc(0.5px + var(--Tooltip-arrowSize) * -1 / 2)"
    },
    '[data-popper-placement*="right"] &': {
      "--unstable_TooltipArrow-rotation": 3,
      left: "calc(0.5px + var(--Tooltip-arrowSize) * -1 / 2)"
    }
  };
});
var hystersisOpen = false;
var hystersisTimer = null;
var cursorPosition = {
  x: 0,
  y: 0
};
function composeMouseEventHandler(handler, eventHandler) {
  return (event) => {
    if (eventHandler) {
      eventHandler(event);
    }
    handler(event);
  };
}
function composeFocusEventHandler(handler, eventHandler) {
  return (event) => {
    if (eventHandler) {
      eventHandler(event);
    }
    handler(event);
  };
}
var Tooltip = React57.forwardRef(function Tooltip2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyTooltip"
  });
  const {
    children,
    className,
    arrow = false,
    describeChild = false,
    disableFocusListener = false,
    disableHoverListener = false,
    disableInteractive: disableInteractiveProp = false,
    disableTouchListener = false,
    enterDelay = 100,
    enterNextDelay = 0,
    enterTouchDelay = 700,
    followCursor = false,
    id: idProp,
    leaveDelay = 0,
    leaveTouchDelay = 1500,
    onClose,
    onOpen,
    open: openProp,
    disablePortal,
    direction,
    keepMounted,
    placement = "bottom",
    title,
    color: colorProp = "neutral",
    variant = "solid",
    size = "md"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded210);
  const {
    getColor
  } = useColorInversion(variant);
  const color = disablePortal ? getColor(inProps.color, colorProp) : colorProp;
  const [childNode, setChildNode] = React57.useState();
  const [arrowRef, setArrowRef] = React57.useState(null);
  const ignoreNonTouchEvents = React57.useRef(false);
  const disableInteractive = disableInteractiveProp || followCursor;
  const closeTimer = React57.useRef();
  const enterTimer = React57.useRef();
  const leaveTimer = React57.useRef();
  const touchTimer = React57.useRef();
  const [openState, setOpenState] = useControlled({
    controlled: openProp,
    default: false,
    name: "Tooltip",
    state: "open"
  });
  let open = openState;
  const id = useId(idProp);
  const prevUserSelect = React57.useRef();
  const stopTouchInteraction = React57.useCallback(() => {
    if (prevUserSelect.current !== void 0) {
      document.body.style.WebkitUserSelect = prevUserSelect.current;
      prevUserSelect.current = void 0;
    }
    clearTimeout(touchTimer.current);
  }, []);
  React57.useEffect(() => {
    return () => {
      clearTimeout(closeTimer.current);
      clearTimeout(enterTimer.current);
      clearTimeout(leaveTimer.current);
      stopTouchInteraction();
    };
  }, [stopTouchInteraction]);
  const handleOpen = (event) => {
    if (hystersisTimer) {
      clearTimeout(hystersisTimer);
    }
    hystersisOpen = true;
    setOpenState(true);
    if (onOpen && !open) {
      onOpen(event);
    }
  };
  const handleClose = useEventCallback((event) => {
    if (hystersisTimer) {
      clearTimeout(hystersisTimer);
    }
    hystersisTimer = setTimeout(() => {
      hystersisOpen = false;
    }, 800 + leaveDelay);
    setOpenState(false);
    if (onClose && open) {
      onClose(event);
    }
    clearTimeout(closeTimer.current);
    closeTimer.current = setTimeout(() => {
      ignoreNonTouchEvents.current = false;
    }, 150);
  });
  const handleEnter = (event) => {
    if (ignoreNonTouchEvents.current && event.type !== "touchstart") {
      return;
    }
    if (childNode) {
      childNode.removeAttribute("title");
    }
    clearTimeout(enterTimer.current);
    clearTimeout(leaveTimer.current);
    if (enterDelay || hystersisOpen && enterNextDelay) {
      enterTimer.current = setTimeout(() => {
        handleOpen(event);
      }, hystersisOpen ? enterNextDelay : enterDelay);
    } else {
      handleOpen(event);
    }
  };
  const handleLeave = (event) => {
    clearTimeout(enterTimer.current);
    clearTimeout(leaveTimer.current);
    leaveTimer.current = setTimeout(() => {
      handleClose(event);
    }, leaveDelay);
  };
  const {
    isFocusVisibleRef,
    onBlur: handleBlurVisible,
    onFocus: handleFocusVisible,
    ref: focusVisibleRef
  } = useIsFocusVisible();
  const [, setChildIsFocusVisible] = React57.useState(false);
  const handleBlur = (event) => {
    handleBlurVisible(event);
    if (isFocusVisibleRef.current === false) {
      setChildIsFocusVisible(false);
      handleLeave(event);
    }
  };
  const handleFocus = (event) => {
    if (!childNode) {
      setChildNode(event.currentTarget);
    }
    handleFocusVisible(event);
    if (isFocusVisibleRef.current === true) {
      setChildIsFocusVisible(true);
      handleEnter(event);
    }
  };
  const detectTouchStart = (event) => {
    ignoreNonTouchEvents.current = true;
    const childrenProps2 = children.props;
    if (childrenProps2.onTouchStart) {
      childrenProps2.onTouchStart(event);
    }
  };
  const handleMouseOver = handleEnter;
  const handleMouseLeave = handleLeave;
  const handleTouchStart = (event) => {
    detectTouchStart(event);
    clearTimeout(leaveTimer.current);
    clearTimeout(closeTimer.current);
    stopTouchInteraction();
    prevUserSelect.current = document.body.style.WebkitUserSelect;
    document.body.style.WebkitUserSelect = "none";
    touchTimer.current = setTimeout(() => {
      document.body.style.WebkitUserSelect = prevUserSelect.current;
      handleEnter(event);
    }, enterTouchDelay);
  };
  const handleTouchEnd = (event) => {
    if (children.props.onTouchEnd) {
      children.props.onTouchEnd(event);
    }
    stopTouchInteraction();
    clearTimeout(leaveTimer.current);
    leaveTimer.current = setTimeout(() => {
      handleClose(event);
    }, leaveTouchDelay);
  };
  React57.useEffect(() => {
    if (!open) {
      return void 0;
    }
    function handleKeyDown(nativeEvent) {
      if (nativeEvent.key === "Escape" || nativeEvent.key === "Esc") {
        handleClose(nativeEvent);
      }
    }
    document.addEventListener("keydown", handleKeyDown);
    return () => {
      document.removeEventListener("keydown", handleKeyDown);
    };
  }, [handleClose, open]);
  const handleUseRef = useForkRef(setChildNode, ref);
  const handleFocusRef = useForkRef(focusVisibleRef, handleUseRef);
  const handleRef = useForkRef(children.ref, handleFocusRef);
  if (typeof title !== "number" && !title) {
    open = false;
  }
  const popperRef = React57.useRef(null);
  const handleMouseMove = (event) => {
    const childrenProps2 = children.props;
    if (childrenProps2.onMouseMove) {
      childrenProps2.onMouseMove(event);
    }
    cursorPosition = {
      x: event.clientX,
      y: event.clientY
    };
    if (popperRef.current) {
      popperRef.current.update();
    }
  };
  const nameOrDescProps = {};
  const titleIsString = typeof title === "string";
  if (describeChild) {
    nameOrDescProps.title = !open && titleIsString && !disableHoverListener ? title : null;
    nameOrDescProps["aria-describedby"] = open ? id : null;
  } else {
    nameOrDescProps["aria-label"] = titleIsString ? title : null;
    nameOrDescProps["aria-labelledby"] = open && !titleIsString ? id : null;
  }
  const childrenProps = _extends({}, nameOrDescProps, excludeSlotsAndSlotProps(other), children.props, {
    className: clsx_m_default(className, children.props.className),
    onTouchStart: detectTouchStart,
    ref: handleRef
  }, followCursor ? {
    onMouseMove: handleMouseMove
  } : {});
  const interactiveWrapperListeners = {};
  if (!disableTouchListener) {
    childrenProps.onTouchStart = handleTouchStart;
    childrenProps.onTouchEnd = handleTouchEnd;
  }
  if (!disableHoverListener) {
    childrenProps.onMouseOver = composeMouseEventHandler(handleMouseOver, childrenProps.onMouseOver);
    childrenProps.onMouseLeave = composeMouseEventHandler(handleMouseLeave, childrenProps.onMouseLeave);
    if (!disableInteractive) {
      interactiveWrapperListeners.onMouseOver = handleMouseOver;
      interactiveWrapperListeners.onMouseLeave = handleMouseLeave;
    }
  }
  if (!disableFocusListener) {
    childrenProps.onFocus = composeFocusEventHandler(handleFocus, childrenProps.onFocus);
    childrenProps.onBlur = composeFocusEventHandler(handleBlur, childrenProps.onBlur);
    if (!disableInteractive) {
      interactiveWrapperListeners.onFocus = handleFocus;
      interactiveWrapperListeners.onBlur = handleBlur;
    }
  }
  const ownerState = _extends({}, props, {
    arrow,
    disableInteractive,
    placement,
    touch: ignoreNonTouchEvents.current,
    color,
    variant,
    size
  });
  const classes = useUtilityClasses42(ownerState);
  const [SlotRoot, rootProps] = useSlot("root", {
    additionalProps: _extends({
      id,
      popperRef,
      placement,
      anchorEl: followCursor ? {
        getBoundingClientRect: () => ({
          top: cursorPosition.y,
          left: cursorPosition.x,
          right: cursorPosition.x,
          bottom: cursorPosition.y,
          width: 0,
          height: 0
        })
      } : childNode,
      open: childNode ? open : false,
      disablePortal,
      keepMounted,
      direction
    }, interactiveWrapperListeners),
    ref: null,
    className: classes.root,
    elementType: PopperUnstyled_default,
    externalForwardedProps: other,
    ownerState,
    internalForwardedProps: {
      component: TooltipRoot
    }
  });
  const [SlotArrow, arrowProps] = useSlot("arrow", {
    ref: setArrowRef,
    className: classes.arrow,
    elementType: TooltipArrow,
    externalForwardedProps: other,
    ownerState
  });
  const modifiers = React57.useMemo(() => [{
    name: "arrow",
    enabled: Boolean(arrowRef),
    options: {
      element: arrowRef,
      // https://popper.js.org/docs/v2/modifiers/arrow/#padding
      // make the arrow looks nice with the Tooltip's border radius
      padding: 6
    }
  }, {
    name: "offset",
    options: {
      offset: [0, 10]
    }
  }, ...rootProps.modifiers || []], [arrowRef, rootProps.modifiers]);
  const result = (0, import_jsx_runtime58.jsxs)(SlotRoot, _extends({}, rootProps, {
    modifiers,
    children: [title, arrow ? (0, import_jsx_runtime57.jsx)(SlotArrow, _extends({}, arrowProps)) : null]
  }));
  return (0, import_jsx_runtime58.jsxs)(React57.Fragment, {
    children: [React57.isValidElement(children) && React57.cloneElement(children, childrenProps), disablePortal ? result : (
      // For portal popup, the children should not inherit color inversion from the upper parent.
      (0, import_jsx_runtime57.jsx)(ColorInversion_default.Provider, {
        value: void 0,
        children: result
      })
    )]
  });
});
true ? Tooltip.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * If `true`, adds an arrow to the tooltip.
   * @default false
   */
  arrow: import_prop_types43.default.bool,
  /**
   * Tooltip reference element.
   */
  children: import_prop_types43.default.element.isRequired,
  /**
   * @ignore
   */
  className: import_prop_types43.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types43.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]),
  /**
   * Set to `true` if the `title` acts as an accessible description.
   * By default the `title` acts as an accessible label for the child.
   * @default false
   */
  describeChild: import_prop_types43.default.bool,
  /**
   * Direction of the text.
   * @default 'ltr'
   */
  direction: import_prop_types43.default.oneOf(["ltr", "rtl"]),
  /**
   * Do not respond to focus-visible events.
   * @default false
   */
  disableFocusListener: import_prop_types43.default.bool,
  /**
   * Do not respond to hover events.
   * @default false
   */
  disableHoverListener: import_prop_types43.default.bool,
  /**
   * Makes a tooltip not interactive, i.e. it will close when the user
   * hovers over the tooltip before the `leaveDelay` is expired.
   * @default false
   */
  disableInteractive: import_prop_types43.default.bool,
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: import_prop_types43.default.bool,
  /**
   * Do not respond to long press touch events.
   * @default false
   */
  disableTouchListener: import_prop_types43.default.bool,
  /**
   * The number of milliseconds to wait before showing the tooltip.
   * This prop won't impact the enter touch delay (`enterTouchDelay`).
   * @default 100
   */
  enterDelay: import_prop_types43.default.number,
  /**
   * The number of milliseconds to wait before showing the tooltip when one was already recently opened.
   * @default 0
   */
  enterNextDelay: import_prop_types43.default.number,
  /**
   * The number of milliseconds a user must touch the element before showing the tooltip.
   * @default 700
   */
  enterTouchDelay: import_prop_types43.default.number,
  /**
   * If `true`, the tooltip follow the cursor over the wrapped element.
   * @default false
   */
  followCursor: import_prop_types43.default.bool,
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: import_prop_types43.default.string,
  /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Popper.
   * @default false
   */
  keepMounted: import_prop_types43.default.bool,
  /**
   * The number of milliseconds to wait before hiding the tooltip.
   * This prop won't impact the leave touch delay (`leaveTouchDelay`).
   * @default 0
   */
  leaveDelay: import_prop_types43.default.number,
  /**
   * The number of milliseconds after the user stops touching an element before hiding the tooltip.
   * @default 1500
   */
  leaveTouchDelay: import_prop_types43.default.number,
  /**
   * Popper.js is based on a "plugin-like" architecture,
   * most of its features are fully encapsulated "modifiers".
   *
   * A modifier is a function that is called each time Popper.js needs to
   * compute the position of the popper.
   * For this reason, modifiers should be very performant to avoid bottlenecks.
   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
   */
  modifiers: import_prop_types43.default.arrayOf(import_prop_types43.default.shape({
    data: import_prop_types43.default.object,
    effect: import_prop_types43.default.func,
    enabled: import_prop_types43.default.bool,
    fn: import_prop_types43.default.func,
    name: import_prop_types43.default.any,
    options: import_prop_types43.default.object,
    phase: import_prop_types43.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
    requires: import_prop_types43.default.arrayOf(import_prop_types43.default.string),
    requiresIfExists: import_prop_types43.default.arrayOf(import_prop_types43.default.string)
  })),
  /**
   * Callback fired when the component requests to be closed.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   */
  onClose: import_prop_types43.default.func,
  /**
   * Callback fired when the component requests to be open.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   */
  onOpen: import_prop_types43.default.func,
  /**
   * If `true`, the component is shown.
   */
  open: import_prop_types43.default.bool,
  /**
   * Tooltip placement.
   * @default 'bottom'
   */
  placement: import_prop_types43.default.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types43.default.oneOf(["sm", "md", "lg"]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types43.default.oneOfType([import_prop_types43.default.arrayOf(import_prop_types43.default.oneOfType([import_prop_types43.default.func, import_prop_types43.default.object, import_prop_types43.default.bool])), import_prop_types43.default.func, import_prop_types43.default.object]),
  /**
   * Tooltip title. Zero-length titles string, undefined, null and false are never displayed.
   */
  title: import_prop_types43.default.node,
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'solid'
   */
  variant: import_prop_types43.default.oneOf(["outlined", "plain", "soft", "solid"])
} : void 0;
var Tooltip_default = Tooltip;
export {
  Alert_default as Alert,
  AspectRatio_default as AspectRatio,
  Autocomplete_default as Autocomplete,
  AutocompleteListbox_default as AutocompleteListbox,
  AutocompleteOption_default as AutocompleteOption,
  Avatar_default as Avatar,
  AvatarGroup_default as AvatarGroup,
  Badge_default as Badge,
  Box_default as Box,
  Breadcrumbs_default as Breadcrumbs,
  Button_default as Button,
  Card_default as Card,
  CardContent_default as CardContent,
  CardCover_default as CardCover,
  CardOverflow_default as CardOverflow,
  Checkbox_default as Checkbox,
  Chip_default as Chip,
  ChipDelete_default as ChipDelete,
  CircularProgress_default as CircularProgress,
  ColorInversionProvider,
  Container_default as Container,
  CssBaseline_default as CssBaseline,
  CssVarsProvider,
  Divider_default as Divider,
  FormControl_default as FormControl,
  FormHelperText_default as FormHelperText,
  FormLabel_default as FormLabel,
  GlobalStyles_default as GlobalStyles,
  Grid_default as Grid,
  IconButton_default as IconButton,
  Input_default as Input,
  LinearProgress_default as LinearProgress,
  Link_default as Link,
  List_default as List,
  ListDivider_default as ListDivider,
  ListItem_default as ListItem,
  ListItemButton_default as ListItemButton,
  ListItemContent_default as ListItemContent,
  ListItemDecorator_default as ListItemDecorator,
  ListSubheader_default as ListSubheader,
  Menu_default as Menu,
  MenuItem_default as MenuItem,
  MenuList_default as MenuList,
  Modal_default as Modal,
  ModalClose_default as ModalClose,
  ModalDialog_default as ModalDialog,
  Option_default as Option,
  Radio_default as Radio,
  RadioGroup_default as RadioGroup,
  ScopedCssBaseline_default as ScopedCssBaseline,
  Select_default as Select,
  Sheet_default as Sheet,
  Slider_default as Slider,
  Stack_default as Stack,
  StyledEngineProvider,
  SvgIcon_default as SvgIcon,
  Switch_default as Switch,
  Tab_default as Tab,
  TabList_default as TabList,
  TabPanel_default as TabPanel,
  Table_default as Table,
  Tabs_default as Tabs,
  TextField_default as TextField,
  Textarea_default as Textarea,
  ThemeProvider,
  Tooltip_default as Tooltip,
  Typography_default as Typography,
  alertClasses_default as alertClasses,
  aspectRatioClasses_default as aspectRatioClasses,
  autocompleteClasses_default as autocompleteClasses,
  autocompleteListboxClasses_default as autocompleteListboxClasses,
  autocompleteOptionClasses_default as autocompleteOptionClasses,
  avatarClasses_default as avatarClasses,
  avatarGroupClasses_default as avatarGroupClasses,
  badgeClasses_default as badgeClasses,
  breadcrumbsClasses_default as breadcrumbsClasses,
  buttonClasses_default as buttonClasses,
  cardClasses_default as cardClasses,
  cardContentClasses_default as cardContentClasses,
  cardCoverClasses_default as cardCoverClasses,
  cardOverflowClasses_default as cardOverflowClasses,
  checkboxClasses_default as checkboxClasses,
  chipClasses_default as chipClasses,
  chipDeleteClasses_default as chipDeleteClasses,
  circularProgressClasses_default as circularProgressClasses,
  colors_default as colors,
  containerClasses_default as containerClasses,
  createFilterOptions,
  createGetCssVar,
  dividerClasses_default as dividerClasses,
  extendTheme,
  formControlClasses_default as formControlClasses,
  formHelperTextClasses_default as formHelperTextClasses,
  formLabelClasses_default as formLabelClasses,
  getAlertUtilityClass,
  getAspectRatioUtilityClass,
  getAutocompleteListboxUtilityClass,
  getAutocompleteOptionUtilityClass,
  getAutocompleteUtilityClass,
  getAvatarGroupUtilityClass,
  getAvatarUtilityClass,
  getBadgeUtilityClass,
  getBreadcrumbsUtilityClass,
  getButtonUtilityClass,
  getCardContentUtilityClass,
  getCardCoverUtilityClass,
  getCardOverflowUtilityClass,
  getCardUtilityClass,
  getCheckboxUtilityClass,
  getChipDeleteUtilityClass,
  getChipUtilityClass,
  getCircularProgressUtilityClass,
  getContainerUtilityClass,
  getDividerUtilityClass,
  getFormControlUtilityClass,
  getFormHelperTextUtilityClass,
  getFormLabelUtilityClass,
  getGridUtilityClass,
  getIconButtonUtilityClass,
  getInitColorSchemeScript,
  getInputUtilityClass,
  getLinearProgressUtilityClass,
  getLinkUtilityClass,
  getListDividerUtilityClass,
  getListItemButtonUtilityClass,
  getListItemContentUtilityClass,
  getListItemDecoratorUtilityClass,
  getListItemUtilityClass,
  getListSubheaderUtilityClass,
  getListUtilityClass,
  getMenuItemUtilityClass,
  getMenuListUtilityClass,
  getMenuUtilityClass,
  getModalCloseUtilityClass,
  getModalDialogUtilityClass,
  getModalUtilityClass,
  getOptionUtilityClass,
  getRadioGroupUtilityClass,
  getRadioUtilityClass,
  getSelectUtilityClass,
  getSheetUtilityClass,
  getSliderUtilityClass,
  getStackUtilityClass,
  getSvgIconUtilityClass,
  getSwitchUtilityClass,
  getTabListUtilityClass,
  getTabPanelUtilityClass,
  getTabUtilityClass,
  getTableUtilityClass,
  getTabsUtilityClass,
  getTextareaUtilityClass,
  getTooltipUtilityClass,
  getTypographyUtilityClass,
  gridClasses_default as gridClasses,
  iconButtonClasses_default as iconButtonClasses,
  inputClasses_default as inputClasses,
  linearProgressClasses_default as linearProgressClasses,
  linkClasses_default as linkClasses,
  listClasses_default as listClasses,
  listDividerClasses_default as listDividerClasses,
  listItemButtonClasses_default as listItemButtonClasses,
  listItemClasses_default as listItemClasses,
  listItemContentClasses_default as listItemContentClasses,
  listItemDecoratorClasses_default as listItemDecoratorClasses,
  listSubheaderClasses_default as listSubheaderClasses,
  menuClasses_default as menuClasses,
  menuItemClasses_default as menuItemClasses,
  menuListClasses_default as menuListClasses,
  modalClasses_default as modalClasses,
  modalCloseClasses_default as modalCloseClasses,
  modalDialogClasses_default as modalDialogClasses,
  optionClasses_default as optionClasses,
  radioClasses_default as radioClasses,
  radioGroupClasses_default as radioGroupClasses,
  scopedCssBaselineClasses_default as scopedCssBaselineClasses,
  selectClasses_default as selectClasses,
  sheetClasses_default as sheetClasses,
  shouldSkipGeneratingVar,
  sliderClasses_default as sliderClasses,
  stackClasses_default as stackClasses,
  styled_default as styled,
  svgIconClasses_default as svgIconClasses,
  switchClasses_default as switchClasses,
  tabClasses_default as tabClasses,
  tabListClasses_default as tabListClasses,
  tabPanelClasses_default as tabPanelClasses,
  tableClasses_default as tableClasses,
  tabsClasses_default as tabsClasses,
  textareaClasses_default as textareaClasses,
  tooltipClasses_default as tooltipClasses,
  typographyClasses_default as typographyClasses,
  useColorInversion,
  useColorScheme,
  useTheme,
  useThemeProps
};
/*! Bundled license information:

@mui/joy/index.js:
  (**
   * @mui/joy v5.0.0-alpha.70
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=@mui_joy.js.map
